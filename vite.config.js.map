{"version":3,"file":"vite.config.js","sourceRoot":"","sources":["vite.config.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,MAAM,CAAC;AACpC,OAAO,KAAK,MAAM,sBAAsB,CAAC;AACzC,OAAO,IAAI,MAAM,MAAM,CAAC;AACxB,OAAO,mBAAmB,MAAM,yCAAyC,CAAC;AAE1E,eAAe,YAAY,CAAC;IAC1B,OAAO,EAAE;QACP,KAAK,EAAE;QACP,mBAAmB,EAAE;QACrB,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY;YACzC,OAAO,CAAC,GAAG,CAAC,OAAO,KAAK,SAAS;YAC/B,CAAC,CAAC;gBACE,MAAM,MAAM,CAAC,kCAAkC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAC1D,CAAC,CAAC,YAAY,EAAE,CACjB;aACF;YACH,CAAC,CAAC,EAAE,CAAC;KACR;IACD,OAAO,EAAE;QACP,KAAK,EAAE;YACL,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,EAAE,KAAK,CAAC;YACvD,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC;YACtD,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,iBAAiB,CAAC;SAChE;KACF;IACD,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC;IACjD,KAAK,EAAE;QACL,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,aAAa,CAAC;QACxD,WAAW,EAAE,IAAI;KAClB;IACD,MAAM,EAAE;QACN,EAAE,EAAE;YACF,MAAM,EAAE,IAAI;YACZ,IAAI,EAAE,CAAC,OAAO,CAAC;SAChB;KACF;CACF,CAAC,CAAC","sourcesContent":["import { defineConfig } from \"vite\";\r\nimport react from \"@vitejs/plugin-react\";\r\nimport path from \"path\";\r\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\r\n\r\nexport default defineConfig({\r\n  plugins: [\r\n    react(),\r\n    runtimeErrorOverlay(),\r\n    ...(process.env.NODE_ENV !== \"production\" &&\r\n    process.env.REPL_ID !== undefined\r\n      ? [\r\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\r\n            m.cartographer(),\r\n          ),\r\n        ]\r\n      : []),\r\n  ],\r\n  resolve: {\r\n    alias: {\r\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\r\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\r\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\r\n    },\r\n  },\r\n  root: path.resolve(import.meta.dirname, \"client\"),\r\n  build: {\r\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\r\n    emptyOutDir: true,\r\n  },\r\n  server: {\r\n    fs: {\r\n      strict: true,\r\n      deny: [\"**/.*\"],\r\n    },\r\n  },\r\n});\r\n"]}