{"version":3,"file":"healthCheck.js","sourceRoot":"","sources":["../../server/middleware/healthCheck.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from 'express';\r\nimport { performance } from 'perf_hooks';\r\n\r\ninterface HealthCheckResult {\r\n  status: 'healthy' | 'unhealthy' | 'degraded';\r\n  timestamp: string;\r\n  uptime: number;\r\n  version: string;\r\n  environment: string;\r\n  services: {\r\n    database: ServiceHealth;\r\n    cache: ServiceHealth;\r\n    externalAPIs: ServiceHealth;\r\n    dataCollection: ServiceHealth;\r\n  };\r\n  metrics: {\r\n    memory: MemoryMetrics;\r\n    cpu: CPUMetrics;\r\n    requests: RequestMetrics;\r\n  };\r\n  lastErrors?: string[];\r\n}\r\n\r\ninterface ServiceHealth {\r\n  status: 'up' | 'down' | 'degraded';\r\n  responseTime?: number;\r\n  lastCheck: string;\r\n  error?: string;\r\n}\r\n\r\ninterface MemoryMetrics {\r\n  used: number;\r\n  total: number;\r\n  usage: number;\r\n  heapUsed: number;\r\n  heapTotal: number;\r\n}\r\n\r\ninterface CPUMetrics {\r\n  usage: number;\r\n  loadAverage: number[];\r\n}\r\n\r\ninterface RequestMetrics {\r\n  total: number;\r\n  successful: number;\r\n  failed: number;\r\n  averageResponseTime: number;\r\n}\r\n\r\nclass HealthCheckService {\r\n  private lastErrors: string[] = [];\r\n  private requestMetrics = {\r\n    total: 0,\r\n    successful: 0,\r\n    failed: 0,\r\n    responseTimes: [] as number[]\r\n  };\r\n\r\n  async performHealthCheck(): Promise<HealthCheckResult> {\r\n    const startTime = performance.now();\r\n    \r\n    try {\r\n      // Check all services in parallel\r\n      const [dbHealth, cacheHealth, apiHealth, dataHealth] = await Promise.allSettled([\r\n        this.checkDatabase(),\r\n        this.checkCache(),\r\n        this.checkExternalAPIs(),\r\n        this.checkDataCollection()\r\n      ]);\r\n\r\n      const services = {\r\n        database: this.getHealthResult(dbHealth),\r\n        cache: this.getHealthResult(cacheHealth),\r\n        externalAPIs: this.getHealthResult(apiHealth),\r\n        dataCollection: this.getHealthResult(dataHealth)\r\n      };\r\n\r\n      // Determine overall status\r\n      const overallStatus = this.determineOverallStatus(services);\r\n      \r\n      const result: HealthCheckResult = {\r\n        status: overallStatus,\r\n        timestamp: new Date().toISOString(),\r\n        uptime: process.uptime(),\r\n        version: process.env.npm_package_version || '1.0.0',\r\n        environment: process.env.NODE_ENV || 'development',\r\n        services,\r\n        metrics: {\r\n          memory: this.getMemoryMetrics(),\r\n          cpu: this.getCPUMetrics(),\r\n          requests: this.getRequestMetrics()\r\n        }\r\n      };\r\n\r\n      if (this.lastErrors.length > 0) {\r\n        result.lastErrors = this.lastErrors.slice(-5); // Last 5 errors\r\n      }\r\n\r\n      return result;\r\n\r\n    } catch (error) {\r\n      console.error('[Health Check] Error performing health check:', error);\r\n      \r\n      return {\r\n        status: 'unhealthy',\r\n        timestamp: new Date().toISOString(),\r\n        uptime: process.uptime(),\r\n        version: process.env.npm_package_version || '1.0.0',\r\n        environment: process.env.NODE_ENV || 'development',\r\n        services: {\r\n          database: { status: 'down', lastCheck: new Date().toISOString() },\r\n          cache: { status: 'down', lastCheck: new Date().toISOString() },\r\n          externalAPIs: { status: 'down', lastCheck: new Date().toISOString() },\r\n          dataCollection: { status: 'down', lastCheck: new Date().toISOString() }\r\n        },\r\n        metrics: {\r\n          memory: this.getMemoryMetrics(),\r\n          cpu: this.getCPUMetrics(),\r\n          requests: this.getRequestMetrics()\r\n        },\r\n        lastErrors: [`Health check failed: ${error instanceof Error ? error.message : 'Unknown error'}`]\r\n      };\r\n    }\r\n  }\r\n\r\n  private async checkDatabase(): Promise<ServiceHealth> {\r\n    const startTime = performance.now();\r\n    \r\n    try {\r\n      // Import storage dynamically to avoid circular dependencies\r\n      const { storage } = await import('../storage');\r\n      \r\n      // Simple query to test database connection\r\n      await storage.getAllDataSources();\r\n      \r\n      const responseTime = performance.now() - startTime;\r\n      \r\n      return {\r\n        status: responseTime < 1000 ? 'up' : 'degraded',\r\n        responseTime,\r\n        lastCheck: new Date().toISOString()\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        status: 'down',\r\n        lastCheck: new Date().toISOString(),\r\n        error: error instanceof Error ? error.message : 'Database connection failed'\r\n      };\r\n    }\r\n  }\r\n\r\n  private async checkCache(): Promise<ServiceHealth> {\r\n    const startTime = performance.now();\r\n    \r\n    try {\r\n      // Simple cache test (using in-memory for now)\r\n      const testKey = 'health_check_' + Date.now();\r\n      const testValue = 'ok';\r\n      \r\n      // In a real implementation, this would check Redis\r\n      // For now, we'll simulate a cache check\r\n      const responseTime = performance.now() - startTime;\r\n      \r\n      return {\r\n        status: 'up',\r\n        responseTime,\r\n        lastCheck: new Date().toISOString()\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        status: 'down',\r\n        lastCheck: new Date().toISOString(),\r\n        error: error instanceof Error ? error.message : 'Cache connection failed'\r\n      };\r\n    }\r\n  }\r\n\r\n  private async checkExternalAPIs(): Promise<ServiceHealth> {\r\n    const startTime = performance.now();\r\n    \r\n    try {\r\n      // Test FDA API availability\r\n      const response = await fetch('https://api.fda.gov/device/recall.json?limit=1', {\r\n        method: 'GET',\r\n        timeout: 5000 as any\r\n      });\r\n      \r\n      const responseTime = performance.now() - startTime;\r\n      \r\n      if (response.ok) {\r\n        return {\r\n          status: responseTime < 3000 ? 'up' : 'degraded',\r\n          responseTime,\r\n          lastCheck: new Date().toISOString()\r\n        };\r\n      } else {\r\n        return {\r\n          status: 'degraded',\r\n          responseTime,\r\n          lastCheck: new Date().toISOString(),\r\n          error: `FDA API returned ${response.status}`\r\n        };\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        status: 'down',\r\n        lastCheck: new Date().toISOString(),\r\n        error: error instanceof Error ? error.message : 'External API check failed'\r\n      };\r\n    }\r\n  }\r\n\r\n  private async checkDataCollection(): Promise<ServiceHealth> {\r\n    try {\r\n      // Check if data collection services are running\r\n      const { storage } = await import('../storage');\r\n      \r\n      // Get recent data to verify collection is working\r\n      const recentUpdates = await storage.getAllRegulatoryUpdates();\r\n      const recentCases = await storage.getAllLegalCases();\r\n      \r\n      // Check if we have recent data (within last 24 hours)\r\n      const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);\r\n      const hasRecentData = recentUpdates.some(update => \r\n        update.lastUpdated && new Date(update.lastUpdated) > oneDayAgo\r\n      );\r\n      \r\n      return {\r\n        status: hasRecentData ? 'up' : 'degraded',\r\n        lastCheck: new Date().toISOString(),\r\n        error: hasRecentData ? undefined : 'No recent data collected'\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        status: 'down',\r\n        lastCheck: new Date().toISOString(),\r\n        error: error instanceof Error ? error.message : 'Data collection check failed'\r\n      };\r\n    }\r\n  }\r\n\r\n  private getHealthResult(result: PromiseSettledResult<ServiceHealth>): ServiceHealth {\r\n    if (result.status === 'fulfilled') {\r\n      return result.value;\r\n    } else {\r\n      return {\r\n        status: 'down',\r\n        lastCheck: new Date().toISOString(),\r\n        error: result.reason instanceof Error ? result.reason.message : 'Service check failed'\r\n      };\r\n    }\r\n  }\r\n\r\n  private determineOverallStatus(services: HealthCheckResult['services']): 'healthy' | 'unhealthy' | 'degraded' {\r\n    const statuses = Object.values(services).map(service => service.status);\r\n    \r\n    if (statuses.every(status => status === 'up')) {\r\n      return 'healthy';\r\n    } else if (statuses.some(status => status === 'down')) {\r\n      return 'unhealthy';\r\n    } else {\r\n      return 'degraded';\r\n    }\r\n  }\r\n\r\n  private getMemoryMetrics(): MemoryMetrics {\r\n    const memUsage = process.memoryUsage();\r\n    \r\n    return {\r\n      used: memUsage.rss,\r\n      total: memUsage.rss + memUsage.heapTotal,\r\n      usage: (memUsage.rss / (memUsage.rss + memUsage.heapTotal)) * 100,\r\n      heapUsed: memUsage.heapUsed,\r\n      heapTotal: memUsage.heapTotal\r\n    };\r\n  }\r\n\r\n  private getCPUMetrics(): CPUMetrics {\r\n    const cpuUsage = process.cpuUsage();\r\n    const loadAvg = process.platform === 'win32' ? [0, 0, 0] : require('os').loadavg();\r\n    \r\n    return {\r\n      usage: (cpuUsage.user + cpuUsage.system) / 1000000, // Convert to seconds\r\n      loadAverage: loadAvg\r\n    };\r\n  }\r\n\r\n  private getRequestMetrics(): RequestMetrics {\r\n    const avgResponseTime = this.requestMetrics.responseTimes.length > 0\r\n      ? this.requestMetrics.responseTimes.reduce((a, b) => a + b, 0) / this.requestMetrics.responseTimes.length\r\n      : 0;\r\n    \r\n    return {\r\n      total: this.requestMetrics.total,\r\n      successful: this.requestMetrics.successful,\r\n      failed: this.requestMetrics.failed,\r\n      averageResponseTime: avgResponseTime\r\n    };\r\n  }\r\n\r\n  // Method to track request metrics\r\n  trackRequest(responseTime: number, success: boolean) {\r\n    this.requestMetrics.total++;\r\n    this.requestMetrics.responseTimes.push(responseTime);\r\n    \r\n    // Keep only last 1000 response times to prevent memory leak\r\n    if (this.requestMetrics.responseTimes.length > 1000) {\r\n      this.requestMetrics.responseTimes = this.requestMetrics.responseTimes.slice(-1000);\r\n    }\r\n    \r\n    if (success) {\r\n      this.requestMetrics.successful++;\r\n    } else {\r\n      this.requestMetrics.failed++;\r\n    }\r\n  }\r\n\r\n  // Method to log errors\r\n  logError(error: string) {\r\n    this.lastErrors.push(`${new Date().toISOString()}: ${error}`);\r\n    \r\n    // Keep only last 50 errors\r\n    if (this.lastErrors.length > 50) {\r\n      this.lastErrors = this.lastErrors.slice(-50);\r\n    }\r\n  }\r\n}\r\n\r\nexport const healthCheckService = new HealthCheckService();\r\n\r\n// Health check endpoint handler\r\nexport const healthCheckHandler = async (req: Request, res: Response) => {\r\n  try {\r\n    const healthResult = await healthCheckService.performHealthCheck();\r\n    \r\n    // Set appropriate HTTP status based on health\r\n    const statusCode = healthResult.status === 'healthy' ? 200 : \r\n                      healthResult.status === 'degraded' ? 200 : 503;\r\n    \r\n    res.status(statusCode).json(healthResult);\r\n  } catch (error) {\r\n    console.error('[Health Check] Handler error:', error);\r\n    res.status(503).json({\r\n      status: 'unhealthy',\r\n      timestamp: new Date().toISOString(),\r\n      error: error instanceof Error ? error.message : 'Health check failed'\r\n    });\r\n  }\r\n};\r\n\r\n// Metrics endpoint handler\r\nexport const metricsHandler = async (req: Request, res: Response) => {\r\n  try {\r\n    const healthResult = await healthCheckService.performHealthCheck();\r\n    \r\n    // Convert to Prometheus format\r\n    const prometheusMetrics = `\r\n# HELP helix_app_status Application health status (1=healthy, 0.5=degraded, 0=unhealthy)\r\n# TYPE helix_app_status gauge\r\nhelix_app_status{environment=\"${healthResult.environment}\"} ${healthResult.status === 'healthy' ? 1 : healthResult.status === 'degraded' ? 0.5 : 0}\r\n\r\n# HELP helix_app_uptime_seconds Application uptime in seconds\r\n# TYPE helix_app_uptime_seconds counter\r\nhelix_app_uptime_seconds ${healthResult.uptime}\r\n\r\n# HELP helix_memory_usage_bytes Memory usage in bytes\r\n# TYPE helix_memory_usage_bytes gauge\r\nhelix_memory_usage_bytes{type=\"used\"} ${healthResult.metrics.memory.used}\r\nhelix_memory_usage_bytes{type=\"heap_used\"} ${healthResult.metrics.memory.heapUsed}\r\nhelix_memory_usage_bytes{type=\"heap_total\"} ${healthResult.metrics.memory.heapTotal}\r\n\r\n# HELP helix_requests_total Total number of requests\r\n# TYPE helix_requests_total counter\r\nhelix_requests_total{status=\"successful\"} ${healthResult.metrics.requests.successful}\r\nhelix_requests_total{status=\"failed\"} ${healthResult.metrics.requests.failed}\r\n\r\n# HELP helix_response_time_seconds Average response time in seconds\r\n# TYPE helix_response_time_seconds gauge\r\nhelix_response_time_seconds ${healthResult.metrics.requests.averageResponseTime / 1000}\r\n\r\n# HELP helix_service_status Service health status (1=up, 0.5=degraded, 0=down)\r\n# TYPE helix_service_status gauge\r\nhelix_service_status{service=\"database\"} ${healthResult.services.database.status === 'up' ? 1 : healthResult.services.database.status === 'degraded' ? 0.5 : 0}\r\nhelix_service_status{service=\"cache\"} ${healthResult.services.cache.status === 'up' ? 1 : healthResult.services.cache.status === 'degraded' ? 0.5 : 0}\r\nhelix_service_status{service=\"external_apis\"} ${healthResult.services.externalAPIs.status === 'up' ? 1 : healthResult.services.externalAPIs.status === 'degraded' ? 0.5 : 0}\r\nhelix_service_status{service=\"data_collection\"} ${healthResult.services.dataCollection.status === 'up' ? 1 : healthResult.services.dataCollection.status === 'degraded' ? 0.5 : 0}\r\n`;\r\n\r\n    res.set('Content-Type', 'application/json');\r\n    res.json({\r\n      success: true,\r\n      metrics: prometheusMetrics,\r\n      contentType: 'prometheus/metrics',\r\n      timestamp: new Date().toISOString()\r\n    });\r\n  } catch (error) {\r\n    console.error('[Metrics] Handler error:', error);\r\n    res.status(500).send('# Metrics unavailable\\n');\r\n  }\r\n};"]}