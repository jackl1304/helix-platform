{"version":3,"file":"fda-tenant-auth.js","sourceRoot":"","sources":["../../server/middleware/fda-tenant-auth.ts"],"names":[],"mappings":"AAQA,MAAM,CAAC,MAAM,uBAAuB,GAAG,CACrC,GAAkB,EAClB,GAAa,EACb,IAAkB,EAClB,EAAE;IACF,IAAI,CAAC;QAEH,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC;YACvB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,KAAK,EAAE,yBAAyB;gBAChC,OAAO,EAAE,qDAAqD;aAC/D,CAAC,CAAC;QACL,CAAC;QAED,MAAM,IAAI,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC;QAG9B,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;YACnB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,KAAK,EAAE,iBAAiB;gBACxB,OAAO,EAAE,qDAAqD;aAC/D,CAAC,CAAC;QACL,CAAC;QAGD,IAAI,IAAI,CAAC,IAAI,KAAK,aAAa,EAAE,CAAC;YAChC,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,KAAK,EAAE,eAAe;gBACtB,OAAO,EAAE,kDAAkD;aAC5D,CAAC,CAAC;QACL,CAAC;QAGD,GAAG,CAAC,MAAM,GAAG;YACX,EAAE,EAAE,IAAI,CAAC,QAAQ;YACjB,IAAI,EAAE,sBAAsB;YAC5B,SAAS,EAAE,QAAQ;YACnB,WAAW,EAAE,MAAM;YACnB,gBAAgB,EAAE,cAAc;YAChC,QAAQ,EAAE,EAAE;SACb,CAAC;QAEF,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC;QAGhB,IAAI,UAAU,IAAI,GAAG,CAAC,KAAK,EAAE,CAAC;YAC5B,OAAO,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC;YAC1B,OAAO,CAAC,IAAI,CAAC,sFAAsF,CAAC,CAAC;QACvG,CAAC;QAGD,IAAI,GAAG,CAAC,IAAI,IAAI,UAAU,IAAI,GAAG,CAAC,IAAI,EAAE,CAAC;YACvC,OAAO,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;YACzB,OAAO,CAAC,IAAI,CAAC,kFAAkF,CAAC,CAAC;QACnG,CAAC;QAED,OAAO,CAAC,GAAG,CAAC,uDAAuD,IAAI,CAAC,QAAQ,WAAW,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;QAEzG,IAAI,EAAE,CAAC;IACT,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,6CAA6C,EAAE,KAAK,CAAC,CAAC;QACpE,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YAC1B,KAAK,EAAE,sBAAsB;YAC7B,OAAO,EAAE,mCAAmC;SAC7C,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC;AAMF,MAAM,CAAC,MAAM,wBAAwB,GAAG,CAAC,GAAkB,EAAU,EAAE;IACrE,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,EAAE,CAAC;QACxB,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;IAC9D,CAAC;IACD,OAAO,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;AAC3B,CAAC,CAAC","sourcesContent":["import { Request, Response, NextFunction } from 'express';\r\nimport { TenantRequest } from './tenant-isolation';\r\n\r\n/**\r\n * FDA Tenant Authentication Middleware\r\n * Ensures all FDA API endpoints are properly scoped to authenticated tenant\r\n * Prevents cross-tenant data access vulnerability\r\n */\r\nexport const fdaTenantAuthMiddleware = (\r\n  req: TenantRequest,\r\n  res: Response,\r\n  next: NextFunction\r\n) => {\r\n  try {\r\n    // Check if user is authenticated\r\n    if (!req.session?.user) {\r\n      return res.status(401).json({\r\n        error: 'Authentication required',\r\n        message: 'FDA API access requires valid tenant authentication'\r\n      });\r\n    }\r\n\r\n    const user = req.session.user;\r\n\r\n    // Ensure user has a valid tenant\r\n    if (!user.tenantId) {\r\n      return res.status(403).json({\r\n        error: 'Tenant required',\r\n        message: 'Valid tenant assignment required for FDA API access'\r\n      });\r\n    }\r\n\r\n    // Block super admin access to tenant-scoped FDA data\r\n    if (user.role === 'super_admin') {\r\n      return res.status(403).json({\r\n        error: 'Access denied',\r\n        message: 'Super admin cannot access tenant-scoped FDA data'\r\n      });\r\n    }\r\n\r\n    // Set authenticated tenant context\r\n    req.tenant = {\r\n      id: user.tenantId,\r\n      name: 'Authenticated Tenant', // Will be populated from DB in production\r\n      subdomain: 'tenant',\r\n      colorScheme: 'blue',\r\n      subscriptionTier: 'professional',\r\n      settings: {}\r\n    };\r\n\r\n    req.user = user;\r\n\r\n    // Remove any tenantId from query parameters to prevent tampering\r\n    if ('tenantId' in req.query) {\r\n      delete req.query.tenantId;\r\n      console.warn('[FDA-SECURITY] Removed tenantId from query parameters to prevent cross-tenant access');\r\n    }\r\n\r\n    // Remove any tenantId from request body to prevent tampering\r\n    if (req.body && 'tenantId' in req.body) {\r\n      delete req.body.tenantId;\r\n      console.warn('[FDA-SECURITY] Removed tenantId from request body to prevent cross-tenant access');\r\n    }\r\n\r\n    console.log(`[FDA-AUTH] Authenticated FDA API access for tenant: ${user.tenantId}, user: ${user.email}`);\r\n    \r\n    next();\r\n  } catch (error) {\r\n    console.error('[FDA-AUTH] FDA tenant authentication error:', error);\r\n    return res.status(500).json({\r\n      error: 'Authentication error',\r\n      message: 'Failed to validate FDA API access'\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Helper function to get authenticated tenant ID from request\r\n * Use this in FDA routes instead of reading tenantId from query/body\r\n */\r\nexport const getAuthenticatedTenantId = (req: TenantRequest): string => {\r\n  if (!req.user?.tenantId) {\r\n    throw new Error('No authenticated tenant found in request');\r\n  }\r\n  return req.user.tenantId;\r\n};"]}