{"version":3,"file":"tenant-isolation.js","sourceRoot":"","sources":["../../server/middleware/tenant-isolation.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response, NextFunction } from 'express';\r\nimport { neon } from \"@neondatabase/serverless\";\r\n\r\n// Extend Express session interface\r\ndeclare module 'express-session' {\r\n  interface SessionData {\r\n    user?: {\r\n      id: string;\r\n      tenantId: string;\r\n      email: string;\r\n      name: string;\r\n      role: 'tenant_admin' | 'tenant_user' | 'super_admin';\r\n    };\r\n  }\r\n}\r\n\r\nconst sql = neon(process.env.DATABASE_URL!);\r\n\r\n// Extended Request interface for tenant context\r\nexport interface TenantRequest extends Request {\r\n  tenant?: {\r\n    id: string;\r\n    name: string;\r\n    subdomain: string;\r\n    colorScheme: string;\r\n    subscriptionTier: string;\r\n    settings: any;\r\n  };\r\n  user?: {\r\n    id: string;\r\n    tenantId: string;\r\n    email: string;\r\n    name: string;\r\n    role: 'tenant_admin' | 'tenant_user' | 'super_admin';\r\n  };\r\n}\r\n\r\n/**\r\n * Tenant Isolation Middleware\r\n * Ensures strict separation between tenants and prevents admin access\r\n */\r\nexport const tenantIsolationMiddleware = async (\r\n  req: TenantRequest,\r\n  res: Response,\r\n  next: NextFunction\r\n) => {\r\n  try {\r\n    // For demo purposes, use a simplified tenant resolution\r\n    // In production, this would be based on subdomain or headers\r\n    \r\n    // Check if this is a tenant route\r\n    if (!req.path.startsWith('/api/tenant') && !req.path.startsWith('/tenant')) {\r\n      return next();\r\n    }\r\n\r\n    // Super admin routes - block tenant access\r\n    if (req.path.startsWith('/admin') || req.path.startsWith('/api/admin')) {\r\n      return res.status(403).json({\r\n        error: 'Forbidden',\r\n        message: 'Admin access not available for tenant users'\r\n      });\r\n    }\r\n\r\n    // Use demo tenant for testing\r\n    const tenant = {\r\n      id: '2d224347-b96e-4b61-acac-dbd414a0e048',\r\n      name: 'Demo Medical Corp',\r\n      subdomain: 'demo-medical',\r\n      subscription_tier: 'professional',\r\n      settings: {},\r\n      customer_permissions: {}\r\n    };\r\n\r\n    // Attach tenant to request\r\n    req.tenant = {\r\n      id: tenant.id,\r\n      name: tenant.name,\r\n      subdomain: tenant.subdomain,\r\n      colorScheme: 'blue', // Default color scheme\r\n      subscriptionTier: tenant.subscription_tier,\r\n      settings: tenant.settings\r\n    };\r\n\r\n    // Session-based user validation\r\n    if (req.session?.user) {\r\n      const user = req.session.user;\r\n      \r\n      // Strict tenant isolation - user must belong to current tenant\r\n      if (user.tenantId !== tenant.id) {\r\n        req.session.destroy((err) => {\r\n          if (err) console.error('Session destroy error:', err);\r\n        });\r\n        return res.status(403).json({\r\n          error: 'Access denied',\r\n          message: 'User does not belong to this tenant'\r\n        });\r\n      }\r\n\r\n      // Prevent tenant users from accessing admin routes\r\n      if (user.role !== 'super_admin' && (req.path.startsWith('/admin') || req.path.startsWith('/api/admin'))) {\r\n        return res.status(403).json({\r\n          error: 'Forbidden',\r\n          message: 'Insufficient privileges for admin access'\r\n        });\r\n      }\r\n\r\n      req.user = user;\r\n    }\r\n\r\n    next();\r\n  } catch (error) {\r\n    console.error('[TENANT] Tenant isolation error:', error);\r\n    res.status(500).json({\r\n      error: 'Internal server error',\r\n      message: 'Tenant resolution failed'\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Tenant-aware database query wrapper\r\n * Automatically adds tenant filter to all queries\r\n */\r\nexport class TenantAwareStorage {\r\n  constructor(private tenantId: string) {}\r\n\r\n  async query(queryTemplate: any, params: any[] = []) {\r\n    // Add tenant filter to all queries\r\n    return sql(queryTemplate, [this.tenantId, ...params]);\r\n  }\r\n\r\n  async getDashboardStats() {\r\n    try {\r\n      const [updates, sources, legalCases] = await Promise.all([\r\n        sql`SELECT \r\n          COUNT(*) as total_count,\r\n          COUNT(DISTINCT title) as unique_count,\r\n          COUNT(*) FILTER (WHERE published_at >= CURRENT_DATE - INTERVAL '7 days') as recent_count\r\n        FROM regulatory_updates`,\r\n        \r\n        sql`SELECT COUNT(*) as count FROM data_sources WHERE is_active = true`,\r\n        \r\n        sql`SELECT \r\n          COUNT(*) as total_count,\r\n          COUNT(DISTINCT title) as unique_count,\r\n          COUNT(*) FILTER (WHERE decision_date >= CURRENT_DATE - INTERVAL '30 days') as recent_count\r\n        FROM legal_cases`\r\n      ]);\r\n\r\n      return {\r\n        totalUpdates: parseInt(updates[0]?.total_count || '0'),\r\n        uniqueUpdates: parseInt(updates[0]?.unique_count || '0'),\r\n        totalLegalCases: parseInt(legalCases[0]?.total_count || '0'),\r\n        uniqueLegalCases: parseInt(legalCases[0]?.unique_count || '0'),\r\n        recentUpdates: parseInt(updates[0]?.recent_count || '0'),\r\n        recentLegalCases: parseInt(legalCases[0]?.recent_count || '0'),\r\n        activeDataSources: parseInt(sources[0]?.count || '0')\r\n      };\r\n    } catch (error) {\r\n      console.error('[TENANT] Dashboard stats error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getRegulatoryUpdates(limit: number = 50) {\r\n    try {\r\n      const result = await sql`\r\n        SELECT * FROM regulatory_updates \r\n        ORDER BY published_at DESC \r\n        LIMIT ${limit}\r\n      `;\r\n      return result;\r\n    } catch (error) {\r\n      console.error('[TENANT] Regulatory updates error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getLegalCases(limit: number = 50) {\r\n    try {\r\n      const result = await sql`\r\n        SELECT * FROM legal_cases \r\n        ORDER BY decision_date DESC \r\n        LIMIT ${limit}\r\n      `;\r\n      return result;\r\n    } catch (error) {\r\n      console.error('[TENANT] Legal cases error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Create tenant storage instance\r\n */\r\nexport const createTenantStorage = (tenantId: string) => {\r\n  return new TenantAwareStorage(tenantId);\r\n};"]}