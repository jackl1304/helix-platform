{"version":3,"file":"analyticsMiddleware.js","sourceRoot":"","sources":["../../server/middleware/analyticsMiddleware.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response, NextFunction } from \"express\";\r\nimport { db } from \"../db.js\";\r\nimport { websiteAnalytics } from \"../../shared/schema\";\r\nimport { UAParser } from \"ua-parser-js\";\r\n\r\ninterface AnalyticsRequest extends Request {\r\n  tenantId?: string;\r\n  user?: {\r\n    id: string;\r\n    username: string;\r\n  };\r\n  sessionId?: string;\r\n}\r\n\r\n// Utility-Funktion zum Erkennen von Browser/Device/OS\r\nfunction parseUserAgent(userAgent: string) {\r\n  const parser = new UAParser(userAgent);\r\n  const result = parser.getResult();\r\n  \r\n  return {\r\n    browser: `${result.browser.name} ${result.browser.version}`,\r\n    device: result.device.model || result.device.type || 'Desktop',\r\n    os: `${result.os.name} ${result.os.version}`\r\n  };\r\n}\r\n\r\n// Vereinfachte IP-Geolocation (könnte erweitert werden)\r\nfunction getLocationFromIP(ip: string) {\r\n  // Für Production könnte hier eine echte Geolocation-API verwendet werden\r\n  if (ip.startsWith('127.') || ip === '::1' || ip.startsWith('192.168.')) {\r\n    return { country: 'Deutschland', city: 'Lokal' };\r\n  }\r\n  return { country: 'Unbekannt', city: 'Unbekannt' };\r\n}\r\n\r\nexport const analyticsMiddleware = async (\r\n  req: AnalyticsRequest,\r\n  res: Response,\r\n  next: NextFunction\r\n) => {\r\n  try {\r\n    // Nur HTML-Seiten und API-Aufrufe tracken, nicht Assets\r\n    if (\r\n      req.path.includes('/assets/') ||\r\n      req.path.includes('.css') ||\r\n      req.path.includes('.js') ||\r\n      req.path.includes('.ico') ||\r\n      req.path.includes('.png') ||\r\n      req.path.includes('.jpg') ||\r\n      req.path.includes('.svg') ||\r\n      req.path.includes('/api/health')\r\n    ) {\r\n      return next();\r\n    }\r\n\r\n    // User-Agent parsen\r\n    const userAgent = req.get('User-Agent') || '';\r\n    const { browser, device, os } = parseUserAgent(userAgent);\r\n    \r\n    // IP-Adresse ermitteln\r\n    const ipAddress = req.ip || req.connection.remoteAddress || 'unknown';\r\n    const { country, city } = getLocationFromIP(ipAddress);\r\n    \r\n    // Session-ID aus Session oder generieren\r\n    const sessionId = req.session?.id || `session_${Date.now()}_${Math.random().toString(36).substring(2)}`;\r\n\r\n    // Analytics-Eintrag erstellen\r\n    await db.insert(websiteAnalytics).values({\r\n      tenantId: req.tenantId || null,\r\n      userId: req.user?.id || null,\r\n      sessionId,\r\n      page: req.path,\r\n      userAgent,\r\n      ipAddress,\r\n      country,\r\n      city,\r\n      device,\r\n      browser,\r\n      os,\r\n      referrer: req.get('Referer') || null,\r\n      utm_source: req.query.utm_source as string || null,\r\n      utm_medium: req.query.utm_medium as string || null,\r\n      utm_campaign: req.query.utm_campaign as string || null,\r\n    });\r\n\r\n    // Füge Session-ID zum Request hinzu falls nicht vorhanden\r\n    if (!req.sessionId) {\r\n      req.sessionId = sessionId;\r\n    }\r\n\r\n    next();\r\n  } catch (error) {\r\n    // Analytics-Fehler sollen die Anwendung nicht beeinträchtigen\r\n    console.error('[Analytics] Fehler beim Tracking:', error);\r\n    next();\r\n  }\r\n};"]}