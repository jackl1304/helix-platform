{"version":3,"file":"security.middleware.js","sourceRoot":"","sources":["../../../server/middleware/security.middleware.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response, NextFunction } from 'express';\r\nimport { logger } from '../services/logger.service';\r\n\r\ninterface RateLimitStore {\r\n  [key: string]: {\r\n    count: number;\r\n    resetTime: number;\r\n  };\r\n}\r\n\r\nconst rateLimitStore: RateLimitStore = {};\r\n\r\nexport const rateLimiter = (maxRequests = 100, windowMs = 15 * 60 * 1000) => {\r\n  return (req: Request, res: Response, next: NextFunction) => {\r\n    const clientIp = req.ip || req.connection.remoteAddress || 'unknown';\r\n    const now = Date.now();\r\n    \r\n    // Clean up expired entries\r\n    Object.keys(rateLimitStore).forEach(ip => {\r\n      if (rateLimitStore[ip].resetTime < now) {\r\n        delete rateLimitStore[ip];\r\n      }\r\n    });\r\n    \r\n    // Check current client\r\n    if (!rateLimitStore[clientIp]) {\r\n      rateLimitStore[clientIp] = {\r\n        count: 1,\r\n        resetTime: now + windowMs\r\n      };\r\n    } else {\r\n      rateLimitStore[clientIp].count++;\r\n    }\r\n    \r\n    const clientData = rateLimitStore[clientIp];\r\n    \r\n    // Set rate limit headers\r\n    res.set({\r\n      'X-RateLimit-Limit': maxRequests.toString(),\r\n      'X-RateLimit-Remaining': Math.max(0, maxRequests - clientData.count).toString(),\r\n      'X-RateLimit-Reset': new Date(clientData.resetTime).toISOString(),\r\n    });\r\n    \r\n    if (clientData.count > maxRequests) {\r\n      logger.warn('Rate limit exceeded', { \r\n        clientIp, \r\n        path: req.path, \r\n        userAgent: req.get('User-Agent') \r\n      });\r\n      \r\n      return res.status(429).json({\r\n        success: false,\r\n        error: 'Too many requests, please try again later',\r\n        retryAfter: Math.ceil((clientData.resetTime - now) / 1000),\r\n        timestamp: new Date().toISOString()\r\n      });\r\n    }\r\n    \r\n    next();\r\n  };\r\n};\r\n\r\nexport const securityHeaders = (req: Request, res: Response, next: NextFunction) => {\r\n  res.set({\r\n    'X-Content-Type-Options': 'nosniff',\r\n    'X-Frame-Options': 'DENY',\r\n    'X-XSS-Protection': '1; mode=block',\r\n    'Referrer-Policy': 'strict-origin-when-cross-origin',\r\n    'Permissions-Policy': 'camera=(), microphone=(), geolocation=()',\r\n  });\r\n  \r\n  next();\r\n};\r\n\r\nexport const sanitizeInput = (req: Request, res: Response, next: NextFunction) => {\r\n  // Basic input sanitization\r\n  const sanitize = (obj: any): any => {\r\n    if (typeof obj === 'string') {\r\n      return obj.trim().slice(0, 10000); // Limit string length\r\n    }\r\n    if (Array.isArray(obj)) {\r\n      return obj.slice(0, 100).map(sanitize); // Limit array length\r\n    }\r\n    if (obj && typeof obj === 'object') {\r\n      const sanitized: any = {};\r\n      const keys = Object.keys(obj).slice(0, 50); // Limit object keys\r\n      for (const key of keys) {\r\n        if (key.length <= 100) { // Limit key length\r\n          sanitized[key] = sanitize(obj[key]);\r\n        }\r\n      }\r\n      return sanitized;\r\n    }\r\n    return obj;\r\n  };\r\n  \r\n  if (req.body) {\r\n    req.body = sanitize(req.body);\r\n  }\r\n  if (req.query) {\r\n    req.query = sanitize(req.query);\r\n  }\r\n  \r\n  next();\r\n};"]}