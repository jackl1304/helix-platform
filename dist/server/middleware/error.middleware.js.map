{"version":3,"file":"error.middleware.js","sourceRoot":"","sources":["../../../server/middleware/error.middleware.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response, NextFunction } from 'express';\r\nimport { ZodError } from 'zod';\r\nimport { Logger } from '../services/logger.service';\r\n// Define error types locally since @shared/types doesn't exist\r\nclass AppError extends Error {\r\n  public readonly statusCode: number;\r\n  public readonly isOperational: boolean;\r\n\r\n  constructor(message: string, statusCode: number = 500, isOperational: boolean = true) {\r\n    super(message);\r\n    this.statusCode = statusCode;\r\n    this.isOperational = isOperational;\r\n    Error.captureStackTrace(this, this.constructor);\r\n  }\r\n}\r\n\r\nclass ValidationError extends AppError {\r\n  public readonly field: string;\r\n  public readonly value: unknown;\r\n  public readonly expectedType: string;\r\n\r\n  constructor(message: string, field: string, value: unknown, expectedType: string) {\r\n    super(message, 400);\r\n    this.field = field;\r\n    this.value = value;\r\n    this.expectedType = expectedType;\r\n  }\r\n}\r\n\r\nclass DatabaseError extends AppError {\r\n  public readonly operation: string;\r\n  public readonly table?: string;\r\n  public readonly originalError: Error;\r\n\r\n  constructor(message: string, operation: string, table?: string, originalError?: Error) {\r\n    super(message, 500);\r\n    this.operation = operation;\r\n    this.table = table;\r\n    this.originalError = originalError || new Error(message);\r\n  }\r\n}\r\n\r\nconst isAppError = (error: any): error is AppError => {\r\n  return error instanceof AppError;\r\n};\r\n\r\nconst isOperationalError = (error: AppError): boolean => {\r\n  return error.isOperational;\r\n};\r\n\r\nconst formatErrorResponse = (error: AppError) => {\r\n  return {\r\n    error: {\r\n      message: error.message,\r\n      statusCode: error.statusCode,\r\n      ...(process.env.NODE_ENV !== 'production' && { stack: error.stack })\r\n    }\r\n  };\r\n};\r\n\r\nconst logger = new Logger('ErrorMiddleware');\r\n\r\n// Async handler wrapper to catch async errors\r\nexport const asyncHandler = (fn: Function) => {\r\n  return (req: Request, res: Response, next: NextFunction) => {\r\n    Promise.resolve(fn(req, res, next)).catch(next);\r\n  };\r\n};\r\n\r\n// Global error handler middleware\r\nexport const errorHandler = (\r\n  error: Error,\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n): void => {\r\n  let processedError: AppError;\r\n\r\n  // Handle Zod validation errors\r\n  if (error instanceof ZodError) {\r\n    const validationErrors = error.errors.map(err => ({\r\n      field: err.path.join('.'),\r\n      message: err.message,\r\n      code: err.code\r\n    }));\r\n    \r\n    processedError = new ValidationError(\r\n      'Request validation failed',\r\n      validationErrors[0]?.field || 'unknown',\r\n      'invalid',\r\n      'valid input'\r\n    );\r\n  }\r\n  // Handle known application errors\r\n  else if (isAppError(error)) {\r\n    processedError = error;\r\n  }\r\n  // Handle unknown errors\r\n  else {\r\n    processedError = new AppError(\r\n      process.env.NODE_ENV === 'production' \r\n        ? 'Internal server error'\r\n        : error.message || 'Unknown error occurred',\r\n      500,\r\n      false\r\n    );\r\n  }\r\n\r\n  // Log the error\r\n  if (isOperationalError(processedError)) {\r\n    logger.warn('Operational error occurred', {\r\n      error: processedError.message,\r\n      statusCode: processedError.statusCode,\r\n      url: req.originalUrl,\r\n      method: req.method,\r\n      userAgent: req.get('User-Agent'),\r\n      ip: req.ip\r\n    });\r\n  } else {\r\n    logger.error('Non-operational error occurred', {\r\n      error: processedError.message,\r\n      stack: processedError.stack,\r\n      statusCode: processedError.statusCode,\r\n      url: req.originalUrl,\r\n      method: req.method,\r\n      userAgent: req.get('User-Agent'),\r\n      ip: req.ip\r\n    });\r\n  }\r\n\r\n  // Send error response\r\n  const errorResponse = formatErrorResponse(processedError);\r\n  res.status(processedError.statusCode).json(errorResponse);\r\n};\r\n\r\n// 404 Not Found handler\r\nexport const notFoundHandler = (req: Request, res: Response, next: NextFunction): void => {\r\n  const error = new AppError(`Route ${req.originalUrl} not found`, 404);\r\n  next(error);\r\n};\r\n\r\n// Database error handler\r\nexport const handleDatabaseError = (error: unknown, operation: string, table?: string): never => {\r\n  logger.error('Database error occurred', {\r\n    operation,\r\n    table,\r\n    error: error instanceof Error ? error.message : String(error)\r\n  });\r\n\r\n  if (error instanceof Error) {\r\n    throw new DatabaseError(error.message, operation, table, error);\r\n  }\r\n  \r\n  throw new DatabaseError('Unknown database error', operation, table);\r\n};\r\n\r\n// Validation error handler\r\nexport const handleValidationError = (\r\n  field: string,\r\n  value: unknown,\r\n  expectedType: string,\r\n  customMessage?: string\r\n): never => {\r\n  const message = customMessage || `Invalid value for ${field}`;\r\n  throw new ValidationError(message, field, value, expectedType);\r\n};\r\n\r\n// External service error handler\r\nexport const handleExternalServiceError = (\r\n  serviceName: string,\r\n  error: unknown,\r\n  context?: Record<string, unknown>\r\n): never => {\r\n  logger.error('External service error', {\r\n    serviceName,\r\n    error: error instanceof Error ? error.message : String(error),\r\n    ...context\r\n  });\r\n\r\n  const message = error instanceof Error ? error.message : 'External service unavailable';\r\n  throw new AppError(`${serviceName} service error: ${message}`, 502);\r\n};\r\n\r\n// Process unhandled promise rejections\r\nprocess.on('unhandledRejection', (reason: unknown, promise: Promise<any>) => {\r\n  logger.error('Unhandled Promise Rejection', {\r\n    reason: reason instanceof Error ? reason.message : String(reason),\r\n    stack: reason instanceof Error ? reason.stack : undefined\r\n  });\r\n  \r\n  // In production, gracefully shutdown\r\n  if (process.env.NODE_ENV === 'production') {\r\n    process.exit(1);\r\n  }\r\n});\r\n\r\n// Process uncaught exceptions\r\nprocess.on('uncaughtException', (error: Error) => {\r\n  logger.error('Uncaught Exception', {\r\n    error: error.message,\r\n    stack: error.stack\r\n  });\r\n  \r\n  // Always exit on uncaught exception\r\n  process.exit(1);\r\n});\r\n\r\n// Graceful shutdown handlers\r\nconst gracefulShutdown = (signal: string) => {\r\n  logger.info(`Received ${signal}, shutting down gracefully`);\r\n  \r\n  process.exit(0);\r\n};\r\n\r\nprocess.on('SIGTERM', () => gracefulShutdown('SIGTERM'));\r\nprocess.on('SIGINT', () => gracefulShutdown('SIGINT'));"]}