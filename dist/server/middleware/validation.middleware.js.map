{"version":3,"file":"validation.middleware.js","sourceRoot":"","sources":["../../../server/middleware/validation.middleware.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response, NextFunction } from 'express';\r\nimport { z } from 'zod';\r\nimport { logger } from '../services/logger.service';\r\n// Define ValidationError locally since @shared/types doesn't exist\r\nclass ValidationError extends Error {\r\n  public readonly field?: string;\r\n  public readonly errors?: any;\r\n\r\n  constructor(message: string, errors?: any) {\r\n    super(message);\r\n    this.errors = errors;\r\n    Error.captureStackTrace(this, this.constructor);\r\n  }\r\n}\r\n\r\nexport const validateBody = (schema: z.ZodSchema) => {\r\n  return (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      req.body = schema.parse(req.body);\r\n      next();\r\n    } catch (error) {\r\n      logger.warn('Request body validation failed', { \r\n        error: error instanceof z.ZodError ? error.errors : error,\r\n        path: req.path,\r\n        method: req.method \r\n      });\r\n      \r\n      if (error instanceof z.ZodError) {\r\n        const message = error.errors.map(e => `${e.path.join('.')}: ${e.message}`).join(', ');\r\n        next(new ValidationError(`Validation failed: ${message}`, error.errors));\r\n      } else {\r\n        next(new ValidationError('Invalid request body'));\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexport const validateQuery = (schema: z.ZodSchema) => {\r\n  return (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      req.query = schema.parse(req.query);\r\n      next();\r\n    } catch (error) {\r\n      logger.warn('Request query validation failed', { \r\n        error: error instanceof z.ZodError ? error.errors : error,\r\n        path: req.path,\r\n        method: req.method \r\n      });\r\n      \r\n      if (error instanceof z.ZodError) {\r\n        const message = error.errors.map(e => `${e.path.join('.')}: ${e.message}`).join(', ');\r\n        next(new ValidationError(`Query validation failed: ${message}`, error.errors));\r\n      } else {\r\n        next(new ValidationError('Invalid query parameters'));\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexport const validateParams = (schema: z.ZodSchema) => {\r\n  return (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      req.params = schema.parse(req.params);\r\n      next();\r\n    } catch (error) {\r\n      logger.warn('Request params validation failed', { \r\n        error: error instanceof z.ZodError ? error.errors : error,\r\n        path: req.path,\r\n        method: req.method \r\n      });\r\n      \r\n      if (error instanceof z.ZodError) {\r\n        const message = error.errors.map(e => `${e.path.join('.')}: ${e.message}`).join(', ');\r\n        next(new ValidationError(`Parameters validation failed: ${message}`, error.errors));\r\n      } else {\r\n        next(new ValidationError('Invalid parameters'));\r\n      }\r\n    }\r\n  };\r\n};"]}