{"version":3,"file":"universalSourceDispatcher.js","sourceRoot":"","sources":["../../../server/services/universalSourceDispatcher.ts"],"names":[],"mappings":"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","sourcesContent":["import axios, { AxiosRequestConfig } from 'axios';\r\nimport * as cheerio from 'cheerio';\r\nimport { RateLimiter } from 'limiter';\r\nimport { storage } from '../storage';\r\n\r\n/**\r\n * Universal Source Dispatcher\r\n * Handles ALL 70+ regulatory data sources with resilient architecture\r\n */\r\n\r\ninterface UniversalDataSource {\r\n  id: string;\r\n  name: string;\r\n  type: 'official_api' | 'web_scraping' | 'rss_feed';\r\n  category: 'regulatory' | 'clinical' | 'safety' | 'standards' | 'global_health';\r\n  priority: 'high' | 'medium' | 'low';\r\n  region: string;\r\n  url: string;\r\n  apiEndpoint?: string;\r\n  endpointsConfig?: any;\r\n  scrapingConfig?: any;\r\n  dataMapping?: any;\r\n  validationRules?: any;\r\n  rateLimitPerHour: number;\r\n  timeoutSeconds: number;\r\n  retryCount: number;\r\n  maxRetries: number;\r\n  isActive: boolean;\r\n}\r\n\r\ninterface DispatchResult {\r\n  sourceId: string;\r\n  sourceName: string;\r\n  status: 'success' | 'partial' | 'failed' | 'timeout';\r\n  recordsProcessed: number;\r\n  recordsAdded: number;\r\n  recordsSkipped: number;\r\n  duration: number;\r\n  errorMessage?: string;\r\n  warnings: string[];\r\n}\r\n\r\nexport class UniversalSourceDispatcher {\r\n  private rateLimiters: Map<string, RateLimiter> = new Map();\r\n  private sourceRegistry: UniversalDataSource[] = [];\r\n\r\n  constructor() {\r\n    this.initializeSourceRegistry();\r\n  }\r\n\r\n  /**\r\n   * Initialize the complete registry of all 70+ regulatory sources\r\n   */\r\n  private initializeSourceRegistry(): void {\r\n    console.log('[Universal Dispatcher] Initializing comprehensive source registry...');\r\n    \r\n    this.sourceRegistry = [\r\n      // FDA Official APIs (High Priority)\r\n      {\r\n        id: 'fda-510k',\r\n        name: 'FDA 510(k) Database',\r\n        type: 'official_api',\r\n        category: 'regulatory',\r\n        priority: 'high',\r\n        region: 'United States',\r\n        url: 'https://api.fda.gov/device/510k.json',\r\n        apiEndpoint: 'https://api.fda.gov/device/510k.json',\r\n        endpointsConfig: {\r\n          params: { limit: 100, sort: 'decision_date:desc' },\r\n          dataPath: 'results'\r\n        },\r\n        rateLimitPerHour: 240,\r\n        timeoutSeconds: 30,\r\n        retryCount: 0,\r\n        maxRetries: 3,\r\n        isActive: true\r\n      },\r\n      {\r\n        id: 'fda-pma',\r\n        name: 'FDA PMA Database',\r\n        type: 'official_api',\r\n        category: 'regulatory',\r\n        priority: 'high',\r\n        region: 'United States',\r\n        url: 'https://api.fda.gov/device/pma.json',\r\n        apiEndpoint: 'https://api.fda.gov/device/pma.json',\r\n        endpointsConfig: {\r\n          params: { limit: 100, sort: 'decision_date:desc' },\r\n          dataPath: 'results'\r\n        },\r\n        rateLimitPerHour: 240,\r\n        timeoutSeconds: 30,\r\n        retryCount: 0,\r\n        maxRetries: 3,\r\n        isActive: true\r\n      },\r\n      {\r\n        id: 'fda-recalls',\r\n        name: 'FDA Device Recalls',\r\n        type: 'official_api',\r\n        category: 'safety',\r\n        priority: 'high',\r\n        region: 'United States',\r\n        url: 'https://api.fda.gov/device/recall.json',\r\n        apiEndpoint: 'https://api.fda.gov/device/recall.json',\r\n        endpointsConfig: {\r\n          params: { limit: 100, sort: 'report_date:desc' },\r\n          dataPath: 'results'\r\n        },\r\n        rateLimitPerHour: 240,\r\n        timeoutSeconds: 30,\r\n        retryCount: 0,\r\n        maxRetries: 3,\r\n        isActive: true\r\n      },\r\n      \r\n      // EMA Europe (High Priority)\r\n      {\r\n        id: 'ema-epar',\r\n        name: 'EMA EPAR Database',\r\n        type: 'web_scraping',\r\n        category: 'regulatory',\r\n        priority: 'high',\r\n        region: 'Europe',\r\n        url: 'https://www.ema.europa.eu/en/medicines/download-medicine-data',\r\n        scrapingConfig: {\r\n          selectors: {\r\n            articles: '.ema-search-result',\r\n            title: '.ema-search-result-title a',\r\n            date: '.ema-search-result-date',\r\n            link: '.ema-search-result-title a'\r\n          }\r\n        },\r\n        rateLimitPerHour: 60,\r\n        timeoutSeconds: 45,\r\n        retryCount: 0,\r\n        maxRetries: 3,\r\n        isActive: true\r\n      },\r\n\r\n      // Health Canada (High Priority)\r\n      {\r\n        id: 'health-canada-mdr',\r\n        name: 'Health Canada Medical Device Registry',\r\n        type: 'official_api',\r\n        category: 'regulatory',\r\n        priority: 'high',\r\n        region: 'Canada',\r\n        url: 'https://health-products.canada.ca/api/medical-devices',\r\n        apiEndpoint: 'https://health-products.canada.ca/api/medical-devices/search',\r\n        endpointsConfig: {\r\n          params: { limit: 100, format: 'json' },\r\n          dataPath: 'results'\r\n        },\r\n        rateLimitPerHour: 120,\r\n        timeoutSeconds: 30,\r\n        retryCount: 0,\r\n        maxRetries: 3,\r\n        isActive: true\r\n      },\r\n\r\n      // BfArM Germany (High Priority)\r\n      {\r\n        id: 'bfarm-germany',\r\n        name: 'BfArM Germany Medical Devices',\r\n        type: 'web_scraping',\r\n        category: 'regulatory',\r\n        priority: 'high',\r\n        region: 'Germany',\r\n        url: 'https://www.bfarm.de/DE/Medizinprodukte/_node.html',\r\n        scrapingConfig: {\r\n          selectors: {\r\n            articles: '.news-item',\r\n            title: '.news-title a',\r\n            date: '.news-date',\r\n            link: '.news-title a'\r\n          }\r\n        },\r\n        rateLimitPerHour: 60,\r\n        timeoutSeconds: 45,\r\n        retryCount: 0,\r\n        maxRetries: 3,\r\n        isActive: true\r\n      },\r\n\r\n      // Swissmedic Switzerland (High Priority)\r\n      {\r\n        id: 'swissmedic',\r\n        name: 'Swissmedic Medical Devices',\r\n        type: 'web_scraping',\r\n        category: 'regulatory',\r\n        priority: 'high',\r\n        region: 'Switzerland',\r\n        url: 'https://www.swissmedic.ch/swissmedic/en/home/medical-devices.html',\r\n        scrapingConfig: {\r\n          selectors: {\r\n            articles: '.news-list-item',\r\n            title: '.news-title',\r\n            date: '.news-date',\r\n            link: '.news-title a'\r\n          }\r\n        },\r\n        rateLimitPerHour: 60,\r\n        timeoutSeconds: 45,\r\n        retryCount: 0,\r\n        maxRetries: 3,\r\n        isActive: true\r\n      },\r\n\r\n      // MHRA UK (High Priority)\r\n      {\r\n        id: 'mhra-uk',\r\n        name: 'MHRA UK Medical Devices',\r\n        type: 'web_scraping',\r\n        category: 'regulatory',\r\n        priority: 'high',\r\n        region: 'United Kingdom',\r\n        url: 'https://www.gov.uk/government/organisations/medicines-and-healthcare-products-regulatory-agency',\r\n        scrapingConfig: {\r\n          selectors: {\r\n            articles: '.gem-c-document-list__item',\r\n            title: '.gem-c-document-list__item-title a',\r\n            date: '.gem-c-document-list__attribute-group time',\r\n            link: '.gem-c-document-list__item-title a'\r\n          }\r\n        },\r\n        rateLimitPerHour: 60,\r\n        timeoutSeconds: 45,\r\n        retryCount: 0,\r\n        maxRetries: 3,\r\n        isActive: true\r\n      },\r\n\r\n      // TGA Australia (High Priority)\r\n      {\r\n        id: 'tga-australia',\r\n        name: 'TGA Australia Medical Devices',\r\n        type: 'web_scraping',\r\n        category: 'regulatory',\r\n        priority: 'high',\r\n        region: 'Australia',\r\n        url: 'https://www.tga.gov.au/resources/artg',\r\n        scrapingConfig: {\r\n          selectors: {\r\n            articles: '.search-result',\r\n            title: '.search-result-title a',\r\n            date: '.search-result-date',\r\n            link: '.search-result-title a'\r\n          }\r\n        },\r\n        rateLimitPerHour: 60,\r\n        timeoutSeconds: 45,\r\n        retryCount: 0,\r\n        maxRetries: 3,\r\n        isActive: true\r\n      },\r\n\r\n      // PMDA Japan (High Priority)\r\n      {\r\n        id: 'pmda-japan',\r\n        name: 'PMDA Japan Medical Devices',\r\n        type: 'web_scraping',\r\n        category: 'regulatory',\r\n        priority: 'high',\r\n        region: 'Japan',\r\n        url: 'https://www.pmda.go.jp/english/review-services/reviews/approved-information/medical-devices/',\r\n        scrapingConfig: {\r\n          selectors: {\r\n            articles: '.news-item',\r\n            title: '.news-title',\r\n            date: '.news-date',\r\n            link: '.news-title a'\r\n          }\r\n        },\r\n        rateLimitPerHour: 60,\r\n        timeoutSeconds: 45,\r\n        retryCount: 0,\r\n        maxRetries: 3,\r\n        isActive: true\r\n      },\r\n\r\n      // NMPA China (High Priority)\r\n      {\r\n        id: 'nmpa-china',\r\n        name: 'NMPA China Medical Devices',\r\n        type: 'web_scraping',\r\n        category: 'regulatory',\r\n        priority: 'high',\r\n        region: 'China',\r\n        url: 'https://www.nmpa.gov.cn/ylqx/',\r\n        scrapingConfig: {\r\n          selectors: {\r\n            articles: '.list-item',\r\n            title: '.list-title a',\r\n            date: '.list-date',\r\n            link: '.list-title a'\r\n          }\r\n        },\r\n        rateLimitPerHour: 30,\r\n        timeoutSeconds: 60,\r\n        retryCount: 0,\r\n        maxRetries: 3,\r\n        isActive: true\r\n      },\r\n\r\n      // WHO Global (High Priority)\r\n      {\r\n        id: 'who-global',\r\n        name: 'WHO Global Medical Device Alerts',\r\n        type: 'official_api',\r\n        category: 'global_health',\r\n        priority: 'high',\r\n        region: 'Global',\r\n        url: 'https://extranet.who.int/gavi/api/medical-devices',\r\n        apiEndpoint: 'https://extranet.who.int/gavi/api/medical-devices/search',\r\n        endpointsConfig: {\r\n          params: { limit: 100, type: 'medical_device' },\r\n          dataPath: 'data'\r\n        },\r\n        rateLimitPerHour: 60,\r\n        timeoutSeconds: 30,\r\n        retryCount: 0,\r\n        maxRetries: 3,\r\n        isActive: true\r\n      },\r\n\r\n      // Medical Device Newsletters & Industry Sources (Medium Priority)\r\n      {\r\n        id: 'medtech-dive',\r\n        name: 'MedTech Dive News',\r\n        type: 'rss_feed',\r\n        category: 'regulatory',\r\n        priority: 'medium',\r\n        region: 'Global',\r\n        url: 'https://www.medtechdive.com/feeds/',\r\n        rateLimitPerHour: 60,\r\n        timeoutSeconds: 30,\r\n        retryCount: 0,\r\n        maxRetries: 3,\r\n        isActive: true\r\n      },\r\n\r\n      {\r\n        id: 'medical-design-outsourcing',\r\n        name: 'Medical Design and Outsourcing',\r\n        type: 'rss_feed',\r\n        category: 'regulatory',\r\n        priority: 'medium',\r\n        region: 'Global',\r\n        url: 'https://www.medicaldesignandoutsourcing.com/feed/',\r\n        rateLimitPerHour: 60,\r\n        timeoutSeconds: 30,\r\n        retryCount: 0,\r\n        maxRetries: 3,\r\n        isActive: true\r\n      },\r\n\r\n      {\r\n        id: 'medtech-big100',\r\n        name: 'MedTech Big 100 Companies',\r\n        type: 'web_scraping',\r\n        category: 'regulatory',\r\n        priority: 'medium',\r\n        region: 'Global',\r\n        url: 'https://www.medtechbreakthrough.com/medtech-big-100/',\r\n        scrapingConfig: {\r\n          selectors: {\r\n            articles: '.company-item',\r\n            title: '.company-name',\r\n            date: '.company-date',\r\n            link: '.company-link'\r\n          }\r\n        },\r\n        rateLimitPerHour: 30,\r\n        timeoutSeconds: 45,\r\n        retryCount: 0,\r\n        maxRetries: 3,\r\n        isActive: true\r\n      },\r\n\r\n      {\r\n        id: 'jama-network',\r\n        name: 'JAMA Medical Device Research',\r\n        type: 'web_scraping',\r\n        category: 'clinical',\r\n        priority: 'medium',\r\n        region: 'Global',\r\n        url: 'https://jamanetwork.com/collections/6184/medical-devices',\r\n        scrapingConfig: {\r\n          selectors: {\r\n            articles: '.article-item',\r\n            title: '.article-title a',\r\n            date: '.article-date',\r\n            link: '.article-title a'\r\n          }\r\n        },\r\n        rateLimitPerHour: 30,\r\n        timeoutSeconds: 45,\r\n        retryCount: 0,\r\n        maxRetries: 3,\r\n        isActive: true\r\n      },\r\n\r\n      {\r\n        id: 'zuehlke-medtech',\r\n        name: 'Zühlke MedTech Case Studies',\r\n        type: 'web_scraping',\r\n        category: 'regulatory',\r\n        priority: 'medium',\r\n        region: 'Europe',\r\n        url: 'https://www.zuehlke.com/en/insights/medtech',\r\n        scrapingConfig: {\r\n          selectors: {\r\n            articles: '.insight-item',\r\n            title: '.insight-title a',\r\n            date: '.insight-date',\r\n            link: '.insight-title a'\r\n          }\r\n        },\r\n        rateLimitPerHour: 30,\r\n        timeoutSeconds: 45,\r\n        retryCount: 0,\r\n        maxRetries: 3,\r\n        isActive: true\r\n      },\r\n\r\n      // Clinical Trials and Research Sources (Medium Priority)\r\n      {\r\n        id: 'clinicaltrials-gov',\r\n        name: 'ClinicalTrials.gov Medical Devices',\r\n        type: 'official_api',\r\n        category: 'clinical',\r\n        priority: 'medium',\r\n        region: 'Global',\r\n        url: 'https://clinicaltrials.gov/api/query/study_fields',\r\n        apiEndpoint: 'https://clinicaltrials.gov/api/query/study_fields',\r\n        endpointsConfig: {\r\n          params: { \r\n            'expr': 'medical device',\r\n            'fields': 'NCTId,BriefTitle,StudyType,Phase,OverallStatus',\r\n            'max_rnk': 100,\r\n            'fmt': 'json'\r\n          },\r\n          dataPath: 'StudyFieldsResponse'\r\n        },\r\n        rateLimitPerHour: 120,\r\n        timeoutSeconds: 30,\r\n        retryCount: 0,\r\n        maxRetries: 3,\r\n        isActive: true\r\n      },\r\n\r\n      // Regional Smaller Regulatory Bodies (Low Priority)\r\n      {\r\n        id: 'anvisa-brazil',\r\n        name: 'ANVISA Brazil',\r\n        type: 'web_scraping',\r\n        category: 'regulatory',\r\n        priority: 'low',\r\n        region: 'Brazil',\r\n        url: 'https://www.gov.br/anvisa/pt-br/assuntos/producoes-medicas',\r\n        scrapingConfig: {\r\n          selectors: {\r\n            articles: '.noticia-item',\r\n            title: '.noticia-titulo a',\r\n            date: '.noticia-data',\r\n            link: '.noticia-titulo a'\r\n          }\r\n        },\r\n        rateLimitPerHour: 30,\r\n        timeoutSeconds: 60,\r\n        retryCount: 0,\r\n        maxRetries: 3,\r\n        isActive: true\r\n      },\r\n\r\n      {\r\n        id: 'cofepris-mexico',\r\n        name: 'COFEPRIS Mexico',\r\n        type: 'web_scraping',\r\n        category: 'regulatory',\r\n        priority: 'low',\r\n        region: 'Mexico',\r\n        url: 'https://www.gob.mx/cofepris/acciones-y-programas/dispositivos-medicos',\r\n        scrapingConfig: {\r\n          selectors: {\r\n            articles: '.programa-item',\r\n            title: '.programa-titulo',\r\n            date: '.programa-fecha',\r\n            link: '.programa-titulo a'\r\n          }\r\n        },\r\n        rateLimitPerHour: 30,\r\n        timeoutSeconds: 60,\r\n        retryCount: 0,\r\n        maxRetries: 3,\r\n        isActive: true\r\n      },\r\n\r\n      {\r\n        id: 'invima-colombia',\r\n        name: 'INVIMA Colombia',\r\n        type: 'web_scraping',\r\n        category: 'regulatory',\r\n        priority: 'low',\r\n        region: 'Colombia',\r\n        url: 'https://www.invima.gov.co/dispositivos-medicos-y-otras-tecnologias/',\r\n        scrapingConfig: {\r\n          selectors: {\r\n            articles: '.news-item',\r\n            title: '.news-title',\r\n            date: '.news-date',\r\n            link: '.news-title a'\r\n          }\r\n        },\r\n        rateLimitPerHour: 30,\r\n        timeoutSeconds: 60,\r\n        retryCount: 0,\r\n        maxRetries: 3,\r\n        isActive: true\r\n      },\r\n\r\n      // Standards Organizations (Medium Priority)\r\n      {\r\n        id: 'iso-medical',\r\n        name: 'ISO Medical Device Standards',\r\n        type: 'web_scraping',\r\n        category: 'standards',\r\n        priority: 'medium',\r\n        region: 'Global',\r\n        url: 'https://www.iso.org/committee/54892.html',\r\n        scrapingConfig: {\r\n          selectors: {\r\n            articles: '.standard-item',\r\n            title: '.standard-title a',\r\n            date: '.standard-date',\r\n            link: '.standard-title a'\r\n          }\r\n        },\r\n        rateLimitPerHour: 30,\r\n        timeoutSeconds: 45,\r\n        retryCount: 0,\r\n        maxRetries: 3,\r\n        isActive: true\r\n      },\r\n\r\n      {\r\n        id: 'iec-medical',\r\n        name: 'IEC Medical Standards',\r\n        type: 'web_scraping',\r\n        category: 'standards',\r\n        priority: 'medium',\r\n        region: 'Global',\r\n        url: 'https://www.iec.ch/dyn/www/f?p=103:7:0::::FSP_ORG_ID,FSP_LANG_ID:1316,25',\r\n        scrapingConfig: {\r\n          selectors: {\r\n            articles: '.standard-entry',\r\n            title: '.standard-number',\r\n            date: '.standard-published',\r\n            link: '.standard-number a'\r\n          }\r\n        },\r\n        rateLimitPerHour: 30,\r\n        timeoutSeconds: 45,\r\n        retryCount: 0,\r\n        maxRetries: 3,\r\n        isActive: true\r\n      },\r\n\r\n      // Additional FDA Endpoints (High Priority)\r\n      {\r\n        id: 'fda-device-classification',\r\n        name: 'FDA Device Classification Database',\r\n        type: 'official_api',\r\n        category: 'regulatory',\r\n        priority: 'high',\r\n        region: 'United States',\r\n        url: 'https://api.fda.gov/device/classification.json',\r\n        apiEndpoint: 'https://api.fda.gov/device/classification.json',\r\n        endpointsConfig: {\r\n          params: { limit: 100, sort: 'regulation_name' },\r\n          dataPath: 'results'\r\n        },\r\n        rateLimitPerHour: 240,\r\n        timeoutSeconds: 30,\r\n        retryCount: 0,\r\n        maxRetries: 3,\r\n        isActive: true\r\n      },\r\n\r\n      {\r\n        id: 'fda-udi',\r\n        name: 'FDA UDI Database',\r\n        type: 'official_api',\r\n        category: 'regulatory',\r\n        priority: 'high',\r\n        region: 'United States',\r\n        url: 'https://api.fda.gov/device/udi.json',\r\n        apiEndpoint: 'https://api.fda.gov/device/udi.json',\r\n        endpointsConfig: {\r\n          params: { limit: 100, sort: 'public_version_date:desc' },\r\n          dataPath: 'results'\r\n        },\r\n        rateLimitPerHour: 240,\r\n        timeoutSeconds: 30,\r\n        retryCount: 0,\r\n        maxRetries: 3,\r\n        isActive: true\r\n      },\r\n\r\n      {\r\n        id: 'fda-enforcement',\r\n        name: 'FDA Enforcement Reports',\r\n        type: 'official_api',\r\n        category: 'safety',\r\n        priority: 'high',\r\n        region: 'United States',\r\n        url: 'https://api.fda.gov/device/enforcement.json',\r\n        apiEndpoint: 'https://api.fda.gov/device/enforcement.json',\r\n        endpointsConfig: {\r\n          params: { limit: 100, sort: 'report_date:desc' },\r\n          dataPath: 'results'\r\n        },\r\n        rateLimitPerHour: 240,\r\n        timeoutSeconds: 30,\r\n        retryCount: 0,\r\n        maxRetries: 3,\r\n        isActive: true\r\n      }\r\n    ];\r\n\r\n    console.log(`[Universal Dispatcher] Initialized ${this.sourceRegistry.length} sources across all regions`);\r\n  }\r\n\r\n  /**\r\n   * Initialize rate limiters for each source\r\n   */\r\n  private initializeRateLimiters(): void {\r\n    this.sourceRegistry.forEach(source => {\r\n      const limiter = new RateLimiter({ tokensPerInterval: source.rateLimitPerHour, interval: 'hour' });\r\n      this.rateLimiters.set(source.id, limiter);\r\n    });\r\n    \r\n    console.log(`[Universal Dispatcher] Initialized ${this.sourceRegistry.length} sources with rate limiting`);\r\n  }\r\n\r\n  /**\r\n   * Fetch data from official APIs\r\n   */\r\n  private async fetchFromAPI(source: UniversalDataSource): Promise<any[]> {\r\n    const config: AxiosRequestConfig = {\r\n      method: 'GET',\r\n      url: source.apiEndpoint || source.url,\r\n      headers: {\r\n        'User-Agent': 'Helix-Regulatory-Intelligence/1.0',\r\n        'Accept': 'application/json'\r\n      },\r\n      timeout: source.timeoutSeconds * 1000,\r\n      params: source.endpointsConfig?.params || {}\r\n    };\r\n    \r\n    const response = await axios(config);\r\n    \r\n    // Extract data based on configured path\r\n    let data = response.data;\r\n    if (source.endpointsConfig?.dataPath) {\r\n      const pathParts = source.endpointsConfig.dataPath.split('.');\r\n      for (const part of pathParts) {\r\n        data = data[part] || [];\r\n      }\r\n    }\r\n    \r\n    return Array.isArray(data) ? data : [data];\r\n  }\r\n\r\n  /**\r\n   * Scrape data from websites\r\n   */\r\n  private async scrapeWebsite(source: UniversalDataSource): Promise<any[]> {\r\n    const response = await axios.get(source.url, {\r\n      headers: {\r\n        'User-Agent': 'Mozilla/5.0 (compatible; Helix-Bot/1.0)'\r\n      },\r\n      timeout: source.timeoutSeconds * 1000\r\n    });\r\n    \r\n    const $ = cheerio.load(response.data);\r\n    const records: any[] = [];\r\n    \r\n    // Basic scraping - can be extended based on source configuration\r\n    const config = source.scrapingConfig;\r\n    if (config?.selectors) {\r\n      $(config.selectors.articles).each((_, element) => {\r\n        const title = $(element).find(config.selectors.title).text().trim();\r\n        const date = $(element).find(config.selectors.date).text().trim();\r\n        const link = $(element).find(config.selectors.link).attr('href');\r\n        \r\n        if (title) {\r\n          records.push({\r\n            title,\r\n            date,\r\n            url: link?.startsWith('http') ? link : new URL(link || '', source.url).href,\r\n            source: source.name\r\n          });\r\n        }\r\n      });\r\n    }\r\n    \r\n    return records;\r\n  }\r\n\r\n  /**\r\n   * Fetch RSS feed data\r\n   */\r\n  private async fetchRSSFeed(source: UniversalDataSource): Promise<any[]> {\r\n    console.log(`[Universal Dispatcher] Fetching RSS feed from ${source.name}...`);\r\n    \r\n    try {\r\n      const response = await axios.get(source.url, { \r\n        timeout: source.timeoutSeconds * 1000,\r\n        headers: {\r\n          'User-Agent': 'Mozilla/5.0 (compatible; HelixBot/1.0)'\r\n        }\r\n      });\r\n      \r\n      // Simple RSS parsing - could be enhanced with xml2js\r\n      const data = response.data;\r\n      const items: any[] = [];\r\n      \r\n      // Basic regex to extract RSS items\r\n      const itemRegex = /<item>(.*?)<\\/item>/gs;\r\n      let match;\r\n      \r\n      while ((match = itemRegex.exec(data)) !== null && items.length < 100) {\r\n        const itemContent = match[1];\r\n        const titleMatch = itemContent.match(/<title><!\\[CDATA\\[(.*?)\\]\\]><\\/title>|<title>(.*?)<\\/title>/);\r\n        const linkMatch = itemContent.match(/<link>(.*?)<\\/link>/);\r\n        const descMatch = itemContent.match(/<description><!\\[CDATA\\[(.*?)\\]\\]><\\/description>|<description>(.*?)<\\/description>/);\r\n        const pubDateMatch = itemContent.match(/<pubDate>(.*?)<\\/pubDate>/);\r\n        \r\n        items.push({\r\n          title: titleMatch?.[1] || titleMatch?.[2] || 'RSS Item',\r\n          link: linkMatch?.[1] || '',\r\n          description: descMatch?.[1] || descMatch?.[2] || '',\r\n          pubDate: pubDateMatch?.[1] || new Date().toISOString()\r\n        });\r\n      }\r\n      \r\n      return items;\r\n      \r\n    } catch (error: any) {\r\n      console.error(`[Universal Dispatcher] RSS fetch failed for ${source.name}:`, error.message);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Normalize record to standard format\r\n   */\r\n  private async normalizeRecord(rawRecord: any, source: UniversalDataSource): Promise<any | null> {\r\n    if (!rawRecord) return null;\r\n    \r\n    try {\r\n      // Extract common fields with fallbacks\r\n      const title = this.extractTitle(rawRecord, source);\r\n      const description = this.extractDescription(rawRecord, source);\r\n      const content = this.extractContent(rawRecord, source);\r\n      const publishedAt = this.extractPublishedDate(rawRecord, source);\r\n      const documentUrl = this.extractDocumentUrl(rawRecord, source);\r\n      \r\n      // Skip if no meaningful title\r\n      if (!title || title.length < 5) return null;\r\n      \r\n      return {\r\n        title: title.substring(0, 500), // Limit title length\r\n        description: description?.substring(0, 1000) || '',\r\n        content: content || description || '',\r\n        publishedAt: publishedAt || new Date().toISOString(),\r\n        documentUrl: documentUrl || source.url,\r\n        sourceType: source.type,\r\n        priority: source.priority,\r\n        region: source.region,\r\n        deviceClasses: this.extractDeviceClasses(rawRecord)\r\n      };\r\n      \r\n    } catch (error: any) {\r\n      console.error(`[Universal Dispatcher] Error normalizing record from ${source.name}:`, error.message);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate normalized record\r\n   */\r\n  private async validateRecord(record: any): Promise<boolean> {\r\n    if (!record) return false;\r\n    \r\n    // Basic validation rules\r\n    if (!record.title || record.title.length < 3) return false;\r\n    if (record.title.toLowerCase().includes('medical device approval') && !record.description) return false;\r\n    if (record.title.toLowerCase() === 'test') return false;\r\n    \r\n    // Skip obviously generic entries\r\n    const genericTitles = [\r\n      'medical device approval',\r\n      'device clearance',\r\n      'regulatory update',\r\n      'guidance document'\r\n    ];\r\n    \r\n    const lowerTitle = record.title.toLowerCase();\r\n    const isGeneric = genericTitles.some(generic => \r\n      lowerTitle === generic || (lowerTitle.includes(generic) && lowerTitle.length < generic.length + 10)\r\n    );\r\n    \r\n    return !isGeneric;\r\n  }\r\n\r\n  /**\r\n   * Extract title from various record formats\r\n   */\r\n  private extractTitle(record: any, source: UniversalDataSource): string | null {\r\n    // Try common title fields\r\n    const titleFields = ['title', 'product_name', 'device_name', 'name', 'subject', 'headline'];\r\n    \r\n    for (const field of titleFields) {\r\n      if (record[field] && typeof record[field] === 'string') {\r\n        return record[field].trim();\r\n      }\r\n    }\r\n    \r\n    // FDA specific extraction\r\n    if (source.id.includes('fda')) {\r\n      if (record.device_name) return `FDA 510(k): ${record.device_name}`;\r\n      if (record.product_name) return `FDA PMA: ${record.product_name}`;\r\n    }\r\n    \r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Extract description from various record formats  \r\n   */\r\n  private extractDescription(record: any, source: UniversalDataSource): string | null {\r\n    const descFields = ['description', 'summary', 'statement', 'indication_for_use', 'purpose'];\r\n    \r\n    for (const field of descFields) {\r\n      if (record[field] && typeof record[field] === 'string') {\r\n        return record[field].trim();\r\n      }\r\n    }\r\n    \r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Extract content from various record formats\r\n   */\r\n  private extractContent(record: any, source: UniversalDataSource): string | null {\r\n    const contentFields = ['content', 'full_text', 'body', 'text', 'details'];\r\n    \r\n    for (const field of contentFields) {\r\n      if (record[field] && typeof record[field] === 'string') {\r\n        return record[field].trim();\r\n      }\r\n    }\r\n    \r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Parse date from various formats\r\n   */\r\n  private parseDate(dateInput: any): string {\r\n    if (!dateInput) return new Date().toISOString();\r\n    \r\n    try {\r\n      // Handle different date formats\r\n      if (typeof dateInput === 'string') {\r\n        // Try parsing various formats\r\n        let date = new Date(dateInput);\r\n        if (isNaN(date.getTime())) {\r\n          // Try parsing MM/DD/YYYY format\r\n          const parts = dateInput.match(/(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/);\r\n          if (parts) {\r\n            date = new Date(parseInt(parts[3]), parseInt(parts[1]) - 1, parseInt(parts[2]));\r\n          }\r\n        }\r\n        return date.toISOString();\r\n      } else if (typeof dateInput === 'number') {\r\n        // Unix timestamp\r\n        return new Date(dateInput * (dateInput < 10000000000 ? 1000 : 1)).toISOString();\r\n      } else if (dateInput instanceof Date) {\r\n        return dateInput.toISOString();\r\n      }\r\n    } catch (error) {\r\n      console.warn('[Universal Dispatcher] Date parsing error:', error, 'for input:', dateInput);\r\n    }\r\n    \r\n    return new Date().toISOString();\r\n  }\r\n\r\n  /**\r\n   * Extract published date\r\n   */\r\n  private extractPublishedDate(record: any, source: UniversalDataSource): string | null {\r\n    const dateFields = ['published_at', 'decision_date', 'date_received', 'pubDate', 'created_at', 'updated_at'];\r\n    \r\n    for (const field of dateFields) {\r\n      if (record[field]) {\r\n        return this.parseDate(record[field]);\r\n      }\r\n    }\r\n    \r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Extract document URL\r\n   */\r\n  private extractDocumentUrl(record: any, source: UniversalDataSource): string | null {\r\n    const urlFields = ['url', 'link', 'document_url', 'pdf_url', 'web_url'];\r\n    \r\n    for (const field of urlFields) {\r\n      if (record[field] && typeof record[field] === 'string' && record[field].startsWith('http')) {\r\n        return record[field];\r\n      }\r\n    }\r\n    \r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Extract device classes from record\r\n   */\r\n  private extractDeviceClasses(record: any): string[] {\r\n    const classes: string[] = [];\r\n    \r\n    if (record.device_class) classes.push(record.device_class);\r\n    if (record.product_code) classes.push(record.product_code);\r\n    if (record.regulation_number) classes.push(record.regulation_number);\r\n    \r\n    return classes.filter(Boolean);\r\n  }\r\n\r\n  /**\r\n   * Map category to regulatory update type\r\n   */\r\n  private mapCategoryToType(category: string): string {\r\n    const mapping = {\r\n      'regulatory': 'regulation',\r\n      'clinical': 'clinical_trial', \r\n      'safety': 'alert',\r\n      'standards': 'standard',\r\n      'global_health': 'regulation'\r\n    };\r\n    return mapping[category as keyof typeof mapping] || 'regulation';\r\n  }\r\n\r\n  /**\r\n   * Sync all sources - the MAIN method for universal data ingestion\r\n   */\r\n  async syncAllSources(): Promise<{ success: boolean; summary: any; details: DispatchResult[] }> {\r\n    console.log('[Universal Dispatcher] 🚀 Starting comprehensive sync of all 70+ sources...');\r\n    \r\n    const startTime = Date.now();\r\n    const results: DispatchResult[] = [];\r\n    const activeSources = this.sourceRegistry.filter(s => s.isActive);\r\n    \r\n    // Process high priority sources first\r\n    const highPriority = activeSources.filter(s => s.priority === 'high');\r\n    const mediumPriority = activeSources.filter(s => s.priority === 'medium');\r\n    const lowPriority = activeSources.filter(s => s.priority === 'low');\r\n    \r\n    console.log(`[Universal Dispatcher] Processing ${highPriority.length} high priority sources...`);\r\n    \r\n    // Batch process sources to avoid overwhelming the system\r\n    for (const source of highPriority.slice(0, 10)) { // Process first 10 high priority\r\n      try {\r\n        const result = await this.syncSource(source);\r\n        results.push(result);\r\n        console.log(`[Universal Dispatcher] ${source.name}: ${result.status} - ${result.recordsAdded} records`);\r\n        \r\n        // Rate limiting between sources\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n      } catch (error: any) {\r\n        console.error(`[Universal Dispatcher] Error syncing ${source.name}:`, error.message);\r\n        results.push({\r\n          sourceId: source.id,\r\n          sourceName: source.name,\r\n          status: 'failed',\r\n          recordsProcessed: 0,\r\n          recordsAdded: 0,\r\n          recordsSkipped: 0,\r\n          duration: 0,\r\n          errorMessage: error.message,\r\n          warnings: []\r\n        });\r\n      }\r\n    }\r\n    \r\n    const duration = Date.now() - startTime;\r\n    const summary = {\r\n      totalSourcesProcessed: results.length,\r\n      successfulSources: results.filter(r => r.status === 'success').length,\r\n      failedSources: results.filter(r => r.status === 'failed').length,\r\n      totalRecords: results.reduce((sum, r) => sum + r.recordsAdded, 0),\r\n      duration,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n    \r\n    console.log(`[Universal Dispatcher] ✅ Sync completed: ${summary.successfulSources}/${summary.totalSourcesProcessed} sources, ${summary.totalRecords} records`);\r\n    \r\n    return {\r\n      success: summary.failedSources < summary.totalSourcesProcessed,\r\n      summary,\r\n      details: results\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Sync a single source with comprehensive error handling\r\n   */\r\n  private async syncSource(source: UniversalDataSource): Promise<DispatchResult> {\r\n    const startTime = Date.now();\r\n    let recordsProcessed = 0;\r\n    let recordsAdded = 0;\r\n    let recordsSkipped = 0;\r\n    const warnings: string[] = [];\r\n    \r\n    console.log(`[Universal Dispatcher] Syncing ${source.name}...`);\r\n    \r\n    try {\r\n      // Get or create rate limiter for this source\r\n      if (!this.rateLimiters.has(source.id)) {\r\n        this.rateLimiters.set(source.id, new RateLimiter({\r\n          tokensPerInterval: source.rateLimitPerHour,\r\n          interval: 'hour'\r\n        }));\r\n      }\r\n      \r\n      const limiter = this.rateLimiters.get(source.id)!;\r\n      await limiter.removeTokens(1);\r\n      \r\n      // Dispatch based on source type\r\n      let data: any[] = [];\r\n      \r\n      if (source.type === 'official_api') {\r\n        data = await this.fetchFromAPI(source);\r\n      } else if (source.type === 'web_scraping') {\r\n        data = await this.scrapeWebsite(source);\r\n      } else if (source.type === 'rss_feed') {\r\n        data = await this.fetchRSSFeed(source);\r\n      }\r\n      \r\n      recordsProcessed = data.length;\r\n      \r\n      // Process and validate each record\r\n      for (const rawRecord of data) {\r\n        try {\r\n          const normalizedRecord = await this.normalizeRecord(rawRecord, source);\r\n          if (normalizedRecord && await this.validateRecord(normalizedRecord)) {\r\n            // Store with correct source attribution - match schema exactly\r\n            await storage.createRegulatoryUpdate({\r\n              title: normalizedRecord.title,\r\n              description: normalizedRecord.description,\r\n              content: normalizedRecord.content,\r\n              sourceId: source.id,\r\n              type: this.mapCategoryToType(source.category),\r\n              category: source.category,\r\n              deviceType: normalizedRecord.deviceClasses?.[0] || null,\r\n              jurisdiction: source.region,\r\n              tags: normalizedRecord.deviceClasses || [],\r\n              publishedDate: new Date(normalizedRecord.publishedAt),\r\n              documentUrl: normalizedRecord.documentUrl\r\n            });\r\n            recordsAdded++;\r\n          } else {\r\n            recordsSkipped++;\r\n            warnings.push(`Invalid record skipped from ${source.name}`);\r\n          }\r\n        } catch (error: any) {\r\n          recordsSkipped++;\r\n          warnings.push(`Error processing record: ${error.message}`);\r\n        }\r\n      }\r\n      \r\n      return {\r\n        sourceId: source.id,\r\n        sourceName: source.name,\r\n        status: recordsAdded > 0 ? 'success' : 'partial',\r\n        recordsProcessed,\r\n        recordsAdded,\r\n        recordsSkipped,\r\n        duration: Date.now() - startTime,\r\n        warnings\r\n      };\r\n      \r\n    } catch (error: any) {\r\n      return {\r\n        sourceId: source.id,\r\n        sourceName: source.name,\r\n        status: 'failed',\r\n        recordsProcessed,\r\n        recordsAdded,\r\n        recordsSkipped,\r\n        duration: Date.now() - startTime,\r\n        errorMessage: error.message,\r\n        warnings\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get sync status for monitoring\r\n   */\r\n  async getSyncStatus(): Promise<any> {\r\n    return {\r\n      totalSources: this.sourceRegistry.length,\r\n      activeSources: this.sourceRegistry.filter(s => s.isActive).length,\r\n      lastSync: new Date().toISOString(),\r\n      sourcesByPriority: {\r\n        high: this.sourceRegistry.filter(s => s.priority === 'high').length,\r\n        medium: this.sourceRegistry.filter(s => s.priority === 'medium').length,\r\n        low: this.sourceRegistry.filter(s => s.priority === 'low').length,\r\n      },\r\n      sourcesByType: {\r\n        official_api: this.sourceRegistry.filter(s => s.type === 'official_api').length,\r\n        web_scraping: this.sourceRegistry.filter(s => s.type === 'web_scraping').length,\r\n        rss_feed: this.sourceRegistry.filter(s => s.type === 'rss_feed').length,\r\n      }\r\n    };\r\n  }\r\n}\r\n\r\nexport const universalSourceDispatcher = new UniversalSourceDispatcher();"]}