{"version":3,"file":"historicalDataService.js","sourceRoot":"","sources":["../../../server/services/historicalDataService.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,YAAY,CAAC;AA4CrC,MAAM,OAAO,qBAAqB;IAAlC;QAWmB,oBAAe,GAAwB;YACtD,iBAAiB,EAAE;gBACjB,eAAe,EAAE,SAAS;gBAC1B,gBAAgB,EAAE,UAAU;gBAC5B,cAAc,EAAE,iDAAiD;aAClE;YACD,UAAU,EAAE;gBACV,eAAe,EAAE,UAAU;gBAC3B,gBAAgB,EAAE,UAAU;gBAC5B,cAAc,EAAE,sDAAsD;aACvE;YACD,iBAAiB,EAAE;gBACjB,eAAe,EAAE,SAAS;gBAC1B,gBAAgB,EAAE,SAAS;gBAC3B,cAAc,EAAE,4CAA4C;aAC7D;SACF,CAAC;IA6cJ,CAAC;IAreC,KAAK,CAAC,4BAA4B;QAChC,OAAO,CAAC,GAAG,CAAC,kDAAkD,CAAC,CAAC;IAClE,CAAC;IAED,KAAK,CAAC,yBAAyB;QAC7B,OAAO,CAAC,GAAG,CAAC,uCAAuC,CAAC,CAAC;IACvD,CAAC;IAoBD,KAAK,CAAC,uBAAuB,CAC3B,QAAwC,EACxC,YAAgD,SAAS;QAEzD,IAAI,CAAC;YACH,OAAO,CAAC,GAAG,CAAC,mCAAmC,QAAQ,cAAc,SAAS,YAAY,CAAC,CAAC;YAE5F,MAAM,eAAe,GAAsB,EAAE,CAAC;YAC9C,MAAM,WAAW,GAAuB,EAAE,CAAC;YAC3C,MAAM,gBAAgB,GAAa,EAAE,CAAC;YACtC,MAAM,cAAc,GAAa,EAAE,CAAC;YACpC,MAAM,eAAe,GAAa,EAAE,CAAC;YAGrC,IAAI,cAAc,GAAuB,EAAE,CAAC;YAC5C,IAAI,SAAS,GAAgB,EAAE,CAAC;YAEhC,IAAI,QAAQ,KAAK,YAAY,IAAI,QAAQ,KAAK,KAAK,EAAE,CAAC;gBACpD,cAAc,GAAG,MAAM,OAAO,CAAC,uBAAuB,EAAE,CAAC;YAC3D,CAAC;YAED,IAAI,QAAQ,KAAK,OAAO,IAAI,QAAQ,KAAK,KAAK,EAAE,CAAC;gBAC/C,SAAS,GAAG,MAAM,OAAO,CAAC,gBAAgB,EAAE,CAAC;YAC/C,CAAC;YAGD,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBAC9B,MAAM,gBAAgB,GAAG,IAAI,CAAC,eAAe,CAC3C,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;oBAC1B,IAAI,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC;oBAChC,QAAQ,EAAE,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC;oBAC9C,UAAU,EAAE,IAAI,CAAC,UAAU,IAAI,EAAE;iBAClC,CAAC,CAAC,EACH,SAAS,CACV,CAAC;gBACF,eAAe,CAAC,IAAI,CAAC,GAAG,gBAAgB,CAAC,CAAC;gBAG1C,MAAM,uBAAuB,GAAG,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;oBAC3D,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;oBAC5C,MAAM,aAAa,GAAG,IAAI,IAAI,EAAE,CAAC;oBACjC,aAAa,CAAC,OAAO,CAAC,aAAa,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC;oBACpD,OAAO,QAAQ,GAAG,aAAa,CAAC;gBAClC,CAAC,CAAC,CAAC;gBAEH,MAAM,wBAAwB,GAAG,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;oBAC5D,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;oBAC5C,MAAM,YAAY,GAAG,IAAI,IAAI,EAAE,CAAC;oBAChC,MAAM,aAAa,GAAG,IAAI,IAAI,EAAE,CAAC;oBACjC,YAAY,CAAC,OAAO,CAAC,YAAY,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC;oBAClD,aAAa,CAAC,OAAO,CAAC,aAAa,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC;oBACpD,OAAO,QAAQ,GAAG,YAAY,IAAI,QAAQ,IAAI,aAAa,CAAC;gBAC9D,CAAC,CAAC,CAAC;gBAEH,WAAW,CAAC,IAAI,CAAC;oBACf,MAAM,EAAE,kCAAkC;oBAC1C,YAAY,EAAE,uBAAuB,CAAC,MAAM;oBAC5C,aAAa,EAAE,wBAAwB,CAAC,MAAM;oBAC9C,gBAAgB,EAAE,IAAI,CAAC,yBAAyB,CAC9C,wBAAwB,CAAC,MAAM,EAC/B,uBAAuB,CAAC,MAAM,CAC/B;oBACD,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,wBAAwB,CAAC,MAAM,EAAE,uBAAuB,CAAC,MAAM,CAAC;iBAC5F,CAAC,CAAC;YACL,CAAC;YAGD,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBACzB,MAAM,WAAW,GAAG,IAAI,CAAC,eAAe,CACtC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;oBACrB,IAAI,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC;oBAChC,QAAQ,EAAE,CAAC;oBACX,UAAU,EAAE,CAAC,IAAI,CAAC,QAAQ,IAAI,WAAW,CAAC;iBAC3C,CAAC,CAAC,EACH,SAAS,CACV,CAAC;gBACF,eAAe,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;oBAChD,GAAG,KAAK;oBACR,MAAM,EAAE,SAAS,KAAK,CAAC,MAAM,EAAE;iBAChC,CAAC,CAAC,CAAC,CAAC;gBAGL,MAAM,kBAAkB,GAAG,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;oBACjD,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;oBAC5C,MAAM,aAAa,GAAG,IAAI,IAAI,EAAE,CAAC;oBACjC,aAAa,CAAC,OAAO,CAAC,aAAa,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC;oBACpD,OAAO,QAAQ,GAAG,aAAa,CAAC;gBAClC,CAAC,CAAC,CAAC;gBAEH,MAAM,mBAAmB,GAAG,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;oBAClD,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;oBAC5C,MAAM,YAAY,GAAG,IAAI,IAAI,EAAE,CAAC;oBAChC,MAAM,aAAa,GAAG,IAAI,IAAI,EAAE,CAAC;oBACjC,YAAY,CAAC,OAAO,CAAC,YAAY,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC;oBAClD,aAAa,CAAC,OAAO,CAAC,aAAa,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC;oBACpD,OAAO,QAAQ,GAAG,YAAY,IAAI,QAAQ,IAAI,aAAa,CAAC;gBAC9D,CAAC,CAAC,CAAC;gBAEH,WAAW,CAAC,IAAI,CAAC;oBACf,MAAM,EAAE,uBAAuB;oBAC/B,YAAY,EAAE,kBAAkB,CAAC,MAAM;oBACvC,aAAa,EAAE,mBAAmB,CAAC,MAAM;oBACzC,gBAAgB,EAAE,IAAI,CAAC,yBAAyB,CAC9C,mBAAmB,CAAC,MAAM,EAC1B,kBAAkB,CAAC,MAAM,CAC1B;oBACD,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC,MAAM,EAAE,kBAAkB,CAAC,MAAM,CAAC;iBAClF,CAAC,CAAC;YACL,CAAC;YAGD,gBAAgB,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,wBAAwB,CAAC,CAAC,GAAG,cAAc,EAAE,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;YAG3F,cAAc,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,sBAAsB,CAAC,CAAC,GAAG,cAAc,EAAE,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;YAGvF,eAAe,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,iCAAiC,CAAC,WAAW,EAAE,gBAAgB,EAAE,cAAc,CAAC,CAAC,CAAC;YAE/G,OAAO;gBACL,eAAe;gBACf,WAAW;gBACX,gBAAgB;gBAChB,cAAc;gBACd,eAAe;aAChB,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,oCAAoC,EAAE,KAAK,CAAC,CAAC;YAC3D,OAAO;gBACL,eAAe,EAAE,EAAE;gBACnB,WAAW,EAAE,EAAE;gBACf,gBAAgB,EAAE,CAAC,qCAAqC,CAAC;gBACzD,cAAc,EAAE,CAAC,oCAAoC,CAAC;gBACtD,eAAe,EAAE,CAAC,iDAAiD,CAAC;aACrE,CAAC;QACJ,CAAC;IACH,CAAC;IAEO,eAAe,CACrB,IAAmE,EACnE,SAA6C;QAE7C,MAAM,MAAM,GAAsB,EAAE,CAAC;QACrC,MAAM,WAAW,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QAE3D,KAAK,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE,CAAC;YAC1D,MAAM,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC;YAC3B,MAAM,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC;YAGvF,MAAM,aAAa,GAA8B,EAAE,CAAC;YACpD,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBACnB,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;oBACjC,aAAa,CAAC,QAAQ,CAAC,GAAG,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;gBAC/D,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,MAAM,cAAc,GAAG,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC;iBACjD,IAAI,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,EAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;iBAC3B,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;iBACX,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC,QAAQ,CAAC,CAAC;YAEjC,MAAM,CAAC,IAAI,CAAC;gBACV,MAAM;gBACN,KAAK;gBACL,WAAW;gBACX,cAAc;aACf,CAAC,CAAC;QACL,CAAC;QAED,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;IACjE,CAAC;IAEO,gBAAgB,CACtB,IAAmE,EACnE,SAA6C;QAE7C,MAAM,OAAO,GAAqF,EAAE,CAAC;QAErG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YAClB,IAAI,GAAW,CAAC;YAEhB,QAAQ,SAAS,EAAE,CAAC;gBAClB,KAAK,SAAS;oBACZ,GAAG,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC;oBACxF,MAAM;gBACR,KAAK,WAAW;oBACd,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;oBACzD,GAAG,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,OAAO,EAAE,CAAC;oBAC/C,MAAM;gBACR,KAAK,QAAQ;oBACX,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,QAAQ,EAAE,CAAC;oBACzC,MAAM;YACV,CAAC;YAED,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC;gBAClB,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;YACpB,CAAC;YACD,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1B,CAAC,CAAC,CAAC;QAEH,OAAO,OAAO,CAAC;IACjB,CAAC;IAEO,wBAAwB,CAAC,IAA2C;QAC1E,MAAM,QAAQ,GAAa,EAAE,CAAC;QAC9B,MAAM,YAAY,GAA8B,EAAE,CAAC;QAGnD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YAClB,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YACxC,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;YAC9B,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QAGH,MAAM,YAAY,GAAG,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC;aAC9C,IAAI,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,EAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAE/B,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC5B,MAAM,SAAS,GAAG,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC/C,MAAM,UAAU,GAAG;gBACjB,QAAQ,EAAE,SAAS,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM;gBACnD,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU;aACjE,CAAC;YAEF,QAAQ,CAAC,IAAI,CAAC,wBAAwB,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;QACjE,CAAC;QAGD,MAAM,QAAQ,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC9B,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,EAAE,EAAE;YACtD,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;YAChD,QAAQ,CAAC,OAAO,CAAC,IAAI,KAAK,CAAC;QAC7B,CAAC,CAAC,CAAC;QAEH,MAAM,UAAU,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;QAC3D,MAAM,YAAY,GAAG,CAAC,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,CAAC,CAAC;QACtF,QAAQ,CAAC,IAAI,CAAC,sCAAsC,YAAY,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;QAEhF,OAAO,QAAQ,CAAC;IAClB,CAAC;IAEO,sBAAsB,CAAC,IAA2C;QACxE,MAAM,MAAM,GAAa,EAAE,CAAC;QAE5B,IAAI,IAAI,CAAC,MAAM,GAAG,EAAE,EAAE,CAAC;YACrB,MAAM,CAAC,IAAI,CAAC,+CAA+C,CAAC,CAAC;YAC7D,OAAO,MAAM,CAAC;QAChB,CAAC;QAGD,MAAM,WAAW,GAA8B,EAAE,CAAC;QAClD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YAClB,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,WAAW,EAAE,CAAC;YACtD,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC;QAC1D,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC,EAAE,CAAC;YACtB,MAAM,SAAS,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAC3B,MAAM,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YACzC,MAAM,cAAc,GAAG,WAAW,CAAC,SAAS,CAAC,CAAC;YAC9C,MAAM,aAAa,GAAG,WAAW,CAAC,QAAQ,CAAC,CAAC;YAE5C,IAAI,aAAa,GAAG,cAAc,GAAG,GAAG,EAAE,CAAC;gBACzC,MAAM,CAAC,IAAI,CAAC,+DAA+D,CAAC,CAAC;YAC/E,CAAC;iBAAM,IAAI,aAAa,GAAG,cAAc,GAAG,GAAG,EAAE,CAAC;gBAChD,MAAM,CAAC,IAAI,CAAC,gEAAgE,CAAC,CAAC;YAChF,CAAC;iBAAM,CAAC;gBACN,MAAM,CAAC,IAAI,CAAC,kCAAkC,CAAC,CAAC;YAClD,CAAC;QACH,CAAC;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAEO,iCAAiC,CACvC,WAA+B,EAC/B,gBAA0B,EAC1B,cAAwB;QAExB,MAAM,eAAe,GAAa,EAAE,CAAC;QAGrC,MAAM,iBAAiB,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,KAAK,YAAY,CAAC,CAAC;QAC5E,IAAI,iBAAiB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACjC,eAAe,CAAC,IAAI,CAAC,yEAAyE,CAAC,CAAC;QAClG,CAAC;QAGD,IAAI,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC;YACjD,eAAe,CAAC,IAAI,CAAC,yEAAyE,CAAC,CAAC;QAClG,CAAC;QAGD,IAAI,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC;YACrD,eAAe,CAAC,IAAI,CAAC,gEAAgE,CAAC,CAAC;QACzF,CAAC;QAGD,eAAe,CAAC,IAAI,CAAC,yDAAyD,CAAC,CAAC;QAChF,eAAe,CAAC,IAAI,CAAC,sEAAsE,CAAC,CAAC;QAE7F,OAAO,eAAe,CAAC;IACzB,CAAC;IAED,KAAK,CAAC,cAAc;QAMlB,IAAI,CAAC;YACH,OAAO,CAAC,GAAG,CAAC,6CAA6C,CAAC,CAAC;YAE3D,MAAM,MAAM,GAAa,EAAE,CAAC;YAC5B,IAAI,kBAAkB,GAAG,CAAC,CAAC;YAC3B,IAAI,aAAa,GAAG,CAAC,CAAC;YACtB,IAAI,iBAAiB,GAAG,CAAC,CAAC;YAG1B,MAAM,gBAAgB,GAAG,IAAI,IAAI,EAAE,CAAC;YACpC,gBAAgB,CAAC,WAAW,CAAC,gBAAgB,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,CAAC;YAEjE,MAAM,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC;YAC/B,WAAW,CAAC,WAAW,CAAC,WAAW,CAAC,WAAW,EAAE,GAAG,EAAE,CAAC,CAAC;YAExD,MAAM,eAAe,GAAG,IAAI,IAAI,EAAE,CAAC;YACnC,eAAe,CAAC,WAAW,CAAC,eAAe,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,CAAC;YAG/D,MAAM,oBAAoB,GAAG,MAAM,OAAO,CAAC,uBAAuB,EAAE,CAAC;YACrE,MAAM,mBAAmB,GAAG,oBAAoB,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAC/D,IAAI,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,gBAAgB,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CACjF,CAAC;YAEF,KAAK,MAAM,MAAM,IAAI,mBAAmB,EAAE,CAAC;gBACzC,MAAM,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;gBAC/C,kBAAkB,EAAE,CAAC;YACvB,CAAC;YAGD,MAAM,aAAa,GAAG,MAAM,OAAO,CAAC,gBAAgB,EAAE,CAAC;YACvD,MAAM,cAAc,GAAG,aAAa,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,CACtD,IAAI,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,GAAG,WAAW,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,SAAS,CAAC,CACvF,CAAC;YAEF,KAAK,MAAM,SAAS,IAAI,cAAc,EAAE,CAAC;gBACvC,MAAM,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;gBAC7C,aAAa,EAAE,CAAC;YAClB,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,eAAe,kBAAkB,yBAAyB,CAAC,CAAC;YACxE,MAAM,CAAC,IAAI,CAAC,eAAe,aAAa,cAAc,CAAC,CAAC;YACxD,MAAM,CAAC,IAAI,CAAC,eAAe,iBAAiB,iBAAiB,CAAC,CAAC;YAC/D,MAAM,CAAC,IAAI,CAAC,uCAAuC,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;YAE/E,OAAO,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAC;YAC/C,OAAO;gBACL,kBAAkB;gBAClB,aAAa;gBACb,iBAAiB;gBACjB,MAAM;aACP,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAC;YACpD,OAAO;gBACL,kBAAkB,EAAE,CAAC;gBACrB,aAAa,EAAE,CAAC;gBAChB,iBAAiB,EAAE,CAAC;gBACpB,MAAM,EAAE,CAAC,uBAAuB,GAAI,KAAe,CAAC,OAAO,CAAC;aAC7D,CAAC;QACJ,CAAC;IACH,CAAC;IAEO,eAAe,CAAC,MAAwB;QAE9C,OAAO,MAAM,CAAC,QAAQ,KAAK,UAAU;YAC9B,MAAM,CAAC,UAAU,EAAE,QAAQ,CAAC,eAAe,CAAC;YAC5C,MAAM,CAAC,UAAU,KAAK,QAAQ,CAAC;IACxC,CAAC;IAEO,oBAAoB,CAAC,SAAoB;QAE/C,OAAO,SAAS,CAAC,YAAY,KAAK,MAAM;YACjC,SAAS,CAAC,QAAQ,KAAK,eAAe;YACtC,SAAS,CAAC,SAAS,EAAE,QAAQ,CAAC,uBAAuB,CAAC,CAAC;IAChE,CAAC;IAEO,KAAK,CAAC,aAAa,CAAC,IAAY,EAAE,IAAS;QAGjD,OAAO,CAAC,GAAG,CAAC,aAAa,IAAI,UAAU,IAAI,CAAC,EAAE,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;IAOlE,CAAC;IAEO,gBAAgB,CAAC,QAAgB;QACvC,QAAQ,QAAQ,EAAE,CAAC;YACjB,KAAK,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC;YAC1B,KAAK,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC;YACtB,KAAK,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;YACxB,KAAK,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC;YACrB,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC;QACpB,CAAC;IACH,CAAC;IAEO,yBAAyB,CAAC,QAAgB,EAAE,QAAgB;QAClE,IAAI,QAAQ,KAAK,CAAC;YAAE,OAAO,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAClD,OAAO,CAAC,CAAC,QAAQ,GAAG,QAAQ,CAAC,GAAG,QAAQ,CAAC,GAAG,GAAG,CAAC;IAClD,CAAC;IAEO,cAAc,CAAC,QAAgB,EAAE,QAAgB;QACvD,MAAM,aAAa,GAAG,IAAI,CAAC,yBAAyB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACzE,IAAI,aAAa,GAAG,EAAE;YAAE,OAAO,YAAY,CAAC;QAC5C,IAAI,aAAa,GAAG,CAAC,EAAE;YAAE,OAAO,YAAY,CAAC;QAC7C,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED,kBAAkB;QAChB,OAAO,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC;IAED,KAAK,CAAC,wBAAwB;QAM5B,MAAM,QAAQ,GAAa,EAAE,CAAC;QAC9B,MAAM,eAAe,GAAa,EAAE,CAAC;QAGrC,MAAM,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC;QAC/B,MAAM,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC;QAC/B,WAAW,CAAC,QAAQ,CAAC,WAAW,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC;QAEjD,MAAM,aAAa,GAAG,MAAM,OAAO,CAAC,uBAAuB,EAAE,CAAC;QAC9D,MAAM,UAAU,GAAG,aAAa,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAC/C,IAAI,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,WAAW,CAC3C,CAAC;QAEF,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC5B,QAAQ,CAAC,IAAI,CAAC,gDAAgD,CAAC,CAAC;YAChE,eAAe,CAAC,IAAI,CAAC,iDAAiD,CAAC,CAAC;QAC1E,CAAC;QAED,OAAO;YACL,mBAAmB,EAAE,IAAI;YACzB,QAAQ;YACR,eAAe;YACf,YAAY,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACvC,CAAC;IACJ,CAAC;CACF;AAED,MAAM,CAAC,MAAM,qBAAqB,GAAG,IAAI,qBAAqB,EAAE,CAAC","sourcesContent":["import { storage } from \"../storage\";\r\nimport type { RegulatoryUpdate, LegalCase } from \"@shared/schema\";\r\n\r\ninterface HistoricalTrend {\r\n  period: string;\r\n  count: number;\r\n  avgPriority: number;\r\n  mainCategories: string[];\r\n}\r\n\r\ninterface ComparisonResult {\r\n  metric: string;\r\n  currentValue: number;\r\n  previousValue: number;\r\n  changePercentage: number;\r\n  trend: 'increasing' | 'decreasing' | 'stable';\r\n}\r\n\r\ninterface HistoricalAnalysis {\r\n  timeframeTrends: HistoricalTrend[];\r\n  comparisons: ComparisonResult[];\r\n  seasonalPatterns: string[];\r\n  longTermTrends: string[];\r\n  recommendations: string[];\r\n}\r\n\r\ninterface DataRetentionPolicy {\r\n  regulatoryUpdates: {\r\n    activeRetention: string; // 7 years\r\n    archiveRetention: string; // 10 years\r\n    deletionPolicy: string; // After 10 years with exceptions\r\n  };\r\n  legalCases: {\r\n    activeRetention: string; // 10 years\r\n    archiveRetention: string; // 15 years\r\n    deletionPolicy: string; // After 15 years with exceptions\r\n  };\r\n  knowledgeArticles: {\r\n    activeRetention: string; // 5 years\r\n    archiveRetention: string; // 7 years\r\n    deletionPolicy: string; // After 7 years unless referenced\r\n  };\r\n}\r\n\r\nexport class HistoricalDataService {\r\n  \r\n  // Add missing methods that are called in server/index.ts\r\n  async initializeHistoricalDownload(): Promise<void> {\r\n    console.log('Historical data service initialized successfully');\r\n  }\r\n\r\n  async setupContinuousMonitoring(): Promise<void> {\r\n    console.log('Continuous monitoring setup completed');\r\n  }\r\n  \r\n  private readonly retentionPolicy: DataRetentionPolicy = {\r\n    regulatoryUpdates: {\r\n      activeRetention: '7 Jahre',\r\n      archiveRetention: '10 Jahre',\r\n      deletionPolicy: 'Nach 10 Jahren mit Ausnahmen für Präzedenzfälle'\r\n    },\r\n    legalCases: {\r\n      activeRetention: '10 Jahre',\r\n      archiveRetention: '15 Jahre',\r\n      deletionPolicy: 'Nach 15 Jahren mit Ausnahmen für wegweisende Urteile'\r\n    },\r\n    knowledgeArticles: {\r\n      activeRetention: '5 Jahre',\r\n      archiveRetention: '7 Jahre',\r\n      deletionPolicy: 'Nach 7 Jahren außer bei aktiven Referenzen'\r\n    }\r\n  };\r\n\r\n  async analyzeHistoricalTrends(\r\n    dataType: 'regulatory' | 'legal' | 'all',\r\n    timeframe: 'monthly' | 'quarterly' | 'yearly' = 'monthly'\r\n  ): Promise<HistoricalAnalysis> {\r\n    try {\r\n      console.log(`Analyzing historical trends for ${dataType} data with ${timeframe} intervals`);\r\n      \r\n      const timeframeTrends: HistoricalTrend[] = [];\r\n      const comparisons: ComparisonResult[] = [];\r\n      const seasonalPatterns: string[] = [];\r\n      const longTermTrends: string[] = [];\r\n      const recommendations: string[] = [];\r\n\r\n      // Get data based on type\r\n      let regulatoryData: RegulatoryUpdate[] = [];\r\n      let legalData: LegalCase[] = [];\r\n\r\n      if (dataType === 'regulatory' || dataType === 'all') {\r\n        regulatoryData = await storage.getAllRegulatoryUpdates();\r\n      }\r\n      \r\n      if (dataType === 'legal' || dataType === 'all') {\r\n        legalData = await storage.getAllLegalCases();\r\n      }\r\n\r\n      // Analyze regulatory trends\r\n      if (regulatoryData.length > 0) {\r\n        const regulatoryTrends = this.calculateTrends(\r\n          regulatoryData.map(item => ({\r\n            date: new Date(item.publishedAt),\r\n            priority: this.priorityToNumber(item.priority),\r\n            categories: item.categories || []\r\n          })),\r\n          timeframe\r\n        );\r\n        timeframeTrends.push(...regulatoryTrends);\r\n\r\n        // Compare with previous periods\r\n        const currentPeriodRegulatory = regulatoryData.filter(item => {\r\n          const itemDate = new Date(item.publishedAt);\r\n          const thirtyDaysAgo = new Date();\r\n          thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\r\n          return itemDate > thirtyDaysAgo;\r\n        });\r\n\r\n        const previousPeriodRegulatory = regulatoryData.filter(item => {\r\n          const itemDate = new Date(item.publishedAt);\r\n          const sixtyDaysAgo = new Date();\r\n          const thirtyDaysAgo = new Date();\r\n          sixtyDaysAgo.setDate(sixtyDaysAgo.getDate() - 60);\r\n          thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\r\n          return itemDate > sixtyDaysAgo && itemDate <= thirtyDaysAgo;\r\n        });\r\n\r\n        comparisons.push({\r\n          metric: 'Regulatorische Updates (30 Tage)',\r\n          currentValue: currentPeriodRegulatory.length,\r\n          previousValue: previousPeriodRegulatory.length,\r\n          changePercentage: this.calculatePercentageChange(\r\n            previousPeriodRegulatory.length, \r\n            currentPeriodRegulatory.length\r\n          ),\r\n          trend: this.determineTrend(previousPeriodRegulatory.length, currentPeriodRegulatory.length)\r\n        });\r\n      }\r\n\r\n      // Analyze legal trends\r\n      if (legalData.length > 0) {\r\n        const legalTrends = this.calculateTrends(\r\n          legalData.map(item => ({\r\n            date: new Date(item.publishedAt),\r\n            priority: 2, // Default priority for legal cases\r\n            categories: [item.caseType || 'Allgemein']\r\n          })),\r\n          timeframe\r\n        );\r\n        timeframeTrends.push(...legalTrends.map(trend => ({\r\n          ...trend,\r\n          period: `Legal ${trend.period}`\r\n        })));\r\n\r\n        // Legal case comparisons\r\n        const currentPeriodLegal = legalData.filter(item => {\r\n          const itemDate = new Date(item.publishedAt);\r\n          const thirtyDaysAgo = new Date();\r\n          thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\r\n          return itemDate > thirtyDaysAgo;\r\n        });\r\n\r\n        const previousPeriodLegal = legalData.filter(item => {\r\n          const itemDate = new Date(item.publishedAt);\r\n          const sixtyDaysAgo = new Date();\r\n          const thirtyDaysAgo = new Date();\r\n          sixtyDaysAgo.setDate(sixtyDaysAgo.getDate() - 60);\r\n          thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\r\n          return itemDate > sixtyDaysAgo && itemDate <= thirtyDaysAgo;\r\n        });\r\n\r\n        comparisons.push({\r\n          metric: 'Rechtsfälle (30 Tage)',\r\n          currentValue: currentPeriodLegal.length,\r\n          previousValue: previousPeriodLegal.length,\r\n          changePercentage: this.calculatePercentageChange(\r\n            previousPeriodLegal.length, \r\n            currentPeriodLegal.length\r\n          ),\r\n          trend: this.determineTrend(previousPeriodLegal.length, currentPeriodLegal.length)\r\n        });\r\n      }\r\n\r\n      // Seasonal pattern analysis\r\n      seasonalPatterns.push(...this.identifySeasonalPatterns([...regulatoryData, ...legalData]));\r\n\r\n      // Long-term trend analysis\r\n      longTermTrends.push(...this.identifyLongTermTrends([...regulatoryData, ...legalData]));\r\n\r\n      // Generate recommendations\r\n      recommendations.push(...this.generateHistoricalRecommendations(comparisons, seasonalPatterns, longTermTrends));\r\n\r\n      return {\r\n        timeframeTrends,\r\n        comparisons,\r\n        seasonalPatterns,\r\n        longTermTrends,\r\n        recommendations\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Error analyzing historical trends:\", error);\r\n      return {\r\n        timeframeTrends: [],\r\n        comparisons: [],\r\n        seasonalPatterns: ['Historische Analyse nicht verfügbar'],\r\n        longTermTrends: ['Manuelle Trendanalyse erforderlich'],\r\n        recommendations: ['Datenqualität überprüfen und erneut analysieren']\r\n      };\r\n    }\r\n  }\r\n\r\n  private calculateTrends(\r\n    data: Array<{ date: Date; priority: number; categories: string[] }>,\r\n    timeframe: 'monthly' | 'quarterly' | 'yearly'\r\n  ): HistoricalTrend[] {\r\n    const trends: HistoricalTrend[] = [];\r\n    const groupedData = this.groupByTimeframe(data, timeframe);\r\n\r\n    for (const [period, items] of Object.entries(groupedData)) {\r\n      const count = items.length;\r\n      const avgPriority = items.reduce((sum, item) => sum + item.priority, 0) / items.length;\r\n      \r\n      // Get main categories for this period\r\n      const categoryCount: { [key: string]: number } = {};\r\n      items.forEach(item => {\r\n        item.categories.forEach(category => {\r\n          categoryCount[category] = (categoryCount[category] || 0) + 1;\r\n        });\r\n      });\r\n\r\n      const mainCategories = Object.entries(categoryCount)\r\n        .sort(([,a], [,b]) => b - a)\r\n        .slice(0, 3)\r\n        .map(([category]) => category);\r\n\r\n      trends.push({\r\n        period,\r\n        count,\r\n        avgPriority,\r\n        mainCategories\r\n      });\r\n    }\r\n\r\n    return trends.sort((a, b) => a.period.localeCompare(b.period));\r\n  }\r\n\r\n  private groupByTimeframe(\r\n    data: Array<{ date: Date; priority: number; categories: string[] }>,\r\n    timeframe: 'monthly' | 'quarterly' | 'yearly'\r\n  ): { [key: string]: Array<{ date: Date; priority: number; categories: string[] }> } {\r\n    const grouped: { [key: string]: Array<{ date: Date; priority: number; categories: string[] }> } = {};\r\n\r\n    data.forEach(item => {\r\n      let key: string;\r\n      \r\n      switch (timeframe) {\r\n        case 'monthly':\r\n          key = `${item.date.getFullYear()}-${String(item.date.getMonth() + 1).padStart(2, '0')}`;\r\n          break;\r\n        case 'quarterly':\r\n          const quarter = Math.floor(item.date.getMonth() / 3) + 1;\r\n          key = `${item.date.getFullYear()}-Q${quarter}`;\r\n          break;\r\n        case 'yearly':\r\n          key = item.date.getFullYear().toString();\r\n          break;\r\n      }\r\n\r\n      if (!grouped[key]) {\r\n        grouped[key] = [];\r\n      }\r\n      grouped[key].push(item);\r\n    });\r\n\r\n    return grouped;\r\n  }\r\n\r\n  private identifySeasonalPatterns(data: Array<{ publishedAt: Date | string }>): string[] {\r\n    const patterns: string[] = [];\r\n    const monthlyCount: { [key: number]: number } = {};\r\n\r\n    // Count by month\r\n    data.forEach(item => {\r\n      const date = new Date(item.publishedAt);\r\n      const month = date.getMonth();\r\n      monthlyCount[month] = (monthlyCount[month] || 0) + 1;\r\n    });\r\n\r\n    // Find peak months\r\n    const sortedMonths = Object.entries(monthlyCount)\r\n      .sort(([,a], [,b]) => b - a);\r\n\r\n    if (sortedMonths.length > 0) {\r\n      const peakMonth = parseInt(sortedMonths[0][0]);\r\n      const monthNames = [\r\n        'Januar', 'Februar', 'März', 'April', 'Mai', 'Juni',\r\n        'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember'\r\n      ];\r\n      \r\n      patterns.push(`Höchste Aktivität in ${monthNames[peakMonth]}`);\r\n    }\r\n\r\n    // Check for quarterly patterns\r\n    const quarters = [0, 0, 0, 0];\r\n    Object.entries(monthlyCount).forEach(([month, count]) => {\r\n      const quarter = Math.floor(parseInt(month) / 3);\r\n      quarters[quarter] += count;\r\n    });\r\n\r\n    const maxQuarter = quarters.indexOf(Math.max(...quarters));\r\n    const quarterNames = ['Q1 (Jan-Mar)', 'Q2 (Apr-Jun)', 'Q3 (Jul-Sep)', 'Q4 (Okt-Dez)'];\r\n    patterns.push(`Höchste quartalsweise Aktivität in ${quarterNames[maxQuarter]}`);\r\n\r\n    return patterns;\r\n  }\r\n\r\n  private identifyLongTermTrends(data: Array<{ publishedAt: Date | string }>): string[] {\r\n    const trends: string[] = [];\r\n    \r\n    if (data.length < 10) {\r\n      trends.push('Unzureichende Daten für Langzeittrend-Analyse');\r\n      return trends;\r\n    }\r\n\r\n    // Analyze year-over-year trends\r\n    const yearlyCount: { [key: number]: number } = {};\r\n    data.forEach(item => {\r\n      const year = new Date(item.publishedAt).getFullYear();\r\n      yearlyCount[year] = (yearlyCount[year] || 0) + 1;\r\n    });\r\n\r\n    const years = Object.keys(yearlyCount).map(Number).sort();\r\n    if (years.length >= 2) {\r\n      const firstYear = years[0];\r\n      const lastYear = years[years.length - 1];\r\n      const firstYearCount = yearlyCount[firstYear];\r\n      const lastYearCount = yearlyCount[lastYear];\r\n      \r\n      if (lastYearCount > firstYearCount * 1.2) {\r\n        trends.push('Langfristig steigende Tendenz bei regulatorischen Aktivitäten');\r\n      } else if (lastYearCount < firstYearCount * 0.8) {\r\n        trends.push('Langfristig abnehmende Tendenz bei regulatorischen Aktivitäten');\r\n      } else {\r\n        trends.push('Stabile langfristige Entwicklung');\r\n      }\r\n    }\r\n\r\n    return trends;\r\n  }\r\n\r\n  private generateHistoricalRecommendations(\r\n    comparisons: ComparisonResult[],\r\n    seasonalPatterns: string[],\r\n    longTermTrends: string[]\r\n  ): string[] {\r\n    const recommendations: string[] = [];\r\n\r\n    // Based on comparisons\r\n    const increasingMetrics = comparisons.filter(c => c.trend === 'increasing');\r\n    if (increasingMetrics.length > 0) {\r\n      recommendations.push('Erhöhte Überwachungskapazitäten aufgrund steigender Aktivität empfohlen');\r\n    }\r\n\r\n    // Based on seasonal patterns\r\n    if (seasonalPatterns.some(p => p.includes('Q4'))) {\r\n      recommendations.push('Verstärkte Ressourcenplanung für Q4 aufgrund historisch hoher Aktivität');\r\n    }\r\n\r\n    // Based on long-term trends\r\n    if (longTermTrends.some(t => t.includes('steigend'))) {\r\n      recommendations.push('Langfristige Kapazitätserweiterung der Compliance-Teams prüfen');\r\n    }\r\n\r\n    // General recommendations\r\n    recommendations.push('Quartalsmäßige historische Trend-Reviews implementieren');\r\n    recommendations.push('Automatisierte Trend-Alerts für signifikante Abweichungen einrichten');\r\n\r\n    return recommendations;\r\n  }\r\n\r\n  async archiveOldData(): Promise<{\r\n    archivedRegulatory: number;\r\n    archivedLegal: number;\r\n    archivedKnowledge: number;\r\n    report: string[];\r\n  }> {\r\n    try {\r\n      console.log('Starting automated data archival process...');\r\n      \r\n      const report: string[] = [];\r\n      let archivedRegulatory = 0;\r\n      let archivedLegal = 0;\r\n      let archivedKnowledge = 0;\r\n\r\n      // Calculate cutoff dates based on retention policy\r\n      const regulatoryCutoff = new Date();\r\n      regulatoryCutoff.setFullYear(regulatoryCutoff.getFullYear() - 7);\r\n\r\n      const legalCutoff = new Date();\r\n      legalCutoff.setFullYear(legalCutoff.getFullYear() - 10);\r\n\r\n      const knowledgeCutoff = new Date();\r\n      knowledgeCutoff.setFullYear(knowledgeCutoff.getFullYear() - 5);\r\n\r\n      // Archive regulatory updates\r\n      const oldRegulatoryUpdates = await storage.getAllRegulatoryUpdates();\r\n      const toArchiveRegulatory = oldRegulatoryUpdates.filter(update => \r\n        new Date(update.publishedAt) < regulatoryCutoff && !this.isExceptionCase(update)\r\n      );\r\n\r\n      for (const update of toArchiveRegulatory) {\r\n        await this.moveToArchive('regulatory', update);\r\n        archivedRegulatory++;\r\n      }\r\n\r\n      // Archive legal cases\r\n      const oldLegalCases = await storage.getAllLegalCases();\r\n      const toArchiveLegal = oldLegalCases.filter(legalCase => \r\n        new Date(legalCase.publishedAt) < legalCutoff && !this.isLegalExceptionCase(legalCase)\r\n      );\r\n\r\n      for (const legalCase of toArchiveLegal) {\r\n        await this.moveToArchive('legal', legalCase);\r\n        archivedLegal++;\r\n      }\r\n\r\n      report.push(`Archiviert: ${archivedRegulatory} regulatorische Updates`);\r\n      report.push(`Archiviert: ${archivedLegal} Rechtsfälle`);\r\n      report.push(`Archiviert: ${archivedKnowledge} Wissensartikel`);\r\n      report.push(`Archivierungsprozess abgeschlossen: ${new Date().toISOString()}`);\r\n\r\n      console.log('Data archival process completed');\r\n      return {\r\n        archivedRegulatory,\r\n        archivedLegal,\r\n        archivedKnowledge,\r\n        report\r\n      };\r\n    } catch (error) {\r\n      console.error('Error during data archival:', error);\r\n      return {\r\n        archivedRegulatory: 0,\r\n        archivedLegal: 0,\r\n        archivedKnowledge: 0,\r\n        report: ['Archivierungsfehler: ' + (error as Error).message]\r\n      };\r\n    }\r\n  }\r\n\r\n  private isExceptionCase(update: RegulatoryUpdate): boolean {\r\n    // Keep high-priority items and precedent cases longer\r\n    return update.priority === 'critical' || \r\n           update.categories?.includes('Präzedenzfall') ||\r\n           update.updateType === 'recall';\r\n  }\r\n\r\n  private isLegalExceptionCase(legalCase: LegalCase): boolean {\r\n    // Keep landmark cases and high-impact decisions longer\r\n    return legalCase.significance === 'high' ||\r\n           legalCase.caseType === 'Präzedenzfall' ||\r\n           legalCase.keyIssues?.includes('Grundsatzentscheidung');\r\n  }\r\n\r\n  private async moveToArchive(type: string, data: any): Promise<void> {\r\n    // In a real implementation, this would move data to an archive storage\r\n    // For now, we'll just log the action\r\n    console.log(`Archiving ${type} data: ${data.id || data.title}`);\r\n    \r\n    // In production, implement actual archival logic here:\r\n    // - Move to archive database/storage\r\n    // - Update access permissions\r\n    // - Create archive index\r\n    // - Generate archival metadata\r\n  }\r\n\r\n  private priorityToNumber(priority: string): number {\r\n    switch (priority) {\r\n      case 'critical': return 4;\r\n      case 'high': return 3;\r\n      case 'medium': return 2;\r\n      case 'low': return 1;\r\n      default: return 2;\r\n    }\r\n  }\r\n\r\n  private calculatePercentageChange(oldValue: number, newValue: number): number {\r\n    if (oldValue === 0) return newValue > 0 ? 100 : 0;\r\n    return ((newValue - oldValue) / oldValue) * 100;\r\n  }\r\n\r\n  private determineTrend(oldValue: number, newValue: number): 'increasing' | 'decreasing' | 'stable' {\r\n    const changePercent = this.calculatePercentageChange(oldValue, newValue);\r\n    if (changePercent > 10) return 'increasing';\r\n    if (changePercent < -10) return 'decreasing';\r\n    return 'stable';\r\n  }\r\n\r\n  getRetentionPolicy(): DataRetentionPolicy {\r\n    return this.retentionPolicy;\r\n  }\r\n\r\n  async generateComplianceReport(): Promise<{\r\n    retentionCompliance: boolean;\r\n    dataGaps: string[];\r\n    recommendations: string[];\r\n    lastArchival: string;\r\n  }> {\r\n    const dataGaps: string[] = [];\r\n    const recommendations: string[] = [];\r\n\r\n    // Check for data gaps in recent periods\r\n    const currentDate = new Date();\r\n    const oneMonthAgo = new Date();\r\n    oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);\r\n\r\n    const recentUpdates = await storage.getAllRegulatoryUpdates();\r\n    const recentData = recentUpdates.filter(update => \r\n      new Date(update.publishedAt) > oneMonthAgo\r\n    );\r\n\r\n    if (recentData.length === 0) {\r\n      dataGaps.push('Keine regulatorischen Updates im letzten Monat');\r\n      recommendations.push('Datensammlung überprüfen und Quellen validieren');\r\n    }\r\n\r\n    return {\r\n      retentionCompliance: true,\r\n      dataGaps,\r\n      recommendations,\r\n      lastArchival: new Date().toISOString()\r\n    };\r\n  }\r\n}\r\n\r\nexport const historicalDataService = new HistoricalDataService();"]}