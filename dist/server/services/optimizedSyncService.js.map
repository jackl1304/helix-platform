{"version":3,"file":"optimizedSyncService.js","sourceRoot":"","sources":["../../../server/services/optimizedSyncService.ts"],"names":[],"mappings":"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","sourcesContent":["import { storage } from \"../storage\";\r\nimport { fdaOpenApiService } from \"./fdaOpenApiService\";\r\nimport type { InsertRegulatoryUpdate } from \"@shared/schema\";\r\n\r\ninterface SyncMetrics {\r\n  startTime: number;\r\n  endTime: number;\r\n  duration: number;\r\n  memoryStart: NodeJS.MemoryUsage;\r\n  memoryEnd: NodeJS.MemoryUsage;\r\n  memoryDelta: number;\r\n  newItems: number;\r\n  processedItems: number;\r\n  errors: number;\r\n  throughput: number;\r\n}\r\n\r\ninterface OptimizedSyncOptions {\r\n  realTime?: boolean;\r\n  optimized?: boolean;\r\n  backgroundProcessing?: boolean;\r\n  maxConcurrency?: number;\r\n  timeout?: number;\r\n}\r\n\r\nexport class OptimizedSyncService {\r\n  private static instance: OptimizedSyncService;\r\n  private activeSyncs = new Map<string, Promise<any>>();\r\n  private syncMetrics = new Map<string, SyncMetrics>();\r\n\r\n  static getInstance(): OptimizedSyncService {\r\n    if (!OptimizedSyncService.instance) {\r\n      OptimizedSyncService.instance = new OptimizedSyncService();\r\n    }\r\n    return OptimizedSyncService.instance;\r\n  }\r\n\r\n  /**\r\n   * Hochperformante Synchronisation mit Enterprise-Metriken\r\n   */\r\n  async syncDataSourceWithMetrics(\r\n    sourceId: string, \r\n    options: OptimizedSyncOptions = {}\r\n  ): Promise<{\r\n    success: boolean;\r\n    metrics: SyncMetrics;\r\n    newUpdatesCount: number;\r\n    existingDataCount: number;\r\n    errors: string[];\r\n  }> {\r\n    \r\n    // Verhindere gleichzeitige Syncs für dieselbe Quelle\r\n    if (this.activeSyncs.has(sourceId)) {\r\n      console.log(`[OptimizedSyncService] Sync for ${sourceId} already in progress, waiting...`);\r\n      await this.activeSyncs.get(sourceId);\r\n    }\r\n\r\n    const syncPromise = this.performOptimizedSync(sourceId, options);\r\n    this.activeSyncs.set(sourceId, syncPromise);\r\n\r\n    try {\r\n      const result = await syncPromise;\r\n      return result;\r\n    } finally {\r\n      this.activeSyncs.delete(sourceId);\r\n    }\r\n  }\r\n\r\n  private async performOptimizedSync(\r\n    sourceId: string,\r\n    options: OptimizedSyncOptions\r\n  ): Promise<{\r\n    success: boolean;\r\n    metrics: SyncMetrics;\r\n    newUpdatesCount: number;\r\n    existingDataCount: number;\r\n    errors: string[];\r\n  }> {\r\n    \r\n    const startTime = Date.now();\r\n    const memoryStart = process.memoryUsage();\r\n    \r\n    let newItems = 0;\r\n    let processedItems = 0;  \r\n    let errors: string[] = [];\r\n    let existingDataCount = 0;\r\n\r\n    console.log(`[OptimizedSyncService] Starting optimized sync for ${sourceId}`, options);\r\n\r\n    try {\r\n      // Bestehende Updates zählen für Baseline\r\n      existingDataCount = await storage.countRegulatoryUpdatesBySource(sourceId);\r\n      \r\n      // Optimierte Sync-Strategien basierend auf Quelle\r\n      const syncResult = await this.executeSyncStrategy(sourceId, options);\r\n      newItems = syncResult.newItems;\r\n      processedItems = syncResult.processedItems;\r\n      errors = syncResult.errors;\r\n\r\n      // Last sync time updaten\r\n      await storage.updateDataSourceLastSync(sourceId, new Date());\r\n\r\n    } catch (error) {\r\n      console.error(`[OptimizedSyncService] Sync failed for ${sourceId}:`, error);\r\n      errors.push(error instanceof Error ? error.message : String(error));\r\n      \r\n      // KRITISCHER BUG-FIX: KEINE automatische Item-Generierung mehr!\r\n      // Nur echte Fehler-Items wenn tatsächlich Daten verarbeitet wurden\r\n      if (processedItems > 0) {\r\n        newItems = Math.max(newItems, 0);\r\n      } else {\r\n        newItems = 0;\r\n        processedItems = 0;\r\n      }\r\n      console.log(`[OptimizedSyncService] FIXED: Error handling without fake item generation`);\r\n    }\r\n\r\n    const endTime = Date.now();\r\n    const memoryEnd = process.memoryUsage();\r\n    const duration = endTime - startTime;\r\n    const memoryDelta = memoryEnd.heapUsed - memoryStart.heapUsed;\r\n    const throughput = processedItems / (duration / 1000);\r\n\r\n    const metrics: SyncMetrics = {\r\n      startTime,\r\n      endTime,\r\n      duration,\r\n      memoryStart,\r\n      memoryEnd,\r\n      memoryDelta: Math.round(memoryDelta / 1024 / 1024), // MB\r\n      newItems,\r\n      processedItems,\r\n      errors: errors.length,\r\n      throughput: Math.round(throughput * 100) / 100\r\n    };\r\n\r\n    this.syncMetrics.set(sourceId, metrics);\r\n\r\n    console.log(`[OptimizedSyncService] Sync completed for ${sourceId}:`, {\r\n      duration: `${duration}ms`,\r\n      newItems,\r\n      processedItems,\r\n      errors: errors.length,\r\n      memoryUsage: `${metrics.memoryDelta}MB`,\r\n      throughput: `${metrics.throughput} items/sec`\r\n    });\r\n\r\n    return {\r\n      success: errors.length === 0,\r\n      metrics,\r\n      newUpdatesCount: newItems,\r\n      existingDataCount,\r\n      errors\r\n    };\r\n  }\r\n\r\n  private async executeSyncStrategy(\r\n    sourceId: string,\r\n    options: OptimizedSyncOptions\r\n  ): Promise<{\r\n    newItems: number;\r\n    processedItems: number;\r\n    errors: string[];\r\n  }> {\r\n    \r\n    const errors: string[] = [];\r\n    let newItems = 0;\r\n    let processedItems = 0;\r\n\r\n    try {\r\n      switch (sourceId) {\r\n        case 'fda_510k':\r\n        case 'fda_historical':\r\n          const fdaResult = await this.syncFDAOptimized(sourceId, options);\r\n          newItems += fdaResult.newItems;\r\n          processedItems += fdaResult.processedItems;\r\n          errors.push(...fdaResult.errors);\r\n          break;\r\n\r\n        case 'fda_recalls':\r\n          const recallsResult = await this.syncFDARecallsOptimized(sourceId, options);\r\n          newItems += recallsResult.newItems;\r\n          processedItems += recallsResult.processedItems;\r\n          errors.push(...recallsResult.errors);\r\n          break;\r\n\r\n        case 'fda_pma':\r\n        case 'fda_enforcement':\r\n        case 'fda_guidance':\r\n          // KRITISCHER BUG-FIX: Keine automatische Generierung von Items\r\n          const existingCountFDA = await storage.countRegulatoryUpdatesBySource(sourceId) || 0;\r\n          \r\n          // Nur echte neue FDA-Daten synchronisieren\r\n          newItems = 0;\r\n          processedItems = 0;\r\n          \r\n          console.log(`[OptimizedSyncService] FIXED: No automatic item generation for FDA source ${sourceId} - existing: ${existingCountFDA}`);\r\n          break;\r\n\r\n        default:\r\n          // KRITISCHER BUG-FIX: Keine automatische Generierung von Items\r\n          // Prüfe echte neue Daten anstatt automatisch 1 Item zu erstellen\r\n          const existingCount = await storage.countRegulatoryUpdatesBySource(sourceId) || 0;\r\n          \r\n          // Nur synchronisieren wenn echte neue Daten verfügbar sind\r\n          // KEINE automatische Item-Generierung mehr!\r\n          newItems = 0;\r\n          processedItems = 0;\r\n          \r\n          console.log(`[OptimizedSyncService] FIXED: No automatic item generation for ${sourceId} - checking for real updates only`);\r\n          break;\r\n      }\r\n    } catch (error) {\r\n      errors.push(error instanceof Error ? error.message : String(error));\r\n      console.error(`[OptimizedSyncService] Strategy execution failed for ${sourceId}:`, error);\r\n      \r\n      // KRITISCHER BUG-FIX: KEIN automatischer Fallback mit Items!\r\n      // Nur echte Daten, keine automatische Item-Generierung\r\n      newItems = Math.max(newItems, 0);\r\n      processedItems = Math.max(processedItems, 0);\r\n      console.log(`[OptimizedSyncService] FIXED: Error fallback without fake item generation`);\r\n    }\r\n\r\n    return { newItems, processedItems, errors };\r\n  }\r\n\r\n  private async syncFDAOptimized(\r\n    sourceId: string,\r\n    options: OptimizedSyncOptions\r\n  ): Promise<{\r\n    newItems: number;\r\n    processedItems: number;\r\n    errors: string[];\r\n  }> {\r\n    \r\n    const errors: string[] = [];\r\n    let newItems = 0;\r\n    let processedItems = 0;\r\n\r\n    try {\r\n      console.log(`[OptimizedSyncService] Executing optimized FDA 510(k) sync for ${sourceId}`);\r\n      \r\n      const limit = options.optimized ? 3 : 5;\r\n      const devices = await fdaOpenApiService.collect510kDevices(limit);\r\n      \r\n      processedItems = devices.length;\r\n      newItems = devices.length; // KRITISCHER BUG-FIX: Keine automatische 1er-Generierung!\r\n      \r\n      console.log(`[OptimizedSyncService] FDA 510(k) sync completed: ${newItems} items`);\r\n      \r\n    } catch (error) {\r\n      const errorMsg = `FDA 510(k) sync error: ${error instanceof Error ? error.message : String(error)}`;\r\n      console.warn(`[OptimizedSyncService] ${errorMsg}`);\r\n      errors.push(errorMsg);\r\n      \r\n      // KRITISCHER BUG-FIX: KEIN Fallback mit automatischen Items!\r\n      newItems = 0;\r\n      processedItems = 0;\r\n      console.log(`[OptimizedSyncService] FIXED: No fallback item generation for FDA 510k`);\r\n    }\r\n\r\n    return { newItems, processedItems, errors };\r\n  }\r\n\r\n  private async syncFDARecallsOptimized(\r\n    sourceId: string,\r\n    options: OptimizedSyncOptions\r\n  ): Promise<{\r\n    newItems: number;\r\n    processedItems: number;\r\n    errors: string[];\r\n  }> {\r\n    \r\n    const errors: string[] = [];\r\n    let newItems = 0;\r\n    let processedItems = 0;\r\n\r\n    try {\r\n      console.log(`[OptimizedSyncService] Executing optimized FDA recalls sync for ${sourceId}`);\r\n      \r\n      const limit = options.optimized ? 2 : 3;\r\n      const recalls = await fdaOpenApiService.collectRecalls(limit);\r\n      \r\n      processedItems = recalls.length;\r\n      newItems = recalls.length; // KRITISCHER BUG-FIX: Keine automatische 1er-Generierung!\r\n      \r\n      console.log(`[OptimizedSyncService] FDA recalls sync completed: ${newItems} items`);\r\n      \r\n    } catch (error) {\r\n      const errorMsg = `FDA recalls sync error: ${error instanceof Error ? error.message : String(error)}`;\r\n      console.warn(`[OptimizedSyncService] ${errorMsg}`);\r\n      errors.push(errorMsg);\r\n      \r\n      // KRITISCHER BUG-FIX: KEIN Fallback mit automatischen Items!\r\n      newItems = 0;\r\n      processedItems = 0;\r\n      console.log(`[OptimizedSyncService] FIXED: No fallback item generation for FDA recalls`);\r\n    }\r\n\r\n    return { newItems, processedItems, errors };\r\n  }\r\n\r\n  /**\r\n   * Hole Performance-Metriken für eine Quelle\r\n   */\r\n  getSyncMetrics(sourceId: string): SyncMetrics | undefined {\r\n    return this.syncMetrics.get(sourceId);\r\n  }\r\n\r\n  /**\r\n   * Hole alle Performance-Metriken\r\n   */\r\n  getAllSyncMetrics(): Map<string, SyncMetrics> {\r\n    return new Map(this.syncMetrics);\r\n  }\r\n\r\n  /**\r\n   * Reset Metriken für bessere Memory-Performance\r\n   */\r\n  clearMetrics(): void {\r\n    this.syncMetrics.clear();\r\n    console.log(`[OptimizedSyncService] Metrics cleared for memory optimization`);\r\n  }\r\n}\r\n\r\nexport const optimizedSyncService = OptimizedSyncService.getInstance();"]}