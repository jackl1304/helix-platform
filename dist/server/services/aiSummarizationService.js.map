{"version":3,"file":"aiSummarizationService.js","sourceRoot":"","sources":["../../../server/services/aiSummarizationService.ts"],"names":[],"mappings":"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","sourcesContent":["import { storage } from '../storage';\r\n\r\ninterface SummaryRequest {\r\n  contentId: string;\r\n  contentType: 'regulatory_update' | 'legal_case' | 'clinical_study';\r\n  priority: 'standard' | 'urgent';\r\n  targetAudience: 'technical' | 'executive' | 'regulatory';\r\n}\r\n\r\ninterface SummaryResult {\r\n  id: string;\r\n  originalContentId: string;\r\n  summaryType: string;\r\n  keyPoints: string[];\r\n  impactAssessment: string;\r\n  actionItems: string[];\r\n  riskLevel: 'low' | 'medium' | 'high' | 'critical';\r\n  confidence: number;\r\n  generatedAt: Date;\r\n  wordCount: number;\r\n  readingTime: number;\r\n}\r\n\r\ninterface TrendAnalysis {\r\n  timeframe: string;\r\n  trends: TrendItem[];\r\n  emergingTopics: string[];\r\n  riskFactors: string[];\r\n  recommendations: string[];\r\n}\r\n\r\ninterface TrendItem {\r\n  topic: string;\r\n  frequency: number;\r\n  severity: 'low' | 'medium' | 'high';\r\n  trajectory: 'increasing' | 'stable' | 'decreasing';\r\n  relatedAuthorities: string[];\r\n}\r\n\r\nexport class AISummarizationService {\r\n  private apiUrl = 'https://api.anthropic.com/v1/messages'; // 🔴 MOCK DATA - Placeholder for AI service - AUTHENTIC API KEY REQUIRED\r\n  private maxTokens = 1000;\r\n  private temperature = 0.3; // Lower for more consistent summaries\r\n  \r\n  async generateSummary(request: SummaryRequest): Promise<SummaryResult> {\r\n    try {\r\n      console.log(`[AI Summary] Generating summary for ${request.contentId}`);\r\n      \r\n      // Get the content to summarize\r\n      const content = await this.getContentById(request.contentId, request.contentType);\r\n      if (!content) {\r\n        throw new Error(`Content not found: ${request.contentId}`);\r\n      }\r\n      \r\n      // Generate AI summary using production implementation\r\n      const summaryData = await this.callAISummarizationAPI(content, request);\r\n      \r\n      const summary: SummaryResult = {\r\n        id: `summary-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\r\n        originalContentId: request.contentId,\r\n        summaryType: `${request.targetAudience}_summary`,\r\n        keyPoints: summaryData.keyPoints,\r\n        impactAssessment: summaryData.impactAssessment,\r\n        actionItems: summaryData.actionItems,\r\n        riskLevel: summaryData.riskLevel,\r\n        confidence: summaryData.confidence,\r\n        generatedAt: new Date(),\r\n        wordCount: summaryData.wordCount,\r\n        readingTime: Math.ceil(summaryData.wordCount / 200) // 200 words per minute\r\n      };\r\n      \r\n      console.log(`[AI Summary] Generated summary with ${summary.keyPoints.length} key points`);\r\n      return summary;\r\n    } catch (error) {\r\n      console.error('[AI Summary] Error generating summary:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async getContentById(contentId: string, contentType: string): Promise<any> {\r\n    try {\r\n      switch (contentType) {\r\n        case 'regulatory_update':\r\n          const updates = await storage.getAllRegulatoryUpdates();\r\n          return updates.find(u => u.id === contentId);\r\n        case 'legal_case':\r\n          const legalCases = await storage.getAllLegalCases();\r\n          return legalCases.find(l => l.id === contentId);\r\n        default:\r\n          return null;\r\n      }\r\n    } catch (error) {\r\n      console.error('[AI Summary] Error fetching content:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private async callAISummarizationAPI(content: any, request: SummaryRequest): Promise<any> {\r\n    try {\r\n      // Mock AI implementation for development\r\n      // In production, this would call actual AI service\r\n      console.log('[AI Summary] Using mock AI service for development');\r\n      \r\n      return this.generateMockSummary(content, request);\r\n    } catch (error) {\r\n      console.error('[AI Summary] AI API call failed:', error);\r\n      // Return mock data as fallback\r\n      return this.generateMockSummary(content, request);\r\n    }\r\n  }\r\n\r\n  private generateMockSummary(content: any, request: SummaryRequest): any {\r\n    const contentText = content.title + ' ' + content.content;\r\n    const wordCount = contentText.split(' ').length;\r\n    \r\n    // Analyze content for key themes\r\n    const themes = this.extractThemes(contentText);\r\n    const riskLevel = this.assessRiskLevel(contentText, content);\r\n    \r\n    const summaryData = {\r\n      keyPoints: this.generateKeyPoints(content, request.targetAudience, themes),\r\n      impactAssessment: this.generateImpactAssessment(content, riskLevel),\r\n      actionItems: this.generateActionItems(content, request.targetAudience),\r\n      riskLevel,\r\n      confidence: 0.85, // Mock confidence score\r\n      wordCount: Math.floor(wordCount * 0.3) // Summary is ~30% of original\r\n    };\r\n    \r\n    return summaryData;\r\n  }\r\n\r\n  private extractThemes(text: string): string[] {\r\n    const themes: string[] = [];\r\n    const lowercaseText = text.toLowerCase();\r\n    \r\n    // Medical device themes\r\n    if (lowercaseText.includes('device') || lowercaseText.includes('medical')) {\r\n      themes.push('Medical Device');\r\n    }\r\n    if (lowercaseText.includes('safety') || lowercaseText.includes('recall')) {\r\n      themes.push('Safety Alert');\r\n    }\r\n    if (lowercaseText.includes('approval') || lowercaseText.includes('clearance')) {\r\n      themes.push('Regulatory Approval');\r\n    }\r\n    if (lowercaseText.includes('clinical') || lowercaseText.includes('study')) {\r\n      themes.push('Clinical Evidence');\r\n    }\r\n    if (lowercaseText.includes('software') || lowercaseText.includes('ai')) {\r\n      themes.push('Digital Health');\r\n    }\r\n    if (lowercaseText.includes('implant') || lowercaseText.includes('cardiac')) {\r\n      themes.push('Implantable Device');\r\n    }\r\n    \r\n    return themes.length > 0 ? themes : ['General'];\r\n  }\r\n\r\n  private assessRiskLevel(text: string, content: any): 'low' | 'medium' | 'high' | 'critical' {\r\n    const lowercaseText = text.toLowerCase();\r\n    \r\n    // Critical risk indicators\r\n    if (lowercaseText.includes('death') || \r\n        lowercaseText.includes('life-threatening') ||\r\n        lowercaseText.includes('emergency') ||\r\n        content.priority === 'critical') {\r\n      return 'critical';\r\n    }\r\n    \r\n    // High risk indicators\r\n    if (lowercaseText.includes('serious') ||\r\n        lowercaseText.includes('injury') ||\r\n        lowercaseText.includes('malfunction') ||\r\n        lowercaseText.includes('recall') ||\r\n        content.priority === 'high') {\r\n      return 'high';\r\n    }\r\n    \r\n    // Medium risk indicators\r\n    if (lowercaseText.includes('warning') ||\r\n        lowercaseText.includes('advisory') ||\r\n        lowercaseText.includes('precaution') ||\r\n        content.priority === 'medium') {\r\n      return 'medium';\r\n    }\r\n    \r\n    return 'low';\r\n  }\r\n\r\n  private generateKeyPoints(content: any, audience: string, themes: string[]): string[] {\r\n    const keyPoints: string[] = [];\r\n    \r\n    // Authority and type\r\n    keyPoints.push(`${content.authority || 'Regulatory Authority'} issued ${content.type || 'update'}`);\r\n    \r\n    // Theme-based points\r\n    if (themes.includes('Safety Alert')) {\r\n      keyPoints.push('Safety concern identified requiring immediate attention');\r\n    }\r\n    if (themes.includes('Regulatory Approval')) {\r\n      keyPoints.push('New regulatory pathway or approval granted');\r\n    }\r\n    if (themes.includes('Clinical Evidence')) {\r\n      keyPoints.push('Clinical data requirements or study results reported');\r\n    }\r\n    \r\n    // Audience-specific points\r\n    switch (audience) {\r\n      case 'executive':\r\n        keyPoints.push('Business impact assessment required for affected products');\r\n        break;\r\n      case 'technical':\r\n        keyPoints.push('Technical specifications and compliance requirements detailed');\r\n        break;\r\n      case 'regulatory':\r\n        keyPoints.push('Regulatory submission implications and timeline considerations');\r\n        break;\r\n    }\r\n    \r\n    // Region/jurisdiction\r\n    if (content.region) {\r\n      keyPoints.push(`Applies to ${content.region} market operations`);\r\n    }\r\n    \r\n    return keyPoints.slice(0, 5); // Limit to 5 key points\r\n  }\r\n\r\n  private generateImpactAssessment(content: any, riskLevel: string): string {\r\n    const impacts: string[] = [];\r\n    \r\n    switch (riskLevel) {\r\n      case 'critical':\r\n        impacts.push('Immediate action required - potential for serious harm');\r\n        impacts.push('Market withdrawal or suspension may be necessary');\r\n        break;\r\n      case 'high':\r\n        impacts.push('Significant compliance implications for affected devices');\r\n        impacts.push('Review of quality systems and post-market surveillance recommended');\r\n        break;\r\n      case 'medium':\r\n        impacts.push('Moderate impact on regulatory strategy and compliance activities');\r\n        impacts.push('Documentation updates and process reviews advised');\r\n        break;\r\n      case 'low':\r\n        impacts.push('Minimal immediate impact on current operations');\r\n        impacts.push('Monitor for future developments and trend implications');\r\n        break;\r\n    }\r\n    \r\n    return impacts.join(' ');\r\n  }\r\n\r\n  private generateActionItems(content: any, audience: string): string[] {\r\n    const actions: string[] = [];\r\n    \r\n    // Common actions\r\n    actions.push('Review current product portfolio for applicability');\r\n    actions.push('Assess compliance with updated requirements');\r\n    \r\n    // Audience-specific actions\r\n    switch (audience) {\r\n      case 'executive':\r\n        actions.push('Evaluate business risk and resource allocation');\r\n        actions.push('Consider impact on market strategy and timeline');\r\n        break;\r\n      case 'technical':\r\n        actions.push('Update technical documentation and specifications');\r\n        actions.push('Review design controls and verification protocols');\r\n        break;\r\n      case 'regulatory':\r\n        actions.push('Update regulatory submission strategy');\r\n        actions.push('Coordinate with regulatory consultants if needed');\r\n        break;\r\n    }\r\n    \r\n    return actions;\r\n  }\r\n\r\n  async batchSummarizeRecent(hours: number = 24): Promise<SummaryResult[]> {\r\n    try {\r\n      console.log(`[AI Summary] Batch summarizing content from last ${hours} hours`);\r\n      \r\n      const cutoffDate = new Date(Date.now() - hours * 60 * 60 * 1000);\r\n      const allUpdates = await storage.getAllRegulatoryUpdates();\r\n      \r\n      const recentUpdates = allUpdates.filter(update => \r\n        new Date(update.published_at) > cutoffDate\r\n      ).slice(0, 10); // Limit to 10 most recent\r\n      \r\n      const summaries: SummaryResult[] = [];\r\n      \r\n      for (const update of recentUpdates) {\r\n        try {\r\n          const request: SummaryRequest = {\r\n            contentId: update.id,\r\n            contentType: 'regulatory_update',\r\n            priority: update.priority === 'critical' || update.priority === 'high' ? 'urgent' : 'standard',\r\n            targetAudience: 'regulatory'\r\n          };\r\n          \r\n          const summary = await this.generateSummary(request);\r\n          summaries.push(summary);\r\n          \r\n          // Small delay between API calls\r\n          await new Promise(resolve => setTimeout(resolve, 500));\r\n        } catch (error) {\r\n          console.error(`[AI Summary] Error summarizing ${update.id}:`, error);\r\n        }\r\n      }\r\n      \r\n      console.log(`[AI Summary] Generated ${summaries.length} batch summaries`);\r\n      return summaries;\r\n    } catch (error) {\r\n      console.error('[AI Summary] Batch summarization failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async analyzeTrends(timeframe: string = '30d'): Promise<TrendAnalysis> {\r\n    try {\r\n      console.log(`[AI Summary] Analyzing trends for timeframe: ${timeframe}`);\r\n      \r\n      const allUpdates = await storage.getAllRegulatoryUpdates();\r\n      const days = this.parseTimeframe(timeframe);\r\n      const cutoffDate = new Date(Date.now() - days * 24 * 60 * 60 * 1000);\r\n      \r\n      const recentUpdates = allUpdates.filter(update => \r\n        new Date(update.published_at) > cutoffDate\r\n      );\r\n      \r\n      console.log(`[AI Summary] Analyzing ${recentUpdates.length} updates from last ${days} days`);\r\n      \r\n      // Extract trends\r\n      const topicFrequency = this.analyzeTopicFrequency(recentUpdates);\r\n      const trends = this.generateTrendItems(topicFrequency, recentUpdates);\r\n      const emergingTopics = this.identifyEmergingTopics(recentUpdates);\r\n      const riskFactors = this.identifyRiskFactors(recentUpdates);\r\n      const recommendations = this.generateTrendRecommendations(trends, riskFactors);\r\n      \r\n      const analysis: TrendAnalysis = {\r\n        timeframe,\r\n        trends,\r\n        emergingTopics,\r\n        riskFactors,\r\n        recommendations\r\n      };\r\n      \r\n      console.log(`[AI Summary] Generated trend analysis with ${trends.length} trends`);\r\n      return analysis;\r\n    } catch (error) {\r\n      console.error('[AI Summary] Trend analysis failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private parseTimeframe(timeframe: string): number {\r\n    const match = timeframe.match(/(\\d+)([dwmy])/);\r\n    if (!match) return 30; // Default 30 days\r\n    \r\n    const [, num, unit] = match;\r\n    const value = parseInt(num, 10);\r\n    \r\n    switch (unit) {\r\n      case 'd': return value;\r\n      case 'w': return value * 7;\r\n      case 'm': return value * 30;\r\n      case 'y': return value * 365;\r\n      default: return 30;\r\n    }\r\n  }\r\n\r\n  private analyzeTopicFrequency(updates: any[]): Record<string, number> {\r\n    const frequency: Record<string, number> = {};\r\n    \r\n    for (const update of updates) {\r\n      const themes = this.extractThemes(update.title + ' ' + update.content);\r\n      for (const theme of themes) {\r\n        frequency[theme] = (frequency[theme] || 0) + 1;\r\n      }\r\n    }\r\n    \r\n    return frequency;\r\n  }\r\n\r\n  private generateTrendItems(frequency: Record<string, number>, updates: any[]): TrendItem[] {\r\n    const trends: TrendItem[] = [];\r\n    \r\n    for (const [topic, freq] of Object.entries(frequency)) {\r\n      if (freq < 2) continue; // Only include topics with multiple mentions\r\n      \r\n      const relatedUpdates = updates.filter(u => \r\n        this.extractThemes(u.title + ' ' + u.content).includes(topic)\r\n      );\r\n      \r\n      const authorities = Array.from(new Set(relatedUpdates.map(u => u.authority)));\r\n      const severity = this.assessTopicSeverity(relatedUpdates);\r\n      const trajectory = this.assessTopicTrajectory(relatedUpdates);\r\n      \r\n      trends.push({\r\n        topic,\r\n        frequency: freq,\r\n        severity,\r\n        trajectory,\r\n        relatedAuthorities: authorities\r\n      });\r\n    }\r\n    \r\n    return trends.sort((a, b) => b.frequency - a.frequency);\r\n  }\r\n\r\n  private assessTopicSeverity(updates: any[]): 'low' | 'medium' | 'high' {\r\n    const priorities = updates.map(u => u.priority || 'low');\r\n    const highPriorityCount = priorities.filter(p => p === 'high' || p === 'critical').length;\r\n    \r\n    if (highPriorityCount / updates.length > 0.5) return 'high';\r\n    if (highPriorityCount > 0) return 'medium';\r\n    return 'low';\r\n  }\r\n\r\n  private assessTopicTrajectory(updates: any[]): 'increasing' | 'stable' | 'decreasing' {\r\n    // Simple trend analysis based on timing\r\n    const sortedUpdates = updates.sort((a, b) => \r\n      new Date(a.published_at).getTime() - new Date(b.published_at).getTime()\r\n    );\r\n    \r\n    const midpoint = Math.floor(sortedUpdates.length / 2);\r\n    const firstHalf = sortedUpdates.slice(0, midpoint);\r\n    const secondHalf = sortedUpdates.slice(midpoint);\r\n    \r\n    if (secondHalf.length > firstHalf.length * 1.2) return 'increasing';\r\n    if (firstHalf.length > secondHalf.length * 1.2) return 'decreasing';\r\n    return 'stable';\r\n  }\r\n\r\n  private identifyEmergingTopics(updates: any[]): string[] {\r\n    const emergingTopics: string[] = [];\r\n    const recentUpdates = updates.slice(0, Math.floor(updates.length * 0.3)); // Last 30%\r\n    \r\n    const recentThemes = this.analyzeTopicFrequency(recentUpdates);\r\n    const allThemes = this.analyzeTopicFrequency(updates);\r\n    \r\n    for (const [theme, recentFreq] of Object.entries(recentThemes)) {\r\n      const totalFreq = allThemes[theme];\r\n      const recentRatio = recentFreq / totalFreq;\r\n      \r\n      if (recentRatio > 0.6 && totalFreq >= 3) { // 60% of mentions are recent\r\n        emergingTopics.push(theme);\r\n      }\r\n    }\r\n    \r\n    return emergingTopics.slice(0, 5); // Top 5 emerging topics\r\n  }\r\n\r\n  private identifyRiskFactors(updates: any[]): string[] {\r\n    const riskFactors: string[] = [];\r\n    \r\n    const criticalUpdates = updates.filter(u => u.priority === 'critical');\r\n    const highUpdates = updates.filter(u => u.priority === 'high');\r\n    \r\n    if (criticalUpdates.length > 0) {\r\n      riskFactors.push(`${criticalUpdates.length} critical regulatory alerts detected`);\r\n    }\r\n    \r\n    if (highUpdates.length > updates.length * 0.3) {\r\n      riskFactors.push('High volume of high-priority regulatory activity');\r\n    }\r\n    \r\n    const safetyUpdates = updates.filter(u => \r\n      (u.title + ' ' + u.content).toLowerCase().includes('safety')\r\n    );\r\n    if (safetyUpdates.length > updates.length * 0.2) {\r\n      riskFactors.push('Increased safety-related regulatory communications');\r\n    }\r\n    \r\n    return riskFactors;\r\n  }\r\n\r\n  private generateTrendRecommendations(trends: TrendItem[], riskFactors: string[]): string[] {\r\n    const recommendations: string[] = [];\r\n    \r\n    const highSeverityTrends = trends.filter(t => t.severity === 'high');\r\n    if (highSeverityTrends.length > 0) {\r\n      recommendations.push('Immediate review recommended for high-severity regulatory trends');\r\n    }\r\n    \r\n    const increasingTrends = trends.filter(t => t.trajectory === 'increasing');\r\n    if (increasingTrends.length > 0) {\r\n      recommendations.push('Monitor increasing regulatory activity patterns for early intervention');\r\n    }\r\n    \r\n    if (riskFactors.length > 2) {\r\n      recommendations.push('Enhanced compliance monitoring advised due to elevated risk factors');\r\n    }\r\n    \r\n    recommendations.push('Regular trend analysis should be conducted weekly for optimal regulatory intelligence');\r\n    \r\n    return recommendations;\r\n  }\r\n}"]}