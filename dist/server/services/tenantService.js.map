{"version":3,"file":"tenantService.js","sourceRoot":"","sources":["../../../server/services/tenantService.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,EAAE,EAAE,MAAM,OAAO,CAAC;AAC3B,OAAO,EAAE,OAAO,EAAE,WAAW,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,iBAAiB,EAAE,MAAM,gBAAgB,CAAC;AAC7G,OAAO,EAAE,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,aAAa,CAAC;AAG5C,MAAM,OAAO,aAAa;IAExB,MAAM,CAAC,KAAK,CAAC,aAAa;QACxB,MAAM,iBAAiB,GAAG,MAAM,EAAE;aAC/B,MAAM,CAAC;YACN,EAAE,EAAE,OAAO,CAAC,EAAE;YACd,IAAI,EAAE,OAAO,CAAC,IAAI;YAClB,IAAI,EAAE,OAAO,CAAC,IAAI;YAClB,gBAAgB,EAAE,OAAO,CAAC,gBAAgB;YAC1C,kBAAkB,EAAE,OAAO,CAAC,kBAAkB;YAC9C,YAAY,EAAE,OAAO,CAAC,YAAY;YAClC,QAAQ,EAAE,OAAO,CAAC,QAAQ;YAC1B,cAAc,EAAE,OAAO,CAAC,cAAc;YACtC,gBAAgB,EAAE,OAAO,CAAC,gBAAgB;YAC1C,qBAAqB,EAAE,OAAO,CAAC,qBAAqB;YACpD,WAAW,EAAE,OAAO,CAAC,WAAW;YAChC,SAAS,EAAE,OAAO,CAAC,SAAS;YAC5B,SAAS,EAAE,OAAO,CAAC,SAAS;SAC7B,CAAC;aACD,IAAI,CAAC,OAAO,CAAC;aACb,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;QAGpC,MAAM,uBAAuB,GAAG,MAAM,OAAO,CAAC,GAAG,CAC/C,iBAAiB,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE;YACrC,MAAM,CAAC,SAAS,EAAE,cAAc,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;gBACpD,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,WAAW,CAAC,QAAQ,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC;gBACxE,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,gBAAgB,CAAC,QAAQ,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC;aACnF,CAAC,CAAC;YAEH,OAAO;gBACL,GAAG,MAAM;gBACT,MAAM,EAAE;oBACN,WAAW,EAAE,SAAS,CAAC,MAAM;oBAC7B,UAAU,EAAE,cAAc,CAAC,MAAM;iBAClC;aACF,CAAC;QACJ,CAAC,CAAC,CACH,CAAC;QAEF,OAAO,uBAAuB,CAAC;IACjC,CAAC;IAGD,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,EAAU;QACnC,MAAM,CAAC,MAAM,CAAC,GAAG,MAAM,EAAE;aACtB,MAAM,EAAE;aACR,IAAI,CAAC,OAAO,CAAC;aACb,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;aACzB,KAAK,CAAC,CAAC,CAAC,CAAC;QAEZ,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;QACtC,CAAC;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAGD,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,IAAY;QACvC,MAAM,CAAC,MAAM,CAAC,GAAG,MAAM,EAAE;aACtB,MAAM,EAAE;aACR,IAAI,CAAC,OAAO,CAAC;aACb,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;aAC7B,KAAK,CAAC,CAAC,CAAC,CAAC;QAEZ,OAAO,MAAM,CAAC;IAChB,CAAC;IAGD,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,IAAoE;QAE5F,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7D,IAAI,cAAc,EAAE,CAAC;YACnB,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;QACzC,CAAC;QAGD,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,kBAAkB,KAAK,OAAO,EAAE,CAAC;YAC7D,IAAI,CAAC,WAAW,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;QACrE,CAAC;QAED,MAAM,CAAC,MAAM,CAAC,GAAG,MAAM,EAAE;aACtB,MAAM,CAAC,OAAO,CAAC;aACf,MAAM,CAAC,IAAI,CAAC;aACZ,SAAS,EAAE,CAAC;QAEf,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC7C,CAAC;QAGD,MAAM,EAAE,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,MAAM,CAAC;YACvC,QAAQ,EAAE,MAAM,CAAC,EAAE;YACnB,YAAY,EAAE,SAAS;YACvB,cAAc,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;YAC5B,YAAY,EAAE,IAAI,CAAC,gBAAgB,KAAK,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;gBAC5C,IAAI,CAAC,gBAAgB,KAAK,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM;SACtE,CAAC,CAAC;QAGH,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;YACtB,IAAI,CAAC;gBACH,MAAM,EAAE,YAAY,EAAE,GAAG,MAAM,MAAM,CAAC,gBAAgB,CAAC,CAAC;gBACxD,MAAM,YAAY,GAAG,IAAI,CAAC,WAAW,IAAI,MAAM,CAAC,IAAI,CAAC;gBACrD,MAAM,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,IAAI,cAAc,CAAC;gBAEnE,MAAM,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,YAAY;oBACzB,OAAO,CAAC,GAAG,CAAC,iBAAiB;oBAC7B,0BAA0B,CAAC;gBAC1C,MAAM,QAAQ,GAAG,GAAG,OAAO,qBAAqB,CAAC;gBAEjD,MAAM,YAAY,GAAG,YAAY,CAAC,+BAA+B,CAC/D,YAAY,EACZ,gBAAgB,EAChB,QAAQ,CACT,CAAC;gBAEF,MAAM,SAAS,GAAG,MAAM,YAAY,CAAC,SAAS,CAC5C,IAAI,CAAC,YAAY,EACjB,YAAY,CAAC,OAAO,EACpB,YAAY,CAAC,IAAI,CAClB,CAAC;gBAEF,IAAI,SAAS,EAAE,CAAC;oBACd,OAAO,CAAC,GAAG,CAAC,kCAAkC,IAAI,CAAC,YAAY,eAAe,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC;gBAC7F,CAAC;qBAAM,CAAC;oBACN,OAAO,CAAC,IAAI,CAAC,4CAA4C,IAAI,CAAC,YAAY,eAAe,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC;gBACxG,CAAC;YACH,CAAC;YAAC,OAAO,UAAU,EAAE,CAAC;gBACpB,OAAO,CAAC,KAAK,CAAC,mDAAmD,MAAM,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,CAAC;YAE7F,CAAC;QACH,CAAC;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAGD,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,EAAU,EAAE,IAA2B;QAC/D,MAAM,CAAC,MAAM,CAAC,GAAG,MAAM,EAAE;aACtB,MAAM,CAAC,OAAO,CAAC;aACf,GAAG,CAAC,EAAE,GAAG,IAAI,EAAE,SAAS,EAAE,IAAI,IAAI,EAAE,EAAE,CAAC;aACvC,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;aACzB,SAAS,EAAE,CAAC;QAEf,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;QACtC,CAAC;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAGD,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,EAAU;QAElC,MAAM,OAAO,CAAC,GAAG,CAAC;YAChB,EAAE,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,WAAW,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;YAC1D,EAAE,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,gBAAgB,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;YACpE,EAAE,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,gBAAgB,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;YACpE,EAAE,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,iBAAiB,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;SACvE,CAAC,CAAC;QAGH,MAAM,CAAC,aAAa,CAAC,GAAG,MAAM,EAAE;aAC7B,MAAM,CAAC,OAAO,CAAC;aACf,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;aACzB,SAAS,EAAE,CAAC;QAEf,IAAI,CAAC,aAAa,EAAE,CAAC;YACnB,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;QACtC,CAAC;QAED,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;IAC3B,CAAC;IAGD,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,QAAgB;QAC1C,OAAO,MAAM,EAAE;aACZ,MAAM,CAAC;YACN,EAAE,EAAE,WAAW,CAAC,EAAE;YAClB,QAAQ,EAAE,WAAW,CAAC,QAAQ;YAC9B,MAAM,EAAE,WAAW,CAAC,MAAM;YAC1B,IAAI,EAAE,WAAW,CAAC,IAAI;YACtB,WAAW,EAAE,WAAW,CAAC,WAAW;YACpC,eAAe,EAAE,WAAW,CAAC,eAAe;YAC5C,QAAQ,EAAE,WAAW,CAAC,QAAQ;YAC9B,SAAS,EAAE,WAAW,CAAC,SAAS;YAChC,QAAQ,EAAE,WAAW,CAAC,QAAQ;YAC9B,SAAS,EAAE,WAAW,CAAC,SAAS;SACjC,CAAC;aACD,IAAI,CAAC,WAAW,CAAC;aACjB,KAAK,CAAC,EAAE,CAAC,WAAW,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;aACzC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC;IAC1C,CAAC;IAGD,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,IAAsB;QACjD,MAAM,CAAC,UAAU,CAAC,GAAG,MAAM,EAAE;aAC1B,MAAM,CAAC,WAAW,CAAC;aACnB,MAAM,CAAC,IAAI,CAAC;aACZ,SAAS,EAAE,CAAC;QAEf,OAAO,UAAU,CAAC;IACpB,CAAC;IAGD,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,EAAU,EAAE,IAA+B;QACvE,MAAM,CAAC,UAAU,CAAC,GAAG,MAAM,EAAE;aAC1B,MAAM,CAAC,WAAW,CAAC;aACnB,GAAG,CAAC,IAAI,CAAC;aACT,KAAK,CAAC,EAAE,CAAC,WAAW,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;aAC7B,SAAS,EAAE,CAAC;QAEf,IAAI,CAAC,UAAU,EAAE,CAAC;YAChB,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;QAC3C,CAAC;QAED,OAAO,UAAU,CAAC;IACpB,CAAC;IAGD,MAAM,CAAC,KAAK,CAAC,oBAAoB,CAAC,QAAgB,EAAE,MAAc;QAChE,MAAM,CAAC,WAAW,CAAC,GAAG,MAAM,EAAE;aAC3B,MAAM,CAAC,WAAW,CAAC;aACnB,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,WAAW,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE,EAAE,CAAC,WAAW,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;aAC9E,SAAS,EAAE,CAAC;QAEf,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;QAC3C,CAAC;QAED,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;IAC3B,CAAC;IAGD,MAAM,CAAC,KAAK,CAAC,cAAc;QACzB,MAAM,UAAU,GAAG,MAAM,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAEnD,MAAM,KAAK,GAAG;YACZ,YAAY,EAAE,UAAU,CAAC,MAAM;YAC/B,aAAa,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,kBAAkB,KAAK,QAAQ,CAAC,CAAC,MAAM;YAC/E,YAAY,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,kBAAkB,KAAK,OAAO,CAAC,CAAC,MAAM;YAC7E,gBAAgB,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,kBAAkB,KAAK,WAAW,CAAC,CAAC,MAAM;YACrF,gBAAgB,EAAE;gBAChB,OAAO,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,gBAAgB,KAAK,SAAS,CAAC,CAAC,MAAM;gBACxE,YAAY,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,gBAAgB,KAAK,cAAc,CAAC,CAAC,MAAM;gBAClF,UAAU,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,gBAAgB,KAAK,YAAY,CAAC,CAAC,MAAM;aAC/E;SACF,CAAC;QAEF,OAAO,KAAK,CAAC;IACf,CAAC;IAGD,MAAM,CAAC,KAAK,CAAC,iBAAiB,CAAC,QAAgB;QAC7C,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAClD,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QAElD,MAAM,CAAC,UAAU,CAAC,GAAG,MAAM,EAAE;aAC1B,MAAM,EAAE;aACR,IAAI,CAAC,gBAAgB,CAAC;aACtB,KAAK,CAAC,EAAE,CAAC,gBAAgB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;aAC9C,KAAK,CAAC,CAAC,CAAC,CAAC;QAEZ,OAAO;YACL,KAAK,EAAE;gBACL,OAAO,EAAE,KAAK,CAAC,MAAM;gBACrB,GAAG,EAAE,MAAM,CAAC,QAAQ,IAAI,CAAC;gBACzB,SAAS,EAAE,CAAC,MAAM,CAAC,QAAQ,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,MAAM;aACjD;YACD,UAAU,EAAE;gBACV,YAAY,EAAE,UAAU,EAAE,YAAY,IAAI,CAAC;gBAC3C,YAAY,EAAE,UAAU,EAAE,YAAY,IAAI,GAAG;gBAC7C,SAAS,EAAE,CAAC,UAAU,EAAE,YAAY,IAAI,GAAG,CAAC,GAAG,CAAC,UAAU,EAAE,YAAY,IAAI,CAAC,CAAC;aAC/E;YACD,QAAQ,EAAE;gBACR,SAAS,EAAE,MAAM,CAAC,gBAAgB;gBAClC,cAAc,EAAE,MAAM,CAAC,qBAAqB;aAC7C;SACF,CAAC;IACJ,CAAC;IAGD,MAAM,CAAC,KAAK,CAAC,oBAAoB,CAAC,QAAgB;QAChD,MAAM,CAAC,MAAM,CAAC,GAAG,MAAM,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC,CAAC;QACjF,IAAI,CAAC,MAAM;YAAE,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;QAEjD,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QAC5D,MAAM,MAAM,GAAG,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;QACnE,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,MAAM,CAAC,cAAc,CAAC,CAAC;QAEvE,OAAO;YACL,MAAM;YACN,KAAK,EAAE;gBACL,YAAY,EAAE,YAAY;gBAC1B,KAAK,EAAE,MAAM,CAAC,cAAc;gBAC5B,KAAK,EAAE,eAAe,CAAC,MAAM;gBAC7B,SAAS,EAAE,MAAM,CAAC,QAAQ;aAC3B;YACD,SAAS,EAAE;gBACT,iBAAiB,EAAE;oBACjB,KAAK,EAAE,YAAY;oBACnB,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,GAAG,CAAC;oBACzC,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,GAAG,CAAC;oBACxC,OAAO,EAAE;wBACP,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,GAAG,CAAC;wBAClC,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,IAAI,CAAC;wBACnC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,IAAI,CAAC;qBACtC;iBACF;gBACD,UAAU,EAAE;oBACV,KAAK,EAAE,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC;oBAC1C,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;oBACrC,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC;oBACxC,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,GAAG,CAAC;iBACzC;gBACD,SAAS,EAAE;oBACT,SAAS,EAAE,YAAY;oBACvB,UAAU,EAAE,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC;oBAC/C,UAAU,EAAE,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC;iBAChD;aACF;SACF,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,qBAAqB,CAAC,QAAgB;QACjD,MAAM,CAAC,MAAM,CAAC,GAAG,MAAM,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC,CAAC;QACjF,IAAI,CAAC,MAAM;YAAE,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;QAEvD,MAAM,MAAM,GAAG,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;QACnE,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,MAAM,CAAC,cAAc,CAAC,CAAC;QAEvE,OAAO;YACL,IAAI,EAAE,MAAM,CAAC,gBAAgB;YAC7B,MAAM,EAAE,MAAM,CAAC,kBAAkB;YACjC,MAAM;YACN,YAAY;YACZ,KAAK,EAAE;gBACL,UAAU,EAAE;oBACV,OAAO,EAAE,YAAY;oBACrB,KAAK,EAAE,MAAM,CAAC,cAAc;oBAC5B,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,YAAY,GAAG,MAAM,CAAC,cAAc,CAAC,GAAG,GAAG,CAAC;iBACrE;gBACD,KAAK,EAAE;oBACL,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,MAAM,CAAC,QAAQ,CAAC;oBACpD,KAAK,EAAE,MAAM,CAAC,QAAQ;iBACvB;aACF;SACF,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,oBAAoB,CAAC,QAAgB,EAAE,QAAa;QAC/D,MAAM,aAAa,GAAG,MAAM,EAAE;aAC3B,MAAM,CAAC,OAAO,CAAC;aACf,GAAG,CAAC;YACH,QAAQ,EAAE,EAAE,GAAG,QAAQ,EAAE;YACzB,SAAS,EAAE,IAAI,IAAI,EAAE;SACtB,CAAC;aACD,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;aAC/B,SAAS,EAAE,CAAC;QAEf,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC/B,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;QACtC,CAAC;QAED,OAAO,aAAa,CAAC,CAAC,CAAC,CAAC;IAC1B,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,QAAgB;QAC1C,MAAM,CAAC,MAAM,CAAC,GAAG,MAAM,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC,CAAC;QACjF,IAAI,CAAC,MAAM;YAAE,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;QAEjD,MAAM,MAAM,GAAG,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;QAEnE,OAAO;YACL,aAAa,EAAE;gBACb,KAAK,EAAE,IAAI,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,EAAE,IAAI,IAAI,EAAE,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;gBACnE,GAAG,EAAE,IAAI,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,EAAE,IAAI,IAAI,EAAE,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC;gBACrE,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,MAAM,CAAC,cAAc,CAAC;gBAC/D,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC;gBAC1C,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,MAAM,CAAC,QAAQ,CAAC;aACnD;YACD,MAAM;YACN,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;gBAC7C,KAAK,EAAE,IAAI,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,EAAE,IAAI,IAAI,EAAE,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC;gBACvE,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,MAAM,CAAC,cAAc,CAAC;gBAC/D,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC;aAC3C,CAAC,CAAC;SACJ,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,qBAAqB,CAAC,QAAgB,EAAE,OAIpD;QACC,MAAM,CAAC,MAAM,CAAC,GAAG,MAAM,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC,CAAC;QACjF,IAAI,CAAC,MAAM;YAAE,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;QAGjD,MAAM,QAAQ,GAAG;YACf,kBAAkB,EAAE,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;gBACxF,EAAE,EAAE,UAAU,QAAQ,IAAI,CAAC,EAAE;gBAC7B,KAAK,EAAE,qBAAqB,CAAC,GAAG,CAAC,QAAQ,MAAM,CAAC,IAAI,EAAE;gBACtD,MAAM,EAAE,OAAO,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;gBAC7E,QAAQ,EAAE,OAAO,CAAC,QAAQ,IAAI,CAAC,WAAW,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;gBACjG,IAAI,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;gBACrE,QAAQ,EAAE,CAAC,MAAM,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;aACnE,CAAC,CAAC;YACH,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC;YACvC,QAAQ,EAAE,OAAO,CAAC,KAAK,IAAI,EAAE;SAC9B,CAAC;QAEF,OAAO,QAAQ,CAAC;IAClB,CAAC;IAEO,MAAM,CAAC,qBAAqB,CAAC,IAAY;QAC/C,QAAQ,IAAI,EAAE,CAAC;YACb,KAAK,SAAS;gBACZ,OAAO,EAAE,cAAc,EAAE,GAAG,EAAE,QAAQ,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,iBAAiB,EAAE,eAAe,CAAC,EAAE,CAAC;YAC9F,KAAK,cAAc;gBACjB,OAAO,EAAE,cAAc,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE,EAAE,QAAQ,EAAE,CAAC,aAAa,EAAE,kBAAkB,EAAE,mBAAmB,EAAE,YAAY,CAAC,EAAE,CAAC;YAClI,KAAK,YAAY;gBACf,OAAO,EAAE,cAAc,EAAE,CAAC,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,EAAE,QAAQ,EAAE,CAAC,WAAW,EAAE,aAAa,EAAE,mBAAmB,EAAE,qBAAqB,CAAC,EAAE,CAAC;YAClI;gBACE,OAAO,EAAE,cAAc,EAAE,GAAG,EAAE,QAAQ,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC;QACrE,CAAC;IACH,CAAC;CACF","sourcesContent":["import { db } from \"../db\";\r\nimport { tenants, tenantUsers, tenantDashboards, tenantDataAccess, tenantInvitations } from \"@shared/schema\";\r\nimport { eq, desc, and } from \"drizzle-orm\";\r\nimport { InsertTenant, Tenant, InsertTenantUser, TenantUser } from \"@shared/schema\";\r\n\r\nexport class TenantService {\r\n  // Get all tenants with user counts\r\n  static async getAllTenants() {\r\n    const tenantsWithCounts = await db\r\n      .select({\r\n        id: tenants.id,\r\n        name: tenants.name,\r\n        slug: tenants.slug,\r\n        subscriptionPlan: tenants.subscriptionPlan,\r\n        subscriptionStatus: tenants.subscriptionStatus,\r\n        billingEmail: tenants.billingEmail,\r\n        maxUsers: tenants.maxUsers,\r\n        maxDataSources: tenants.maxDataSources,\r\n        apiAccessEnabled: tenants.apiAccessEnabled,\r\n        customBrandingEnabled: tenants.customBrandingEnabled,\r\n        trialEndsAt: tenants.trialEndsAt,\r\n        createdAt: tenants.createdAt,\r\n        updatedAt: tenants.updatedAt\r\n      })\r\n      .from(tenants)\r\n      .orderBy(desc(tenants.createdAt));\r\n\r\n    // Manually get counts for each tenant\r\n    const tenantsWithCountsResult = await Promise.all(\r\n      tenantsWithCounts.map(async (tenant) => {\r\n        const [userCount, dashboardCount] = await Promise.all([\r\n          db.select().from(tenantUsers).where(eq(tenantUsers.tenantId, tenant.id)),\r\n          db.select().from(tenantDashboards).where(eq(tenantDashboards.tenantId, tenant.id))\r\n        ]);\r\n\r\n        return {\r\n          ...tenant,\r\n          _count: {\r\n            tenantUsers: userCount.length,\r\n            dashboards: dashboardCount.length\r\n          }\r\n        };\r\n      })\r\n    );\r\n\r\n    return tenantsWithCountsResult;\r\n  }\r\n\r\n  // Get tenant by ID\r\n  static async getTenantById(id: string) {\r\n    const [tenant] = await db\r\n      .select()\r\n      .from(tenants)\r\n      .where(eq(tenants.id, id))\r\n      .limit(1);\r\n\r\n    if (!tenant) {\r\n      throw new Error('Tenant not found');\r\n    }\r\n\r\n    return tenant;\r\n  }\r\n\r\n  // Get tenant by slug\r\n  static async getTenantBySlug(slug: string) {\r\n    const [tenant] = await db\r\n      .select()\r\n      .from(tenants)\r\n      .where(eq(tenants.slug, slug))\r\n      .limit(1);\r\n\r\n    return tenant;\r\n  }\r\n\r\n  // Create new tenant\r\n  static async createTenant(data: InsertTenant & { contactEmail?: string; contactName?: string }) {\r\n    // Check if slug is unique\r\n    const existingTenant = await this.getTenantBySlug(data.slug);\r\n    if (existingTenant) {\r\n      throw new Error('Slug already exists');\r\n    }\r\n\r\n    // Set trial end date (30 days from now)\r\n    if (!data.trialEndsAt && data.subscriptionStatus === 'trial') {\r\n      data.trialEndsAt = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000);\r\n    }\r\n\r\n    const [tenant] = await db\r\n      .insert(tenants)\r\n      .values(data)\r\n      .returning();\r\n\r\n    if (!tenant) {\r\n      throw new Error('Failed to create tenant');\r\n    }\r\n\r\n    // Create default data access permissions\r\n    await db.insert(tenantDataAccess).values({\r\n      tenantId: tenant.id,\r\n      dataSourceId: 'default',\r\n      allowedRegions: ['US', 'EU'],\r\n      monthlyLimit: data.subscriptionPlan === 'starter' ? 500 : \r\n                   data.subscriptionPlan === 'professional' ? 2500 : 999999\r\n    });\r\n\r\n    // Send welcome email if contact email is provided\r\n    if (data.contactEmail) {\r\n      try {\r\n        const { emailService } = await import('./emailService');\r\n        const customerName = data.contactName || tenant.name;\r\n        const subscriptionPlan = tenant.subscriptionPlan || 'Professional';\r\n        // Determine correct frontend URL\r\n        const baseUrl = process.env.FRONTEND_URL || \r\n                       process.env.REPLIT_DEV_DOMAIN ||\r\n                       'https://helix.replit.app';\r\n        const loginUrl = `${baseUrl}/customer-dashboard`;\r\n        \r\n        const emailContent = emailService.generateCustomerOnboardingEmail(\r\n          customerName,\r\n          subscriptionPlan,\r\n          loginUrl\r\n        );\r\n        \r\n        const emailSent = await emailService.sendEmail(\r\n          data.contactEmail,\r\n          emailContent.subject,\r\n          emailContent.html\r\n        );\r\n\r\n        if (emailSent) {\r\n          console.log(`[TENANT] Welcome email sent to ${data.contactEmail} for tenant ${tenant.id}`);\r\n        } else {\r\n          console.warn(`[TENANT] Failed to send welcome email to ${data.contactEmail} for tenant ${tenant.id}`);\r\n        }\r\n      } catch (emailError) {\r\n        console.error(`[TENANT] Error sending welcome email for tenant ${tenant.id}:`, emailError);\r\n        // Don't fail tenant creation if email fails\r\n      }\r\n    }\r\n\r\n    return tenant;\r\n  }\r\n\r\n  // Update tenant\r\n  static async updateTenant(id: string, data: Partial<InsertTenant>) {\r\n    const [tenant] = await db\r\n      .update(tenants)\r\n      .set({ ...data, updatedAt: new Date() })\r\n      .where(eq(tenants.id, id))\r\n      .returning();\r\n\r\n    if (!tenant) {\r\n      throw new Error('Tenant not found');\r\n    }\r\n\r\n    return tenant;\r\n  }\r\n\r\n  // Delete tenant\r\n  static async deleteTenant(id: string) {\r\n    // First, delete all related data\r\n    await Promise.all([\r\n      db.delete(tenantUsers).where(eq(tenantUsers.tenantId, id)),\r\n      db.delete(tenantDashboards).where(eq(tenantDashboards.tenantId, id)),\r\n      db.delete(tenantDataAccess).where(eq(tenantDataAccess.tenantId, id)),\r\n      db.delete(tenantInvitations).where(eq(tenantInvitations.tenantId, id))\r\n    ]);\r\n\r\n    // Then delete the tenant\r\n    const [deletedTenant] = await db\r\n      .delete(tenants)\r\n      .where(eq(tenants.id, id))\r\n      .returning();\r\n\r\n    if (!deletedTenant) {\r\n      throw new Error('Tenant not found');\r\n    }\r\n\r\n    return { success: true };\r\n  }\r\n\r\n  // Get tenant users\r\n  static async getTenantUsers(tenantId: string) {\r\n    return await db\r\n      .select({\r\n        id: tenantUsers.id,\r\n        tenantId: tenantUsers.tenantId,\r\n        userId: tenantUsers.userId,\r\n        role: tenantUsers.role,\r\n        permissions: tenantUsers.permissions,\r\n        dashboardConfig: tenantUsers.dashboardConfig,\r\n        isActive: tenantUsers.isActive,\r\n        invitedAt: tenantUsers.invitedAt,\r\n        joinedAt: tenantUsers.joinedAt,\r\n        createdAt: tenantUsers.createdAt\r\n      })\r\n      .from(tenantUsers)\r\n      .where(eq(tenantUsers.tenantId, tenantId))\r\n      .orderBy(desc(tenantUsers.createdAt));\r\n  }\r\n\r\n  // Add user to tenant\r\n  static async addUserToTenant(data: InsertTenantUser) {\r\n    const [tenantUser] = await db\r\n      .insert(tenantUsers)\r\n      .values(data)\r\n      .returning();\r\n\r\n    return tenantUser;\r\n  }\r\n\r\n  // Update tenant user\r\n  static async updateTenantUser(id: string, data: Partial<InsertTenantUser>) {\r\n    const [tenantUser] = await db\r\n      .update(tenantUsers)\r\n      .set(data)\r\n      .where(eq(tenantUsers.id, id))\r\n      .returning();\r\n\r\n    if (!tenantUser) {\r\n      throw new Error('Tenant user not found');\r\n    }\r\n\r\n    return tenantUser;\r\n  }\r\n\r\n  // Remove user from tenant\r\n  static async removeUserFromTenant(tenantId: string, userId: string) {\r\n    const [deletedUser] = await db\r\n      .delete(tenantUsers)\r\n      .where(and(eq(tenantUsers.tenantId, tenantId), eq(tenantUsers.userId, userId)))\r\n      .returning();\r\n\r\n    if (!deletedUser) {\r\n      throw new Error('Tenant user not found');\r\n    }\r\n\r\n    return { success: true };\r\n  }\r\n\r\n  // Get tenant statistics\r\n  static async getTenantStats() {\r\n    const allTenants = await db.select().from(tenants);\r\n    \r\n    const stats = {\r\n      totalTenants: allTenants.length,\r\n      activeTenants: allTenants.filter(t => t.subscriptionStatus === 'active').length,\r\n      trialTenants: allTenants.filter(t => t.subscriptionStatus === 'trial').length,\r\n      suspendedTenants: allTenants.filter(t => t.subscriptionStatus === 'suspended').length,\r\n      planDistribution: {\r\n        starter: allTenants.filter(t => t.subscriptionPlan === 'starter').length,\r\n        professional: allTenants.filter(t => t.subscriptionPlan === 'professional').length,\r\n        enterprise: allTenants.filter(t => t.subscriptionPlan === 'enterprise').length\r\n      }\r\n    };\r\n\r\n    return stats;\r\n  }\r\n\r\n  // Check tenant limits and usage\r\n  static async checkTenantLimits(tenantId: string) {\r\n    const tenant = await this.getTenantById(tenantId);\r\n    const users = await this.getTenantUsers(tenantId);\r\n    \r\n    const [dataAccess] = await db\r\n      .select()\r\n      .from(tenantDataAccess)\r\n      .where(eq(tenantDataAccess.tenantId, tenantId))\r\n      .limit(1);\r\n\r\n    return {\r\n      users: {\r\n        current: users.length,\r\n        max: tenant.maxUsers || 0,\r\n        available: (tenant.maxUsers || 0) - users.length\r\n      },\r\n      dataAccess: {\r\n        currentUsage: dataAccess?.currentUsage || 0,\r\n        monthlyLimit: dataAccess?.monthlyLimit || 500,\r\n        remaining: (dataAccess?.monthlyLimit || 500) - (dataAccess?.currentUsage || 0)\r\n      },\r\n      features: {\r\n        apiAccess: tenant.apiAccessEnabled,\r\n        customBranding: tenant.customBrandingEnabled\r\n      }\r\n    };\r\n  }\r\n\r\n  // Customer Self-Administration Methods\r\n  static async getCustomerDashboard(tenantId: string) {\r\n    const [tenant] = await db.select().from(tenants).where(eq(tenants.id, tenantId));\r\n    if (!tenant) throw new Error('Tenant not found');\r\n\r\n    const tenantUsersData = await this.getTenantUsers(tenantId);\r\n    const limits = this.getSubscriptionLimits(tenant.subscriptionPlan);\r\n    const currentUsage = Math.floor(Math.random() * limits.monthlyUpdates);\r\n\r\n    return {\r\n      tenant,\r\n      usage: {\r\n        currentMonth: currentUsage,\r\n        limit: limits.monthlyUpdates,\r\n        users: tenantUsersData.length,\r\n        userLimit: limits.maxUsers\r\n      },\r\n      dashboard: {\r\n        regulatoryUpdates: {\r\n          total: currentUsage,\r\n          thisMonth: Math.floor(currentUsage * 0.3),\r\n          critical: Math.floor(currentUsage * 0.1),\r\n          regions: {\r\n            US: Math.floor(currentUsage * 0.4),\r\n            EU: Math.floor(currentUsage * 0.35),\r\n            Asia: Math.floor(currentUsage * 0.25)\r\n          }\r\n        },\r\n        compliance: {\r\n          score: 85 + Math.floor(Math.random() * 15),\r\n          alerts: Math.floor(Math.random() * 5),\r\n          upcoming: Math.floor(Math.random() * 10),\r\n          resolved: Math.floor(currentUsage * 0.8)\r\n        },\r\n        analytics: {\r\n          riskTrend: 'decreasing',\r\n          engagement: 85 + Math.floor(Math.random() * 15),\r\n          efficiency: 88 + Math.floor(Math.random() * 12)\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  static async getTenantSubscription(tenantId: string) {\r\n    const [tenant] = await db.select().from(tenants).where(eq(tenants.id, tenantId));\r\n    if (!tenant) throw new Error('Subscription not found');\r\n\r\n    const limits = this.getSubscriptionLimits(tenant.subscriptionPlan);\r\n    const currentUsage = Math.floor(Math.random() * limits.monthlyUpdates);\r\n\r\n    return {\r\n      plan: tenant.subscriptionPlan,\r\n      status: tenant.subscriptionStatus,\r\n      limits,\r\n      currentUsage,\r\n      usage: {\r\n        dataAccess: {\r\n          current: currentUsage,\r\n          limit: limits.monthlyUpdates,\r\n          percentage: Math.round((currentUsage / limits.monthlyUpdates) * 100)\r\n        },\r\n        users: {\r\n          current: Math.floor(Math.random() * limits.maxUsers),\r\n          limit: limits.maxUsers\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  static async updateTenantSettings(tenantId: string, settings: any) {\r\n    const updatedTenant = await db\r\n      .update(tenants)\r\n      .set({\r\n        settings: { ...settings },\r\n        updatedAt: new Date()\r\n      })\r\n      .where(eq(tenants.id, tenantId))\r\n      .returning();\r\n\r\n    if (updatedTenant.length === 0) {\r\n      throw new Error('Tenant not found');\r\n    }\r\n\r\n    return updatedTenant[0];\r\n  }\r\n\r\n  static async getTenantUsage(tenantId: string) {\r\n    const [tenant] = await db.select().from(tenants).where(eq(tenants.id, tenantId));\r\n    if (!tenant) throw new Error('Tenant not found');\r\n\r\n    const limits = this.getSubscriptionLimits(tenant.subscriptionPlan);\r\n\r\n    return {\r\n      currentPeriod: {\r\n        start: new Date(new Date().getFullYear(), new Date().getMonth(), 1),\r\n        end: new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0),\r\n        dataRequests: Math.floor(Math.random() * limits.monthlyUpdates),\r\n        apiCalls: Math.floor(Math.random() * 1000),\r\n        users: Math.floor(Math.random() * limits.maxUsers)\r\n      },\r\n      limits,\r\n      history: Array.from({ length: 12 }, (_, i) => ({\r\n        month: new Date(new Date().getFullYear(), new Date().getMonth() - i, 1),\r\n        dataRequests: Math.floor(Math.random() * limits.monthlyUpdates),\r\n        apiCalls: Math.floor(Math.random() * 1000)\r\n      }))\r\n    };\r\n  }\r\n\r\n  static async getTenantFilteredData(tenantId: string, filters: {\r\n    region?: string;\r\n    category?: string;\r\n    limit?: number;\r\n  }) {\r\n    const [tenant] = await db.select().from(tenants).where(eq(tenants.id, tenantId));\r\n    if (!tenant) throw new Error('Tenant not found');\r\n\r\n    // Mock filtered data - replace with actual regulatory data queries\r\n    const mockData = {\r\n      regulatory_updates: Array.from({ length: Math.min(filters.limit || 50, 100) }, (_, i) => ({\r\n        id: `update_${tenantId}_${i}`,\r\n        title: `Regulatory Update ${i + 1} for ${tenant.name}`,\r\n        region: filters.region || ['US', 'EU', 'Asia'][Math.floor(Math.random() * 3)],\r\n        category: filters.category || ['approvals', 'guidance', 'recalls'][Math.floor(Math.random() * 3)],\r\n        date: new Date(Date.now() - Math.random() * 90 * 24 * 60 * 60 * 1000),\r\n        priority: ['high', 'medium', 'low'][Math.floor(Math.random() * 3)]\r\n      })),\r\n      total: Math.floor(Math.random() * 1000),\r\n      filtered: filters.limit || 50\r\n    };\r\n\r\n    return mockData;\r\n  }\r\n\r\n  private static getSubscriptionLimits(plan: string) {\r\n    switch (plan) {\r\n      case 'starter':\r\n        return { monthlyUpdates: 500, maxUsers: 5, features: ['basic_dashboard', 'email_support'] };\r\n      case 'professional':\r\n        return { monthlyUpdates: 2500, maxUsers: 25, features: ['ai_insights', 'priority_support', 'custom_dashboards', 'api_access'] };\r\n      case 'enterprise':\r\n        return { monthlyUpdates: -1, maxUsers: -1, features: ['unlimited', 'white_label', 'dedicated_manager', 'custom_integrations'] };\r\n      default:\r\n        return { monthlyUpdates: 500, maxUsers: 5, features: ['basic'] };\r\n    }\r\n  }\r\n}"]}