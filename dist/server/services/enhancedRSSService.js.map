{"version":3,"file":"enhancedRSSService.js","sourceRoot":"","sources":["../../../server/services/enhancedRSSService.ts"],"names":[],"mappings":"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","sourcesContent":["import { storage } from '../storage';\r\nimport axios from 'axios';\r\n\r\ninterface RSSFeed {\r\n  url: string;\r\n  name: string;\r\n  authority: string;\r\n  region: string;\r\n  category: string;\r\n  lastChecked?: string;\r\n  status: 'active' | 'error' | 'pending';\r\n  itemCount?: number;\r\n}\r\n\r\ninterface RSSItem {\r\n  title: string;\r\n  link: string;\r\n  description: string;\r\n  pubDate: string;\r\n  guid: string;\r\n  category?: string[];\r\n  author?: string;\r\n}\r\n\r\ninterface FeedParseResult {\r\n  success: boolean;\r\n  feedName: string;\r\n  itemsFound: number;\r\n  newItems: number;\r\n  error?: string;\r\n}\r\n\r\nexport class EnhancedRSSService {\r\n  private feeds: RSSFeed[] = [\r\n    {\r\n      url: 'https://www.fda.gov/about-fda/contact-fda/stay-informed/rss-feeds-fda/rss.xml',\r\n      name: 'FDA News & Updates',\r\n      authority: 'FDA',\r\n      region: 'United States',\r\n      category: 'regulatory',\r\n      status: 'active'\r\n    },\r\n    {\r\n      url: 'https://www.ema.europa.eu/en/rss.xml',\r\n      name: 'EMA News',\r\n      authority: 'EMA',\r\n      region: 'European Union',\r\n      category: 'regulatory',\r\n      status: 'active'\r\n    },\r\n    {\r\n      url: 'https://www.bfarm.de/SharedDocs/Downloads/DE/Service/RSS/rss_aktuelles.xml',\r\n      name: 'BfArM Aktuelles',\r\n      authority: 'BfArM',\r\n      region: 'Germany',\r\n      category: 'regulatory',\r\n      status: 'active'\r\n    },\r\n    {\r\n      url: 'https://www.swissmedic.ch/swissmedic/de/home/news.rss.html',\r\n      name: 'Swissmedic News',\r\n      authority: 'Swissmedic',\r\n      region: 'Switzerland',\r\n      category: 'regulatory',\r\n      status: 'active'\r\n    },\r\n    {\r\n      url: 'https://www.mhra.gov.uk/news-and-events/news/rss.xml',\r\n      name: 'MHRA News',\r\n      authority: 'MHRA',\r\n      region: 'United Kingdom',\r\n      category: 'regulatory',\r\n      status: 'active'\r\n    },\r\n    {\r\n      url: 'https://www.tga.gov.au/news/safety-alerts.rss',\r\n      name: 'TGA Safety Alerts',\r\n      authority: 'TGA',\r\n      region: 'Australia',\r\n      category: 'safety',\r\n      status: 'active'\r\n    }\r\n  ];\r\n\r\n  async monitorAllFeeds(): Promise<{ success: boolean; results: FeedParseResult[] }> {\r\n    try {\r\n      console.log('[Enhanced RSS] Starting monitoring of all RSS feeds...');\r\n      \r\n      const results = await Promise.allSettled(\r\n        this.feeds.map(feed => this.processFeed(feed))\r\n      );\r\n      \r\n      const feedResults: FeedParseResult[] = results.map((result, index) => {\r\n        const feed = this.feeds[index];\r\n        \r\n        if (result.status === 'fulfilled') {\r\n          return result.value;\r\n        } else {\r\n          return {\r\n            success: false,\r\n            feedName: feed.name,\r\n            itemsFound: 0,\r\n            newItems: 0,\r\n            error: result.reason?.message || 'Unknown error'\r\n          };\r\n        }\r\n      });\r\n      \r\n      const successfulFeeds = feedResults.filter(r => r.success).length;\r\n      const totalNewItems = feedResults.reduce((sum, r) => sum + r.newItems, 0);\r\n      \r\n      console.log(`[Enhanced RSS] Monitoring completed: ${successfulFeeds}/${this.feeds.length} feeds successful, ${totalNewItems} new items`);\r\n      \r\n      return {\r\n        success: successfulFeeds > 0,\r\n        results: feedResults\r\n      };\r\n    } catch (error) {\r\n      console.error('[Enhanced RSS] Error monitoring feeds:', error);\r\n      return {\r\n        success: false,\r\n        results: []\r\n      };\r\n    }\r\n  }\r\n\r\n  private async processFeed(feed: RSSFeed): Promise<FeedParseResult> {\r\n    try {\r\n      console.log(`[Enhanced RSS] Processing feed: ${feed.name}`);\r\n      \r\n      // Simulate RSS feed processing with realistic regulatory content\r\n      const simulatedItems = this.generateSimulatedRSSItems(feed);\r\n      \r\n      let newItemsCount = 0;\r\n      \r\n      for (const item of simulatedItems) {\r\n        const regulatoryUpdate = this.transformRSSToRegulatory(item, feed);\r\n        \r\n        // Check if item already exists\r\n        const exists = await this.checkIfItemExists(regulatoryUpdate);\r\n        if (!exists) {\r\n          await storage.createRegulatoryUpdate(regulatoryUpdate);\r\n          newItemsCount++;\r\n        }\r\n      }\r\n      \r\n      // Update feed status\r\n      feed.lastChecked = new Date().toISOString();\r\n      feed.itemCount = simulatedItems.length;\r\n      feed.status = 'active';\r\n      \r\n      return {\r\n        success: true,\r\n        feedName: feed.name,\r\n        itemsFound: simulatedItems.length,\r\n        newItems: newItemsCount\r\n      };\r\n    } catch (error: any) {\r\n      console.error(`[Enhanced RSS] Error processing feed ${feed.name}:`, error);\r\n      feed.status = 'error';\r\n      \r\n      return {\r\n        success: false,\r\n        feedName: feed.name,\r\n        itemsFound: 0,\r\n        newItems: 0,\r\n        error: error.message\r\n      };\r\n    }\r\n  }\r\n\r\n  // ALLE MOCK-DATEN ENTFERNT - Keine RSS-Item-Simulation mehr\r\n  private generateSimulatedRSSItems(feed: RSSFeed): RSSItem[] {\r\n    console.log(`[Enhanced RSS] MOCK DATA DELETED - No simulated RSS items for ${feed.name}`);\r\n    return [];\r\n  }\r\n\r\n  private getRSSItemTemplates(authority: string): any[] {\r\n    const templates = {\r\n      FDA: [\r\n        {\r\n          title: 'FDA Approves New Medical Device for Cardiac Monitoring',\r\n          link: 'https://www.fda.gov/news-events/press-announcements/fda-approves-new-cardiac-device',\r\n          description: 'The FDA has approved a new implantable cardiac monitoring device that provides continuous heart rhythm monitoring for patients with arrhythmias.',\r\n          category: ['medical-devices', 'approvals', 'cardiac']\r\n        },\r\n        {\r\n          title: 'FDA Issues Safety Communication on Surgical Robots',\r\n          link: 'https://www.fda.gov/medical-devices/safety-communications/fda-issues-safety-communication-surgical-robots',\r\n          description: 'FDA is informing healthcare providers and patients about potential risks associated with robotic surgical systems.',\r\n          category: ['safety', 'surgical-devices', 'communications']\r\n        },\r\n        {\r\n          title: 'FDA Clears AI-Powered Diagnostic Software',\r\n          link: 'https://www.fda.gov/news-events/press-announcements/fda-clears-ai-diagnostic-software',\r\n          description: 'New artificial intelligence software cleared for detecting retinal diseases in diabetic patients.',\r\n          category: ['ai', 'diagnostics', 'clearances']\r\n        }\r\n      ],\r\n      EMA: [\r\n        {\r\n          title: 'EMA Publishes New Guidelines for Medical Device Clinical Trials',\r\n          link: 'https://www.ema.europa.eu/en/news/ema-publishes-new-guidelines-medical-device-clinical-trials',\r\n          description: 'New guidelines provide clarity on clinical trial requirements for medical devices under MDR.',\r\n          category: ['guidelines', 'clinical-trials', 'mdr']\r\n        },\r\n        {\r\n          title: 'EMA Safety Review of Implantable Cardiac Devices',\r\n          link: 'https://www.ema.europa.eu/en/news/safety-review-implantable-cardiac-devices',\r\n          description: 'Ongoing safety review of implantable cardioverter defibrillators following reports of device malfunctions.',\r\n          category: ['safety', 'cardiac-devices', 'reviews']\r\n        }\r\n      ],\r\n      BfArM: [\r\n        {\r\n          title: 'BfArM veröffentlicht neue Leitlinien für Medizinprodukte',\r\n          link: 'https://www.bfarm.de/SharedDocs/Pressemitteilungen/DE/2024/pm-neue-leitlinien.html',\r\n          description: 'Neue Leitlinien für die Bewertung von Medizinprodukten der Klasse III veröffentlicht.',\r\n          category: ['leitlinien', 'medizinprodukte', 'klasse-iii']\r\n        }\r\n      ],\r\n      Swissmedic: [\r\n        {\r\n          title: 'Swissmedic Issues New Guidance on In Vitro Diagnostics',\r\n          link: 'https://www.swissmedic.ch/news/guidance-ivd-2024',\r\n          description: 'Updated guidance document for in vitro diagnostic medical devices.',\r\n          category: ['guidance', 'ivd', 'diagnostics']\r\n        }\r\n      ],\r\n      MHRA: [\r\n        {\r\n          title: 'MHRA Publishes Post-Market Surveillance Guidelines',\r\n          link: 'https://www.gov.uk/guidance/mhra-post-market-surveillance-guidelines',\r\n          description: 'New guidelines for post-market surveillance of medical devices in the UK.',\r\n          category: ['post-market', 'surveillance', 'guidelines']\r\n        }\r\n      ],\r\n      TGA: [\r\n        {\r\n          title: 'TGA Safety Alert: Recall of Defective Insulin Pumps',\r\n          link: 'https://www.tga.gov.au/news/safety-alerts/tga-safety-alert-insulin-pumps',\r\n          description: 'Voluntary recall of insulin pump devices due to potential dosing errors.',\r\n          category: ['safety-alert', 'recall', 'insulin-pumps']\r\n        }\r\n      ]\r\n    };\r\n    \r\n    return templates[authority as keyof typeof templates] || [];\r\n  }\r\n\r\n  private transformRSSToRegulatory(item: RSSItem, feed: RSSFeed): any {\r\n    return {\r\n      id: `rss-${feed.authority.toLowerCase()}-${Date.now()}-${crypto.randomUUID().substr(0, 9)}`,\r\n      title: item.title,\r\n      content: item.description,\r\n      authority: feed.authority,\r\n      region: feed.region,\r\n      category: feed.category,\r\n      type: 'rss_update',\r\n      published_at: item.pubDate,\r\n      priority: this.determinePriority(item, feed),\r\n      tags: this.extractTags(item, feed),\r\n      url: item.link,\r\n      document_type: 'rss_feed_item',\r\n      language: feed.region === 'Germany' ? 'de' : 'en',\r\n      source: `RSS: ${feed.name}`\r\n    };\r\n  }\r\n\r\n  private determinePriority(item: RSSItem, feed: RSSFeed): 'low' | 'medium' | 'high' | 'critical' {\r\n    const title = item.title.toLowerCase();\r\n    const description = item.description.toLowerCase();\r\n    \r\n    // Critical priority indicators\r\n    if (title.includes('recall') || title.includes('safety alert') || \r\n        title.includes('urgent') || description.includes('immediate action')) {\r\n      return 'critical';\r\n    }\r\n    \r\n    // High priority indicators\r\n    if (title.includes('approval') || title.includes('clearance') || \r\n        title.includes('guidance') || title.includes('guidelines')) {\r\n      return 'high';\r\n    }\r\n    \r\n    // Medium priority for regulatory updates\r\n    if (feed.category === 'regulatory') {\r\n      return 'medium';\r\n    }\r\n    \r\n    return 'low';\r\n  }\r\n\r\n  private extractTags(item: RSSItem, feed: RSSFeed): string[] {\r\n    const tags = [feed.authority.toLowerCase(), 'rss_feed'];\r\n    \r\n    // Add category-based tags\r\n    if (item.category) {\r\n      tags.push(...item.category);\r\n    }\r\n    \r\n    // Add content-based tags\r\n    const title = item.title.toLowerCase();\r\n    const description = item.description.toLowerCase();\r\n    \r\n    if (title.includes('approval') || description.includes('approval')) tags.push('approval');\r\n    if (title.includes('recall') || description.includes('recall')) tags.push('recall');\r\n    if (title.includes('guidance') || description.includes('guidance')) tags.push('guidance');\r\n    if (title.includes('safety') || description.includes('safety')) tags.push('safety');\r\n    if (title.includes('device') || description.includes('device')) tags.push('medical_device');\r\n    if (title.includes('software') || description.includes('software')) tags.push('software');\r\n    if (title.includes('ai') || description.includes('artificial intelligence')) tags.push('ai');\r\n    \r\n    return tags;\r\n  }\r\n\r\n  private async checkIfItemExists(regulatoryUpdate: any): Promise<boolean> {\r\n    try {\r\n      const allUpdates = await storage.getAllRegulatoryUpdates();\r\n      return allUpdates.some(existing => \r\n        existing.url === regulatoryUpdate.url || \r\n        (existing.title === regulatoryUpdate.title && existing.authority === regulatoryUpdate.authority)\r\n      );\r\n    } catch (error) {\r\n      console.error('[Enhanced RSS] Error checking for existing item:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async getFeedStatus(): Promise<RSSFeed[]> {\r\n    return this.feeds.map(feed => ({\r\n      ...feed,\r\n      lastChecked: feed.lastChecked || 'Never',\r\n      itemCount: feed.itemCount || 0\r\n    }));\r\n  }\r\n\r\n  async syncSpecificFeed(feedName: string): Promise<FeedParseResult> {\r\n    const feed = this.feeds.find(f => f.name === feedName);\r\n    if (!feed) {\r\n      throw new Error(`Feed not found: ${feedName}`);\r\n    }\r\n    \r\n    return this.processFeed(feed);\r\n  }\r\n}"]}