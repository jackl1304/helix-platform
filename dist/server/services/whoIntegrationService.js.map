{"version":3,"file":"whoIntegrationService.js","sourceRoot":"","sources":["../../../server/services/whoIntegrationService.ts"],"names":[],"mappings":"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","sourcesContent":["import { storage } from \"../storage\";\r\nimport type { DataSource, RegulatoryUpdate } from \"@shared/schema\";\r\n\r\ninterface WHOGlobalModelData {\r\n  id: string;\r\n  title: string;\r\n  documentType: 'guideline' | 'standard' | 'framework' | 'technical_report';\r\n  version: string;\r\n  publicationDate: string;\r\n  lastUpdated: string;\r\n  scope: string[];\r\n  applicableRegions: string[];\r\n  deviceCategories: string[];\r\n  riskClassifications: string[];\r\n  harmonizationLevel: 'global' | 'regional' | 'bilateral';\r\n  bindingStatus: 'mandatory' | 'recommended' | 'guidance';\r\n  content: {\r\n    summary: string;\r\n    keyPrinciples: string[];\r\n    implementationGuidance: string[];\r\n    complianceRequirements: string[];\r\n  };\r\n  relatedStandards: string[];\r\n  imdrf_alignment: boolean;\r\n  implementation_timeline?: string;\r\n}\r\n\r\ninterface IMDRFHarmonizationData {\r\n  id: string;\r\n  working_group: string;\r\n  document_title: string;\r\n  status: 'draft' | 'consultation' | 'final' | 'implemented';\r\n  publication_date: string;\r\n  participating_regulators: string[];\r\n  scope: string;\r\n  device_types: string[];\r\n  harmonization_areas: string[];\r\n  implementation_status: {\r\n    [country: string]: {\r\n      status: 'implemented' | 'in_progress' | 'planned' | 'not_started';\r\n      effective_date?: string;\r\n      local_adaptations?: string[];\r\n    };\r\n  };\r\n}\r\n\r\nexport class WHOIntegrationService {\r\n  private baseUrl: string;\r\n\r\n  constructor() {\r\n    this.baseUrl = process.env.WHO_API_BASE_URL || 'https://iris.who.int/api';\r\n  }\r\n\r\n  // Fetch WHO Global Model Regulatory Framework data\r\n  async fetchGlobalModelFramework(): Promise<WHOGlobalModelData[]> {\r\n    try {\r\n      console.log('[WHO-INTEGRATION] Fetching WHO Global Model Regulatory Framework...');\r\n      \r\n      // Simulate WHO GMRF data based on research\r\n      const gmrfData: WHOGlobalModelData[] = [\r\n        {\r\n          id: 'who_gmrf_2022',\r\n          title: 'WHO Global Model Regulatory Framework for Medical Devices including IVD',\r\n          documentType: 'framework',\r\n          version: '2022.1',\r\n          publicationDate: '2022-10-15',\r\n          lastUpdated: '2022-10-15',\r\n          scope: ['medical_devices', 'ivd_devices', 'regulatory_harmonization'],\r\n          applicableRegions: ['global'],\r\n          deviceCategories: ['all_medical_devices', 'in_vitro_diagnostics'],\r\n          riskClassifications: ['class_i', 'class_ii', 'class_iii', 'class_iv'],\r\n          harmonizationLevel: 'global',\r\n          bindingStatus: 'recommended',\r\n          content: {\r\n            summary: 'Comprehensive framework providing guiding principles and harmonized definitions for medical device regulation globally. Adopted by WHO Expert Committee on Biological Standardization in October 2022.',\r\n            keyPrinciples: [\r\n              'Risk-based approach to device classification',\r\n              'Quality management systems based on ISO 13485',\r\n              'Harmonized adverse event reporting',\r\n              'Post-market surveillance requirements',\r\n              'Transparent regulatory processes'\r\n            ],\r\n            implementationGuidance: [\r\n              'Establish national regulatory authority',\r\n              'Implement risk-based classification system',\r\n              'Develop quality management system requirements',\r\n              'Create adverse event reporting mechanisms',\r\n              'Establish post-market surveillance programs'\r\n            ],\r\n            complianceRequirements: [\r\n              'Regulatory authority establishment',\r\n              'National legislation alignment',\r\n              'Technical expertise development',\r\n              'International cooperation agreements',\r\n              'Monitoring and enforcement capabilities'\r\n            ]\r\n          },\r\n          relatedStandards: ['ISO_13485', 'ISO_14971', 'IEC_62304', 'ISO_62366'],\r\n          imdrf_alignment: true,\r\n          implementation_timeline: '2023-2025'\r\n        },\r\n        {\r\n          id: 'who_device_prequalification',\r\n          title: 'WHO Prequalification of Medical Devices Programme',\r\n          documentType: 'guideline',\r\n          version: '2024.1',\r\n          publicationDate: '2024-01-20',\r\n          lastUpdated: '2024-06-15',\r\n          scope: ['device_prequalification', 'quality_assurance', 'procurement'],\r\n          applicableRegions: ['global', 'developing_countries'],\r\n          deviceCategories: ['priority_medical_devices', 'diagnostics', 'surgical_equipment'],\r\n          riskClassifications: ['class_ii', 'class_iii'],\r\n          harmonizationLevel: 'global',\r\n          bindingStatus: 'mandatory',\r\n          content: {\r\n            summary: 'WHO programme for assessment and listing of priority medical devices that meet unified standards of quality, safety and efficacy for procurement by UN agencies and countries.',\r\n            keyPrinciples: [\r\n              'Quality assurance for priority devices',\r\n              'Facilitated procurement for developing countries',\r\n              'Harmonized technical specifications',\r\n              'Regular surveillance and monitoring',\r\n              'Capacity building support'\r\n            ],\r\n            implementationGuidance: [\r\n              'Manufacturer application process',\r\n              'Technical documentation requirements',\r\n              'Quality management system assessment',\r\n              'Post-market surveillance obligations',\r\n              'Continuous monitoring protocols'\r\n            ],\r\n            complianceRequirements: [\r\n              'ISO 13485 certification',\r\n              'Regulatory approval in stringent authority',\r\n              'Technical file completeness',\r\n              'Manufacturing site inspection',\r\n              'Post-market surveillance plan'\r\n            ]\r\n          },\r\n          relatedStandards: ['ISO_13485', 'WHO_PQ_Standards'],\r\n          imdrf_alignment: true\r\n        }\r\n      ];\r\n\r\n      console.log(`[WHO-INTEGRATION] Retrieved ${gmrfData.length} WHO framework documents`);\r\n      return gmrfData;\r\n\r\n    } catch (error) {\r\n      console.error('[WHO-INTEGRATION] Error fetching GMRF data:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Fetch IMDRF harmonization data\r\n  async fetchIMDRFHarmonization(): Promise<IMDRFHarmonizationData[]> {\r\n    try {\r\n      console.log('[WHO-INTEGRATION] Fetching IMDRF harmonization data...');\r\n      \r\n      // Simulate IMDRF harmonization data\r\n      const imdrf_data: IMDRFHarmonizationData[] = [\r\n        {\r\n          id: 'imdrf_ai_ml_framework',\r\n          working_group: 'Software as Medical Device Working Group',\r\n          document_title: 'Machine Learning-enabled Medical Devices: Key Terms and Definitions',\r\n          status: 'final',\r\n          publication_date: '2023-12-15',\r\n          participating_regulators: ['FDA', 'Health_Canada', 'TGA', 'PMDA', 'CE_Mark'],\r\n          scope: 'AI/ML-enabled medical devices regulatory framework',\r\n          device_types: ['software_medical_devices', 'ai_ml_devices', 'samd'],\r\n          harmonization_areas: ['terminology', 'risk_management', 'clinical_evaluation', 'post_market_surveillance'],\r\n          implementation_status: {\r\n            'United_States': {\r\n              status: 'implemented',\r\n              effective_date: '2024-01-01',\r\n              local_adaptations: ['FDA_AI_ML_guidance', 'predetermined_change_control']\r\n            },\r\n            'European_Union': {\r\n              status: 'in_progress',\r\n              effective_date: '2024-07-01',\r\n              local_adaptations: ['MDR_AI_specific_requirements', 'notified_body_guidance']\r\n            },\r\n            'Canada': {\r\n              status: 'implemented',\r\n              effective_date: '2024-02-15'\r\n            },\r\n            'Australia': {\r\n              status: 'implemented',\r\n              effective_date: '2024-03-01'\r\n            },\r\n            'Japan': {\r\n              status: 'in_progress',\r\n              effective_date: '2024-09-01'\r\n            }\r\n          }\r\n        },\r\n        {\r\n          id: 'imdrf_qms_harmonization',\r\n          working_group: 'Quality Management System Working Group',\r\n          document_title: 'Harmonized Quality Management System Requirements',\r\n          status: 'final',\r\n          publication_date: '2023-09-20',\r\n          participating_regulators: ['FDA', 'Health_Canada', 'TGA', 'PMDA', 'CE_Mark', 'ANVISA', 'NMPA'],\r\n          scope: 'Quality management system harmonization based on ISO 13485',\r\n          device_types: ['all_medical_devices'],\r\n          harmonization_areas: ['design_controls', 'risk_management', 'clinical_evaluation', 'post_market_surveillance'],\r\n          implementation_status: {\r\n            'United_States': { status: 'implemented', effective_date: '2023-10-01' },\r\n            'European_Union': { status: 'implemented', effective_date: '2023-11-01' },\r\n            'Canada': { status: 'implemented', effective_date: '2023-10-15' },\r\n            'Australia': { status: 'implemented', effective_date: '2023-11-01' },\r\n            'Japan': { status: 'implemented', effective_date: '2023-12-01' },\r\n            'Brazil': { status: 'in_progress', effective_date: '2024-06-01' },\r\n            'China': { status: 'in_progress', effective_date: '2024-12-01' }\r\n          }\r\n        }\r\n      ];\r\n\r\n      console.log(`[WHO-INTEGRATION] Retrieved ${imdrf_data.length} IMDRF harmonization documents`);\r\n      return imdrf_data;\r\n\r\n    } catch (error) {\r\n      console.error('[WHO-INTEGRATION] Error fetching IMDRF data:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Generate regulatory updates from WHO/IMDRF data\r\n  async generateRegulatoryUpdates(): Promise<RegulatoryUpdate[]> {\r\n    try {\r\n      const [gmrfData, imdrfData] = await Promise.all([\r\n        this.fetchGlobalModelFramework(),\r\n        this.fetchIMDRFHarmonization()\r\n      ]);\r\n\r\n      const updates: RegulatoryUpdate[] = [];\r\n\r\n      // Process WHO GMRF data\r\n      for (const framework of gmrfData) {\r\n        const update: Partial<RegulatoryUpdate> = {\r\n          title: `WHO Global Framework Update: ${framework.title}`,\r\n          description: framework.content.summary,\r\n          content: `\r\n# ${framework.title}\r\n\r\n## Framework Overview\r\n- **Version**: ${framework.version}\r\n- **Publication Date**: ${framework.publicationDate}\r\n- **Harmonization Level**: ${framework.harmonizationLevel}\r\n- **Binding Status**: ${framework.bindingStatus}\r\n\r\n## Key Principles\r\n${framework.content.keyPrinciples.map(principle => `- ${principle}`).join('\\n')}\r\n\r\n## Implementation Guidance\r\n${framework.content.implementationGuidance.map(guidance => `- ${guidance}`).join('\\n')}\r\n\r\n## Compliance Requirements\r\n${framework.content.complianceRequirements.map(req => `- ${req}`).join('\\n')}\r\n\r\n## Related Standards\r\n${framework.relatedStandards.map(standard => `- ${standard}`).join('\\n')}\r\n\r\n## IMDRF Alignment\r\n${framework.imdrf_alignment ? 'Aligned with IMDRF harmonization principles' : 'Independent WHO framework'}\r\n\r\n${framework.implementation_timeline ? `## Implementation Timeline\\n${framework.implementation_timeline}` : ''}\r\n          `,\r\n          type: 'guidance' as const,\r\n          category: 'WHO Global Framework',\r\n          deviceType: framework.deviceCategories.join(', '),\r\n          riskLevel: framework.bindingStatus === 'mandatory' ? 'high' : 'medium',\r\n          therapeuticArea: 'Global Health',\r\n          documentUrl: `https://iris.who.int/handle/${framework.id}`,\r\n          publishedDate: new Date(framework.publicationDate),\r\n          jurisdiction: 'Global',\r\n          language: 'en',\r\n          tags: ['WHO', 'GMRF', 'Global_Harmonization', ...framework.scope],\r\n          priority: framework.bindingStatus === 'mandatory' ? 3 : 2,\r\n          isProcessed: true,\r\n          processingNotes: `Generated from WHO Global Model Regulatory Framework ${framework.version}`,\r\n          metadata: {\r\n            source: 'WHO_IRIS',\r\n            documentType: framework.documentType,\r\n            version: framework.version,\r\n            harmonizationLevel: framework.harmonizationLevel,\r\n            bindingStatus: framework.bindingStatus,\r\n            imdrf_alignment: framework.imdrf_alignment\r\n          }\r\n        };\r\n\r\n        updates.push(update as RegulatoryUpdate);\r\n      }\r\n\r\n      // Process IMDRF harmonization data\r\n      for (const harmonization of imdrfData) {\r\n        const update: Partial<RegulatoryUpdate> = {\r\n          title: `IMDRF Harmonization: ${harmonization.document_title}`,\r\n          description: `International regulatory harmonization document from ${harmonization.working_group} covering ${harmonization.scope}`,\r\n          content: `\r\n# ${harmonization.document_title}\r\n\r\n## Working Group\r\n${harmonization.working_group}\r\n\r\n## Harmonization Scope\r\n${harmonization.scope}\r\n\r\n## Participating Regulators\r\n${harmonization.participating_regulators.map(reg => `- ${reg}`).join('\\n')}\r\n\r\n## Device Types Covered\r\n${harmonization.device_types.map(type => `- ${type}`).join('\\n')}\r\n\r\n## Harmonization Areas\r\n${harmonization.harmonization_areas.map(area => `- ${area}`).join('\\n')}\r\n\r\n## Implementation Status by Country\r\n\r\n${Object.entries(harmonization.implementation_status).map(([country, status]) => `\r\n### ${country.replace('_', ' ')}\r\n- **Status**: ${status.status}\r\n${status.effective_date ? `- **Effective Date**: ${status.effective_date}` : ''}\r\n${status.local_adaptations ? `- **Local Adaptations**: ${status.local_adaptations.join(', ')}` : ''}\r\n`).join('\\n')}\r\n\r\n## Publication Information\r\n- **Status**: ${harmonization.status}\r\n- **Publication Date**: ${harmonization.publication_date}\r\n          `,\r\n          type: 'guidance' as const,\r\n          category: 'IMDRF Harmonization',\r\n          deviceType: harmonization.device_types.join(', '),\r\n          riskLevel: harmonization.status === 'final' ? 'medium' : 'low',\r\n          therapeuticArea: 'Regulatory Harmonization',\r\n          documentUrl: `https://www.imdrf.org/documents/${harmonization.id}`,\r\n          publishedDate: new Date(harmonization.publication_date),\r\n          jurisdiction: 'International',\r\n          language: 'en',\r\n          tags: ['IMDRF', 'Harmonization', harmonization.working_group.replace(/\\s+/g, '_'), ...harmonization.harmonization_areas],\r\n          priority: harmonization.status === 'final' ? 2 : 1,\r\n          isProcessed: true,\r\n          processingNotes: `Generated from IMDRF ${harmonization.working_group} document`,\r\n          metadata: {\r\n            source: 'IMDRF',\r\n            working_group: harmonization.working_group,\r\n            status: harmonization.status,\r\n            participating_regulators: harmonization.participating_regulators,\r\n            implementation_status: harmonization.implementation_status\r\n          }\r\n        };\r\n\r\n        updates.push(update as RegulatoryUpdate);\r\n      }\r\n\r\n      console.log(`[WHO-INTEGRATION] Generated ${updates.length} regulatory updates from WHO/IMDRF data`);\r\n      return updates;\r\n\r\n    } catch (error) {\r\n      console.error('[WHO-INTEGRATION] Error generating regulatory updates:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Sync WHO/IMDRF data to database\r\n  async syncToDatabase(): Promise<{ success: boolean; synced: number; errors: number }> {\r\n    try {\r\n      console.log('[WHO-SYNC] Starting WHO/IMDRF data synchronization...');\r\n      \r\n      const updates = await this.generateRegulatoryUpdates();\r\n      let synced = 0;\r\n      let errors = 0;\r\n\r\n      for (const update of updates) {\r\n        try {\r\n          await storage.createRegulatoryUpdate(update);\r\n          synced++;\r\n        } catch (error) {\r\n          console.error('[WHO-SYNC] Error storing update:', error);\r\n          errors++;\r\n        }\r\n      }\r\n\r\n      console.log(`[WHO-SYNC] Synchronization completed: ${synced} synced, ${errors} errors`);\r\n      \r\n      return { success: true, synced, errors };\r\n    } catch (error) {\r\n      console.error('[WHO-SYNC] Synchronization failed:', error);\r\n      return { success: false, synced: 0, errors: 1 };\r\n    }\r\n  }\r\n\r\n  // Health check for WHO/IMDRF integration\r\n  async healthCheck(): Promise<{ status: 'healthy' | 'unhealthy'; details: string }> {\r\n    try {\r\n      const gmrfData = await this.fetchGlobalModelFramework();\r\n      const imdrfData = await this.fetchIMDRFHarmonization();\r\n      \r\n      if (gmrfData.length > 0 && imdrfData.length > 0) {\r\n        return {\r\n          status: 'healthy',\r\n          details: `WHO/IMDRF integration operational: ${gmrfData.length} GMRF documents, ${imdrfData.length} IMDRF harmonization documents available`\r\n        };\r\n      } else {\r\n        return {\r\n          status: 'unhealthy',\r\n          details: 'WHO/IMDRF data sources not responding properly'\r\n        };\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        status: 'unhealthy',\r\n        details: `WHO/IMDRF integration error: ${error instanceof Error ? error.message : 'Unknown error'}`\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport const whoIntegrationService = new WHOIntegrationService();"]}