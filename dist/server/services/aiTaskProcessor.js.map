{"version":3,"file":"aiTaskProcessor.js","sourceRoot":"","sources":["../../../server/services/aiTaskProcessor.ts"],"names":[],"mappings":"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","sourcesContent":["import { storage } from \"../storage\";\r\nimport { aiService } from \"./aiService\";\r\nimport type { AiTask } from \"@shared/schema\";\r\n\r\nexport class AITaskProcessor {\r\n  private isProcessing = false;\r\n  private processingInterval: NodeJS.Timeout | null = null;\r\n\r\n  constructor() {\r\n    this.startProcessing();\r\n  }\r\n\r\n  private startProcessing() {\r\n    // Process AI tasks every 10 seconds\r\n    this.processingInterval = setInterval(() => {\r\n      this.processPendingTasks();\r\n    }, 10000);\r\n\r\n    // Process immediately on startup\r\n    this.processPendingTasks();\r\n  }\r\n\r\n  private async processPendingTasks() {\r\n    if (this.isProcessing) return;\r\n    \r\n    this.isProcessing = true;\r\n    \r\n    try {\r\n      // Get pending tasks\r\n      const pendingTasks = await storage.getPendingAiTasks();\r\n      // console.log(`Processing ${pendingTasks.length} pending AI tasks`);\r\n\r\n      for (const task of pendingTasks) {\r\n        await this.processTask(task);\r\n      }\r\n\r\n      // Process scheduled tasks\r\n      const scheduledTasks = await storage.getScheduledAiTasks();\r\n      // console.log(`Processing ${scheduledTasks.length} scheduled AI tasks`);\r\n\r\n      for (const task of scheduledTasks) {\r\n        await this.processTask(task);\r\n      }\r\n    } catch (error) {\r\n      // console.error(\"Error processing AI tasks:\", error);\r\n    } finally {\r\n      this.isProcessing = false;\r\n    }\r\n  }\r\n\r\n  private async processTask(task: AiTask) {\r\n    const startTime = Date.now();\r\n    \r\n    try {\r\n      // console.log(`Processing AI task ${task.id} of type ${task.type}`);\r\n      \r\n      // Update task status to processing\r\n      await storage.updateAiTask(task.id, {\r\n        status: \"processing\",\r\n      });\r\n\r\n      let result: any;\r\n\r\n      // Route to appropriate AI service based on task type\r\n      switch (task.type) {\r\n        case \"product_optimization\":\r\n          result = await this.handleProductOptimization(task);\r\n          break;\r\n        case \"order_processing\":\r\n          result = await this.handleOrderProcessing(task);\r\n          break;\r\n        case \"customer_service\":\r\n          result = await this.handleCustomerService(task);\r\n          break;\r\n        case \"marketing\":\r\n          result = await this.handleMarketing(task);\r\n          break;\r\n        case \"inventory_optimization\":\r\n          result = await this.handleInventoryOptimization(task);\r\n          break;\r\n        case \"price_optimization\":\r\n          result = await this.handlePriceOptimization(task);\r\n          break;\r\n        case \"customer_segmentation\":\r\n          result = await this.handleCustomerSegmentation(task);\r\n          break;\r\n        default:\r\n          throw new Error(`Unknown task type: ${task.type}`);\r\n      }\r\n\r\n      const processingTime = Date.now() - startTime;\r\n\r\n      // Update task as completed\r\n      await storage.updateAiTask(task.id, {\r\n        status: \"completed\",\r\n        output: result,\r\n        processingTime,\r\n        completedAt: new Date(),\r\n      });\r\n\r\n      // console.log(`AI task ${task.id} completed in ${processingTime}ms`);\r\n\r\n    } catch (error) {\r\n      const processingTime = Date.now() - startTime;\r\n      \r\n      // console.error(`Error processing AI task ${task.id}:`, error);\r\n      \r\n      // Update task as failed\r\n      await storage.updateAiTask(task.id, {\r\n        status: \"failed\",\r\n        error: error instanceof Error ? error.message : \"Unknown error\",\r\n        processingTime,\r\n        completedAt: new Date(),\r\n      });\r\n    }\r\n  }\r\n\r\n  private async handleProductOptimization(task: AiTask): Promise<any> {\r\n    const { productId } = task.input as any;\r\n    \r\n    if (!productId) {\r\n      throw new Error(\"Product ID is required for product optimization\");\r\n    }\r\n\r\n    return await aiService.optimizeProduct(productId);\r\n  }\r\n\r\n  private async handleOrderProcessing(task: AiTask): Promise<any> {\r\n    const { orderId } = task.input as any;\r\n    \r\n    if (!orderId) {\r\n      throw new Error(\"Order ID is required for order processing\");\r\n    }\r\n\r\n    return await aiService.processOrder(orderId);\r\n  }\r\n\r\n  private async handleCustomerService(task: AiTask): Promise<any> {\r\n    const { conversationId, message } = task.input as any;\r\n    \r\n    if (!conversationId || !message) {\r\n      throw new Error(\"Conversation ID and message are required for customer service\");\r\n    }\r\n\r\n    return await aiService.handleCustomerService(conversationId, message);\r\n  }\r\n\r\n  private async handleMarketing(task: AiTask): Promise<any> {\r\n    const { campaignType, targetAudience, budget } = task.input as any;\r\n    \r\n    if (!campaignType) {\r\n      throw new Error(\"Campaign type is required for marketing\");\r\n    }\r\n\r\n    return await aiService.generateMarketingCampaign(\r\n      campaignType,\r\n      targetAudience || {},\r\n      budget || 1000\r\n    );\r\n  }\r\n\r\n  private async handleInventoryOptimization(task: AiTask): Promise<any> {\r\n    return await aiService.optimizeInventory();\r\n  }\r\n\r\n  private async handlePriceOptimization(task: AiTask): Promise<any> {\r\n    return await aiService.optimizeProductPricing();\r\n  }\r\n\r\n  private async handleCustomerSegmentation(task: AiTask): Promise<any> {\r\n    return await aiService.analyzeCustomerSegmentation();\r\n  }\r\n\r\n  // Schedule automated tasks\r\n  async scheduleAutomatedTasks() {\r\n    const now = new Date();\r\n    \r\n    // Schedule daily inventory optimization\r\n    const inventoryTask = new Date(now);\r\n    inventoryTask.setHours(2, 0, 0, 0); // 2 AM daily\r\n    if (inventoryTask <= now) {\r\n      inventoryTask.setDate(inventoryTask.getDate() + 1);\r\n    }\r\n\r\n    await storage.createAiTask({\r\n      type: \"inventory_optimization\",\r\n      input: {},\r\n      priority: \"medium\",\r\n      scheduled: true,\r\n      scheduledFor: inventoryTask,\r\n    });\r\n\r\n    // Schedule weekly price optimization\r\n    const priceTask = new Date(now);\r\n    priceTask.setDate(priceTask.getDate() + (7 - priceTask.getDay())); // Next Sunday\r\n    priceTask.setHours(3, 0, 0, 0); // 3 AM Sunday\r\n\r\n    await storage.createAiTask({\r\n      type: \"price_optimization\",\r\n      input: {},\r\n      priority: \"medium\",\r\n      scheduled: true,\r\n      scheduledFor: priceTask,\r\n    });\r\n\r\n    // Schedule monthly customer segmentation\r\n    const segmentationTask = new Date(now);\r\n    segmentationTask.setMonth(segmentationTask.getMonth() + 1);\r\n    segmentationTask.setDate(1);\r\n    segmentationTask.setHours(4, 0, 0, 0); // 4 AM on 1st of month\r\n\r\n    await storage.createAiTask({\r\n      type: \"customer_segmentation\",\r\n      input: {},\r\n      priority: \"low\",\r\n      scheduled: true,\r\n      scheduledFor: segmentationTask,\r\n    });\r\n\r\n    // console.log(\"Automated AI tasks scheduled successfully\");\r\n  }\r\n\r\n  // Cleanup completed tasks (older than 30 days)\r\n  async cleanupOldTasks() {\r\n    try {\r\n      const thirtyDaysAgo = new Date();\r\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\r\n\r\n      // This would require a cleanup method in storage\r\n      // console.log(\"Cleanup of old AI tasks completed\");\r\n    } catch (error) {\r\n      // console.error(\"Error cleaning up old tasks:\", error);\r\n    }\r\n  }\r\n\r\n  // Get processing statistics\r\n  async getProcessingStats(): Promise<any> {\r\n    try {\r\n      const allTasks = await storage.getAiTasks({ limit: 1000, offset: 0 });\r\n      \r\n      const stats = {\r\n        total: allTasks.length,\r\n        pending: allTasks.filter(t => t.status === \"pending\").length,\r\n        processing: allTasks.filter(t => t.status === \"processing\").length,\r\n        completed: allTasks.filter(t => t.status === \"completed\").length,\r\n        failed: allTasks.filter(t => t.status === \"failed\").length,\r\n        byType: {},\r\n        averageProcessingTime: 0,\r\n      };\r\n\r\n      // Calculate stats by type\r\n      const typeStats = {};\r\n      let totalProcessingTime = 0;\r\n      let completedCount = 0;\r\n\r\n      for (const task of allTasks) {\r\n        if (!typeStats[task.type]) {\r\n          typeStats[task.type] = { total: 0, completed: 0, failed: 0 };\r\n        }\r\n        \r\n        typeStats[task.type].total++;\r\n        \r\n        if (task.status === \"completed\") {\r\n          typeStats[task.type].completed++;\r\n          if (task.processingTime) {\r\n            totalProcessingTime += task.processingTime;\r\n            completedCount++;\r\n          }\r\n        } else if (task.status === \"failed\") {\r\n          typeStats[task.type].failed++;\r\n        }\r\n      }\r\n\r\n      stats.byType = typeStats;\r\n      stats.averageProcessingTime = completedCount > 0 ? totalProcessingTime / completedCount : 0;\r\n\r\n      return stats;\r\n    } catch (error) {\r\n      // console.error(\"Error getting processing stats:\", error);\r\n      return { error: \"Failed to get processing stats\" };\r\n    }\r\n  }\r\n\r\n  // Stop processing (for graceful shutdown)\r\n  stop() {\r\n    if (this.processingInterval) {\r\n      clearInterval(this.processingInterval);\r\n      this.processingInterval = null;\r\n    }\r\n    // console.log(\"AI task processor stopped\");\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const aiTaskProcessor = new AITaskProcessor();"]}