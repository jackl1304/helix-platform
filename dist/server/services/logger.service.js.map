{"version":3,"file":"logger.service.js","sourceRoot":"","sources":["../../../server/services/logger.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { createLogger, format, transports, Logger as WinstonLogger } from 'winston';\r\n\r\nexport enum LogLevel {\r\n  ERROR = 'error',\r\n  WARN = 'warn',\r\n  INFO = 'info',\r\n  DEBUG = 'debug'\r\n}\r\n\r\nexport interface LogContext {\r\n  [key: string]: unknown;\r\n}\r\n\r\nexport class Logger {\r\n  private winston: WinstonLogger;\r\n  private context: string;\r\n\r\n  constructor(context: string = 'Application') {\r\n    this.context = context;\r\n    this.winston = createLogger({\r\n      level: process.env.LOG_LEVEL || 'info',\r\n      format: format.combine(\r\n        format.timestamp(),\r\n        format.errors({ stack: true }),\r\n        format.json(),\r\n        format.printf(({ timestamp, level, message, context, ...meta }) => {\r\n          const logObject = {\r\n            timestamp,\r\n            level,\r\n            message,\r\n            context: context || this.context,\r\n            ...meta\r\n          };\r\n          \r\n          // In development, use prettier format\r\n          if (process.env.NODE_ENV === 'development') {\r\n            return `${timestamp} [${level.toUpperCase()}] [${context || this.context}] ${message} ${\r\n              Object.keys(meta).length > 0 ? JSON.stringify(meta, (key, value) => {\r\n                if (value && typeof value === 'object' && value.constructor && \r\n                    (value.constructor.name === 'Timeout' || value.constructor.name === 'TimersList')) {\r\n                  return '[Circular Object]';\r\n                }\r\n                return value;\r\n              }, 2) : ''\r\n            }`;\r\n          }\r\n          \r\n          return JSON.stringify(logObject);\r\n        })\r\n      ),\r\n      transports: [\r\n        new transports.Console({\r\n          handleExceptions: true,\r\n          handleRejections: true\r\n        })\r\n      ],\r\n      exitOnError: false\r\n    });\r\n  }\r\n\r\n  error(message: string, context?: LogContext): void {\r\n    this.winston.error(message, { context: this.context, ...context });\r\n  }\r\n\r\n  warn(message: string, context?: LogContext): void {\r\n    this.winston.warn(message, { context: this.context, ...context });\r\n  }\r\n\r\n  info(message: string, context?: LogContext): void {\r\n    this.winston.info(message, { context: this.context, ...context });\r\n  }\r\n\r\n  debug(message: string, context?: LogContext): void {\r\n    this.winston.debug(message, { context: this.context, ...context });\r\n  }\r\n\r\n  // HTTP request logging\r\n  http(method: string, url: string, statusCode: number, responseTime: number, context?: LogContext): void {\r\n    this.info(`${method} ${url}`, {\r\n      method,\r\n      url,\r\n      statusCode,\r\n      responseTime,\r\n      ...context\r\n    });\r\n  }\r\n\r\n  // Database operation logging\r\n  database(operation: string, table: string, duration: number, context?: LogContext): void {\r\n    this.debug(`DB ${operation} on ${table}`, {\r\n      operation,\r\n      table,\r\n      duration,\r\n      ...context\r\n    });\r\n  }\r\n\r\n  // Performance logging\r\n  performance(operation: string, duration: number, context?: LogContext): void {\r\n    const level = duration > 1000 ? LogLevel.WARN : LogLevel.DEBUG;\r\n    this[level](`Performance: ${operation} took ${duration}ms`, {\r\n      operation,\r\n      duration,\r\n      performance: true,\r\n      ...context\r\n    });\r\n  }\r\n\r\n  // Security logging\r\n  security(event: string, severity: 'low' | 'medium' | 'high' | 'critical', context?: LogContext): void {\r\n    const level = ['high', 'critical'].includes(severity) ? LogLevel.ERROR : LogLevel.WARN;\r\n    this[level](`Security: ${event}`, {\r\n      event,\r\n      severity,\r\n      security: true,\r\n      ...context\r\n    });\r\n  }\r\n\r\n  // API logging\r\n  api(endpoint: string, method: string, statusCode: number, responseTime: number, context?: LogContext): void {\r\n    const level = statusCode >= 400 ? LogLevel.ERROR : LogLevel.INFO;\r\n    this[level](`API ${method} ${endpoint} - ${statusCode}`, {\r\n      endpoint,\r\n      method,\r\n      statusCode,\r\n      responseTime,\r\n      api: true,\r\n      ...context\r\n    });\r\n  }\r\n\r\n  // Child logger with additional context\r\n  child(additionalContext: LogContext): Logger {\r\n    const childLogger = new Logger(this.context);\r\n    // Add persistent context to all logs from this child\r\n    const originalInfo = childLogger.winston.info.bind(childLogger.winston);\r\n    const originalError = childLogger.winston.error.bind(childLogger.winston);\r\n    const originalWarn = childLogger.winston.warn.bind(childLogger.winston);\r\n    const originalDebug = childLogger.winston.debug.bind(childLogger.winston);\r\n    \r\n    childLogger.winston.info = (message: string, meta: any = {}) => {\r\n      return originalInfo(message, { ...additionalContext, ...meta });\r\n    };\r\n    childLogger.winston.error = (message: string, meta: any = {}) => {\r\n      return originalError(message, { ...additionalContext, ...meta });\r\n    };\r\n    childLogger.winston.warn = (message: string, meta: any = {}) => {\r\n      return originalWarn(message, { ...additionalContext, ...meta });\r\n    };\r\n    childLogger.winston.debug = (message: string, meta: any = {}) => {\r\n      return originalDebug(message, { ...additionalContext, ...meta });\r\n    };\r\n    \r\n    return childLogger;\r\n  }\r\n\r\n  // Timer utility for performance monitoring\r\n  startTimer(label: string): () => void {\r\n    const start = Date.now();\r\n    return () => {\r\n      const duration = Date.now() - start;\r\n      this.performance(label, duration);\r\n    };\r\n  }\r\n}\r\n\r\n// Global logger instance\r\nexport const logger = new Logger('Global');\r\n\r\n// Specialized loggers for different modules\r\nexport const dbLogger = new Logger('Database');\r\nexport const apiLogger = new Logger('API');\r\nexport const authLogger = new Logger('Authentication');\r\nexport const securityLogger = new Logger('Security');\r\n\r\n// Error logging utility\r\nexport const logError = (error: Error, context?: LogContext): void => {\r\n  logger.error(error.message, {\r\n    stack: error.stack,\r\n    name: error.name,\r\n    ...context\r\n  });\r\n};\r\n\r\n// Request logging middleware utility\r\nexport const createRequestLogger = (logger: Logger) => {\r\n  return (req: any, res: any, next: any) => {\r\n    const start = Date.now();\r\n    \r\n    res.on('finish', () => {\r\n      const duration = Date.now() - start;\r\n      logger.api(req.originalUrl, req.method, res.statusCode, duration, {\r\n        userAgent: req.get('User-Agent'),\r\n        ip: req.ip\r\n      });\r\n    });\r\n    \r\n    next();\r\n  };\r\n};"]}