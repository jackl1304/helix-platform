{"version":3,"file":"realTimeAPIService.js","sourceRoot":"","sources":["../../../server/services/realTimeAPIService.ts"],"names":[],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { storage } from '../storage';\r\n\r\ninterface APIEndpoint {\r\n  name: string;\r\n  url: string;\r\n  method: 'GET' | 'POST';\r\n  headers?: Record<string, string>;\r\n  params?: Record<string, any>;\r\n  dataPath?: string;\r\n  category: 'regulatory' | 'clinical' | 'safety' | 'standards' | 'global_health';\r\n  region: string;\r\n  priority: 'high' | 'medium' | 'low';\r\n}\r\n\r\ninterface APIResponse {\r\n  success: boolean;\r\n  data: any[];\r\n  source: string;\r\n  timestamp: string;\r\n  recordCount: number;\r\n  error?: string;\r\n}\r\n\r\ninterface ClinicalTrial {\r\n  nctId: string;\r\n  briefTitle: string;\r\n  studyType: string;\r\n  phase: string;\r\n  overallStatus: string;\r\n  startDate: string;\r\n  completionDate: string;\r\n  conditions: string[];\r\n  interventions: string[];\r\n}\r\n\r\ninterface WHOIndicator {\r\n  indicatorCode: string;\r\n  indicatorName: string;\r\n  region: string;\r\n  country: string;\r\n  year: number;\r\n  value: number;\r\n  unit: string;\r\n}\r\n\r\nexport class RealTimeAPIService {\r\n  private apiEndpoints: APIEndpoint[] = [\r\n    // FDA OpenFDA API - Highest Priority\r\n    {\r\n      name: 'FDA 510k Clearances',\r\n      url: 'https://api.fda.gov/device/510k.json',\r\n      method: 'GET',\r\n      params: { limit: 100, sort: 'date_received:desc' },\r\n      dataPath: 'results',\r\n      category: 'regulatory',\r\n      region: 'United States',\r\n      priority: 'high'\r\n    },\r\n    {\r\n      name: 'FDA Device Recalls',\r\n      url: 'https://api.fda.gov/device/recall.json',\r\n      method: 'GET',\r\n      params: { limit: 100, sort: 'report_date:desc' },\r\n      dataPath: 'results',\r\n      category: 'safety',\r\n      region: 'United States',\r\n      priority: 'high'\r\n    },\r\n    {\r\n      name: 'FDA PMA Approvals',\r\n      url: 'https://api.fda.gov/device/pma.json',\r\n      method: 'GET',\r\n      params: { limit: 100, sort: 'date_received:desc' },\r\n      dataPath: 'results',\r\n      category: 'regulatory',\r\n      region: 'United States',\r\n      priority: 'high'\r\n    },\r\n    // WHO Global Health Observatory\r\n    {\r\n      name: 'WHO Health Indicators',\r\n      url: 'https://ghoapi.azureedge.net/api/Indicator',\r\n      method: 'GET',\r\n      dataPath: 'value',\r\n      category: 'global_health',\r\n      region: 'Global',\r\n      priority: 'high'\r\n    },\r\n    // ClinicalTrials.gov API\r\n    {\r\n      name: 'Clinical Trials Medical Devices',\r\n      url: 'https://clinicaltrials.gov/api/query/study_fields',\r\n      method: 'GET',\r\n      params: {\r\n        expr: 'medical device',\r\n        fields: 'NCTId,BriefTitle,StudyType,Phase,OverallStatus,StartDate,CompletionDate,Condition,InterventionName',\r\n        fmt: 'json',\r\n        max_rnk: 100\r\n      },\r\n      dataPath: 'StudyFieldsResponse.StudyFields',\r\n      category: 'clinical',\r\n      region: 'Global',\r\n      priority: 'high'\r\n    }\r\n  ];\r\n\r\n  private rssFeeds: string[] = [\r\n    'https://www.fda.gov/about-fda/contact-fda/stay-informed/rss-feeds-fda',\r\n    'https://www.ema.europa.eu/en/rss.xml',\r\n    'https://www.bfarm.de/DE/Service/RSS/_node.html',\r\n    'https://www.swissmedic.ch/swissmedic/de/home.rss.html',\r\n    'https://www.mhra.gov.uk/news-and-events/news/rss.xml'\r\n  ];\r\n\r\n  async fetchFromAPI(endpoint: APIEndpoint): Promise<APIResponse> {\r\n    try {\r\n      console.log(`[Real-Time API] Fetching from ${endpoint.name}...`);\r\n      \r\n      const config = {\r\n        method: endpoint.method,\r\n        url: endpoint.url,\r\n        headers: {\r\n          'User-Agent': 'Helix-Regulatory-Intelligence/1.0',\r\n          'Accept': 'application/json',\r\n          ...endpoint.headers\r\n        },\r\n        params: endpoint.params,\r\n        timeout: 30000\r\n      };\r\n\r\n      const response = await axios(config);\r\n      \r\n      let data = response.data;\r\n      if (endpoint.dataPath) {\r\n        const pathParts = endpoint.dataPath.split('.');\r\n        for (const part of pathParts) {\r\n          data = data?.[part];\r\n        }\r\n      }\r\n\r\n      const results = Array.isArray(data) ? data : [data];\r\n      \r\n      console.log(`[Real-Time API] ${endpoint.name}: Retrieved ${results.length} records`);\r\n      \r\n      return {\r\n        success: true,\r\n        data: results,\r\n        source: endpoint.name,\r\n        timestamp: new Date().toISOString(),\r\n        recordCount: results.length\r\n      };\r\n    } catch (error: any) {\r\n      console.error(`[Real-Time API] Error fetching ${endpoint.name}:`, error.message);\r\n      return {\r\n        success: false,\r\n        data: [],\r\n        source: endpoint.name,\r\n        timestamp: new Date().toISOString(),\r\n        recordCount: 0,\r\n        error: error.message\r\n      };\r\n    }\r\n  }\r\n\r\n  async syncFDAData(): Promise<{ success: boolean; summary: any }> {\r\n    try {\r\n      console.log('[Real-Time API] Starting FDA data synchronization...');\r\n      \r\n      const fdaEndpoints = this.apiEndpoints.filter(ep => \r\n        ep.name.includes('FDA') && ep.priority === 'high'\r\n      );\r\n      \r\n      const results = await Promise.allSettled(\r\n        fdaEndpoints.map(endpoint => this.fetchFromAPI(endpoint))\r\n      );\r\n      \r\n      let totalRecords = 0;\r\n      let successfulSyncs = 0;\r\n      const syncSummary: any = {};\r\n      \r\n      for (let i = 0; i < results.length; i++) {\r\n        const result = results[i];\r\n        const endpoint = fdaEndpoints[i];\r\n        \r\n        if (result.status === 'fulfilled' && result.value.success) {\r\n          successfulSyncs++;\r\n          totalRecords += result.value.recordCount;\r\n          \r\n          // Process and store FDA data\r\n          await this.processFDAData(result.value, endpoint);\r\n          \r\n          syncSummary[endpoint.name] = {\r\n            records: result.value.recordCount,\r\n            status: 'success'\r\n          };\r\n        } else {\r\n          syncSummary[endpoint.name] = {\r\n            records: 0,\r\n            status: 'failed',\r\n            error: result.status === 'fulfilled' ? result.value.error : 'Promise rejected'\r\n          };\r\n        }\r\n      }\r\n      \r\n      console.log(`[Real-Time API] FDA sync completed: ${successfulSyncs}/${fdaEndpoints.length} successful, ${totalRecords} total records`);\r\n      \r\n      return {\r\n        success: successfulSyncs > 0,\r\n        summary: {\r\n          totalRecords,\r\n          successfulSyncs,\r\n          totalEndpoints: fdaEndpoints.length,\r\n          details: syncSummary\r\n        }\r\n      };\r\n    } catch (error: any) {\r\n      console.error('[Real-Time API] FDA sync failed:', error);\r\n      return { success: false, summary: { error: error.message } };\r\n    }\r\n  }\r\n\r\n  async syncClinicalTrialsData(): Promise<{ success: boolean; summary: any }> {\r\n    try {\r\n      console.log('[Real-Time API] Starting Clinical Trials synchronization...');\r\n      \r\n      const clinicalEndpoint = this.apiEndpoints.find(ep => \r\n        ep.name === 'Clinical Trials Medical Devices'\r\n      );\r\n      \r\n      if (!clinicalEndpoint) {\r\n        throw new Error('Clinical Trials endpoint not found');\r\n      }\r\n      \r\n      const response = await this.fetchFromAPI(clinicalEndpoint);\r\n      \r\n      if (response.success) {\r\n        await this.processClinicalTrialsData(response);\r\n        \r\n        console.log(`[Real-Time API] Clinical Trials sync completed: ${response.recordCount} records`);\r\n        \r\n        return {\r\n          success: true,\r\n          summary: {\r\n            totalRecords: response.recordCount,\r\n            source: 'ClinicalTrials.gov',\r\n            timestamp: response.timestamp\r\n          }\r\n        };\r\n      } else {\r\n        return {\r\n          success: false,\r\n          summary: { error: response.error }\r\n        };\r\n      }\r\n    } catch (error: any) {\r\n      console.error('[Real-Time API] Clinical Trials sync failed:', error);\r\n      return { success: false, summary: { error: error.message } };\r\n    }\r\n  }\r\n\r\n  async syncEUData(): Promise<{ success: boolean; summary: any }> {\r\n    try {\r\n      console.log('[Real-Time API] Starting EU Regulatory Data synchronization...');\r\n      \r\n      const euEndpoints = this.apiEndpoints.filter(ep => \r\n        (ep.name.includes('EMA') || ep.name.includes('BfArM') || \r\n         ep.name.includes('Swissmedic') || ep.name.includes('MHRA'))\r\n      );\r\n      \r\n      console.log(`[Real-Time API] Found ${euEndpoints.length} EU regulatory endpoints`);\r\n      \r\n      const results = await Promise.allSettled(\r\n        euEndpoints.map(endpoint => this.fetchFromAPI(endpoint))\r\n      );\r\n      \r\n      let totalRecords = 0;\r\n      let successfulSyncs = 0;\r\n      const syncSummary: any = {};\r\n      \r\n      for (let i = 0; i < results.length; i++) {\r\n        const result = results[i];\r\n        const endpoint = euEndpoints[i];\r\n        \r\n        if (result.status === 'fulfilled' && result.value.success) {\r\n          successfulSyncs++;\r\n          totalRecords += result.value.recordCount;\r\n          \r\n          // Process EU regulatory data\r\n          await this.processEUData(result.value, endpoint);\r\n          \r\n          syncSummary[endpoint.name] = {\r\n            records: result.value.recordCount,\r\n            status: 'success'\r\n          };\r\n        } else {\r\n          syncSummary[endpoint.name] = {\r\n            records: 0,\r\n            status: 'failed',\r\n            error: result.status === 'fulfilled' ? result.value.error : 'Promise rejected'\r\n          };\r\n        }\r\n      }\r\n      \r\n      console.log(`[Real-Time API] EU sync completed: ${successfulSyncs}/${euEndpoints.length} successful, ${totalRecords} total records`);\r\n      \r\n      return {\r\n        success: successfulSyncs > 0,\r\n        summary: {\r\n          totalRecords,\r\n          successfulSyncs,\r\n          totalEndpoints: euEndpoints.length,\r\n          details: syncSummary\r\n        }\r\n      };\r\n    } catch (error: any) {\r\n      console.error('[Real-Time API] EU sync failed:', error);\r\n      return { success: false, summary: { error: error.message } };\r\n    }\r\n  }\r\n\r\n  private async processFDAData(apiResponse: APIResponse, endpoint: APIEndpoint): Promise<void> {\r\n    try {\r\n      let validRecordsProcessed = 0;\r\n      \r\n      for (const record of apiResponse.data) {\r\n        const processedUpdate = this.transformFDARecord(record, endpoint);\r\n        \r\n        // Skip null/invalid records\r\n        if (!processedUpdate) {\r\n          continue;\r\n        }\r\n        \r\n        // Check if already exists to avoid duplicates\r\n        const existing = await this.checkForDuplicate(processedUpdate);\r\n        if (!existing) {\r\n          await storage.createRegulatoryUpdate(processedUpdate);\r\n          validRecordsProcessed++;\r\n        }\r\n      }\r\n      \r\n      console.log(`[Real-Time API] Processed ${validRecordsProcessed} valid FDA records from ${endpoint.name}`);\r\n    } catch (error) {\r\n      console.error('[Real-Time API] Error processing FDA data:', error);\r\n    }\r\n  }\r\n\r\n  private async processClinicalTrialsData(apiResponse: APIResponse): Promise<void> {\r\n    try {\r\n      for (const trial of apiResponse.data) {\r\n        const processedTrial = this.transformClinicalTrialRecord(trial);\r\n        \r\n        // Store as regulatory update with clinical trial category\r\n        const regulatoryUpdate = {\r\n          id: `clinical-${processedTrial.nctId}`,\r\n          title: `Clinical Trial: ${processedTrial.briefTitle}`,\r\n          content: this.generateClinicalTrialContent(processedTrial),\r\n          authority: 'ClinicalTrials.gov',\r\n          region: 'Global',\r\n          category: 'clinical_trials',\r\n          type: 'clinical_study',\r\n          published_at: new Date().toISOString(),\r\n          priority: this.determineClinicalTrialPriority(processedTrial),\r\n          tags: ['clinical_trial', 'medical_device', processedTrial.phase, processedTrial.overallStatus],\r\n          url: `https://clinicaltrials.gov/ct2/show/${processedTrial.nctId}`,\r\n          document_type: 'clinical_trial',\r\n          language: 'en'\r\n        };\r\n        \r\n        const existing = await this.checkForDuplicate(regulatoryUpdate);\r\n        if (!existing) {\r\n          await storage.createRegulatoryUpdate(regulatoryUpdate);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('[Real-Time API] Error processing Clinical Trials data:', error);\r\n    }\r\n  }\r\n\r\n  private async processEUData(apiResponse: APIResponse, endpoint: APIEndpoint): Promise<void> {\r\n    try {\r\n      console.log(`[Real-Time API] Processing ${endpoint.name} data...`);\r\n      let validRecordsProcessed = 0;\r\n      \r\n      for (const record of apiResponse.data) {\r\n        const processedUpdate = this.transformEURecord(record, endpoint);\r\n        \r\n        // Skip null/invalid records\r\n        if (!processedUpdate) {\r\n          continue;\r\n        }\r\n        \r\n        // Check if already exists to avoid duplicates\r\n        const existing = await this.checkForDuplicate(processedUpdate);\r\n        if (!existing) {\r\n          await storage.createRegulatoryUpdate(processedUpdate);\r\n          validRecordsProcessed++;\r\n          console.log(`[Real-Time API] Added ${endpoint.name} record: ${processedUpdate.title}`);\r\n        }\r\n      }\r\n      \r\n      console.log(`[Real-Time API] Processed ${validRecordsProcessed} valid records from ${endpoint.name}`);\r\n    } catch (error) {\r\n      console.error(`[Real-Time API] Error processing ${endpoint.name} data:`, error);\r\n    }\r\n  }\r\n\r\n  private transformEURecord(record: any, endpoint: APIEndpoint): any {\r\n    // Transform EU regulatory record to standardized format\r\n    try {\r\n      const authority = endpoint.name.includes('EMA') ? 'EMA' :\r\n                       endpoint.name.includes('BfArM') ? 'BfArM' :\r\n                       endpoint.name.includes('Swissmedic') ? 'Swissmedic' :\r\n                       endpoint.name.includes('MHRA') ? 'MHRA' : 'EU Authority';\r\n      \r\n      const processedUpdate = {\r\n        id: `${authority.toLowerCase()}-${record.id || record.reference_number || Date.now()}`,\r\n        title: record.title || record.product_name || record.name || `${authority} Approval`,\r\n        content: this.generateEUContent(record, authority),\r\n        authority,\r\n        region: 'Europe',\r\n        category: 'approval',\r\n        type: 'device_approval',\r\n        published_at: record.approval_date || record.decision_date || new Date().toISOString(),\r\n        priority: 'high',\r\n        tags: [authority.toLowerCase(), 'medical_device', 'approval', 'europe'],\r\n        url: record.url || endpoint.url,\r\n        document_type: 'regulatory_approval',\r\n        language: authority === 'BfArM' ? 'de' : 'en'\r\n      };\r\n      \r\n      return processedUpdate;\r\n    } catch (error) {\r\n      console.error(`[Real-Time API] Error transforming ${endpoint.name} record:`, error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private generateEUContent(record: any, authority: string): string {\r\n    return `\r\n**${authority} Medical Device Approval**\r\n\r\n**Product:** ${record.product_name || record.title || 'Medical Device'}\r\n**Manufacturer:** ${record.manufacturer || 'Not specified'}\r\n**Classification:** ${record.classification || record.device_class || 'Class Unknown'}\r\n**Approval Date:** ${record.approval_date || record.decision_date || 'Not specified'}\r\n\r\n**Summary:**\r\nThis medical device has been approved by ${authority} for use in the European market.\r\n\r\n${record.description || record.summary || ''}\r\n\r\n**Regulatory Status:** Approved for EU market\r\n**Authority:** ${authority}\r\n    `.trim();\r\n  }\r\n\r\n  private async processWHOData(apiResponse: APIResponse): Promise<void> {\r\n    try {\r\n      // WHO indicators should NOT be stored as regulatory updates\r\n      // They should go to a separate health_indicators table\r\n      console.log('[Real-Time API] WHO Health Indicators should be stored separately, not as regulatory updates');\r\n      \r\n      // For now, we skip WHO processing to avoid data pollution\r\n      return;\r\n      \r\n      // WHO indicators are metadata, we'll store them as reference data\r\n      for (const indicator of apiResponse.data.slice(0, 50)) { // Limit to 50 most relevant\r\n        const processedIndicator = {\r\n          id: `who-${indicator.IndicatorCode || Date.now()}`,\r\n          title: `WHO Health Indicator: ${indicator.IndicatorName || 'Health Indicator'}`,\r\n          content: `Global health indicator from WHO Global Health Observatory. ${indicator.Definition || 'Health-related regulatory indicator for global monitoring.'}`,\r\n          authority: 'WHO',\r\n          region: 'Global',\r\n          category: 'global_health',\r\n          type: 'health_indicator',\r\n          published_at: new Date().toISOString(),\r\n          priority: 'medium' as const,\r\n          tags: ['who', 'global_health', 'indicator', 'surveillance'],\r\n          url: `https://www.who.int/data/gho/data/indicators/indicator-details/GHO/${indicator.IndicatorCode}`,\r\n          document_type: 'health_indicator',\r\n          language: 'en'\r\n        };\r\n        \r\n        const existing = await this.checkForDuplicate(processedIndicator);\r\n        if (!existing) {\r\n          await storage.createRegulatoryUpdate(processedIndicator);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('[Real-Time API] Error processing WHO data:', error);\r\n    }\r\n  }\r\n\r\n  private transformFDARecord(record: any, endpoint: APIEndpoint): any | null {\r\n    // CRITICAL: Validate record has meaningful data\r\n    const hasValidData = record && (\r\n      record.device_name || \r\n      record.product_description || \r\n      record.applicant || \r\n      record.k_number || \r\n      record.pma_number || \r\n      record.recall_number\r\n    );\r\n    \r\n    if (!hasValidData) {\r\n      console.log(`[Real-Time API] Skipping empty FDA record from ${endpoint.name}`);\r\n      return null; // Don't create generic entries\r\n    }\r\n    \r\n    // Use actual FDA dates, not today's date\r\n    const publishedDate = record.decision_date || record.date_received || record.report_date;\r\n    if (!publishedDate) {\r\n      console.log(`[Real-Time API] Skipping FDA record without date from ${endpoint.name}`);\r\n      return null;\r\n    }\r\n    \r\n    const baseTransform = {\r\n      id: `fda-${endpoint.name.toLowerCase().replace(/\\s+/g, '-')}-${record.k_number || record.pma_number || record.recall_number || Date.now()}`,\r\n      authority: 'FDA',\r\n      region: 'United States',\r\n      published_at: publishedDate, // Use REAL FDA date, not today\r\n      language: 'en',\r\n      url: this.generateFDAUrl(record, endpoint),\r\n      document_type: this.getFDADocumentType(endpoint)\r\n    };\r\n\r\n    if (endpoint.name.includes('510k')) {\r\n      return {\r\n        ...baseTransform,\r\n        title: `FDA 510(k): ${record.device_name || 'Medical Device Clearance'}`,\r\n        content: this.generateFDA510kContent(record),\r\n        category: 'medical_device_clearance',\r\n        type: '510k_clearance',\r\n        priority: this.determineFDAPriority(record),\r\n        tags: ['fda', '510k', 'clearance', 'medical_device']\r\n      };\r\n    }\r\n\r\n    if (endpoint.name.includes('Recall')) {\r\n      return {\r\n        ...baseTransform,\r\n        title: `FDA Device Recall: ${record.product_description || 'Medical Device Recall'}`,\r\n        content: this.generateFDARecallContent(record),\r\n        category: 'safety_alert',\r\n        type: 'device_recall',\r\n        priority: this.determineFDARecallPriority(record),\r\n        tags: ['fda', 'recall', 'safety', 'medical_device']\r\n      };\r\n    }\r\n\r\n    if (endpoint.name.includes('PMA')) {\r\n      return {\r\n        ...baseTransform,\r\n        title: `FDA PMA: ${record.device_name || 'Medical Device Approval'}`,\r\n        content: this.generateFDAPMAContent(record),\r\n        category: 'medical_device_approval',\r\n        type: 'pma_approval',\r\n        priority: this.determineFDAPriority(record),\r\n        tags: ['fda', 'pma', 'approval', 'medical_device']\r\n      };\r\n    }\r\n\r\n    return baseTransform;\r\n  }\r\n\r\n  private transformClinicalTrialRecord(trial: any): ClinicalTrial {\r\n    return {\r\n      nctId: trial.NCTId?.[0] || '',\r\n      briefTitle: trial.BriefTitle?.[0] || '',\r\n      studyType: trial.StudyType?.[0] || '',\r\n      phase: trial.Phase?.[0] || '',\r\n      overallStatus: trial.OverallStatus?.[0] || '',\r\n      startDate: trial.StartDate?.[0] || '',\r\n      completionDate: trial.CompletionDate?.[0] || '',\r\n      conditions: trial.Condition || [],\r\n      interventions: trial.InterventionName || []\r\n    };\r\n  }\r\n\r\n  private generateFDA510kContent(record: any): string {\r\n    return `FDA 510(k) Clearance for ${record.device_name || 'medical device'}.\r\n    \r\nApplicant: ${record.applicant || 'Not specified'}\r\nDevice Class: ${record.medical_specialty_description || 'Not specified'}\r\nProduct Code: ${record.product_code || 'Not specified'}\r\nDecision Date: ${record.decision_date || 'Not specified'}\r\nRegulation Number: ${record.regulation_number || 'Not specified'}\r\n\r\n${record.statement || 'No additional statement provided.'}`;\r\n  }\r\n\r\n  private generateFDARecallContent(record: any): string {\r\n    return `FDA Medical Device Recall: ${record.product_description || 'Medical device recall'}.\r\n    \r\nRecalling Firm: ${record.recalling_firm || 'Not specified'}\r\nRecall Class: ${record.classification || 'Not specified'}\r\nRecall Status: ${record.status || 'Not specified'}\r\nRecall Initiation Date: ${record.recall_initiation_date || 'Not specified'}\r\nDistribution Pattern: ${record.distribution_pattern || 'Not specified'}\r\n\r\nReason for Recall: ${record.reason_for_recall || 'Not specified'}`;\r\n  }\r\n\r\n  private generateFDAPMAContent(record: any): string {\r\n    return `FDA PMA Approval for ${record.device_name || 'medical device'}.\r\n    \r\nApplicant: ${record.applicant || 'Not specified'}\r\nSupplement Number: ${record.supplement_number || 'Not specified'}\r\nAdvisory Committee: ${record.advisory_committee || 'Not specified'}\r\nDecision Date: ${record.decision_date || 'Not specified'}\r\nGeneric Name: ${record.generic_name || 'Not specified'}\r\n\r\n${record.statement || 'No additional statement provided.'}`;\r\n  }\r\n\r\n  private generateClinicalTrialContent(trial: ClinicalTrial): string {\r\n    return `Clinical Trial: ${trial.briefTitle}\r\n    \r\nNCT ID: ${trial.nctId}\r\nStudy Type: ${trial.studyType}\r\nPhase: ${trial.phase}\r\nStatus: ${trial.overallStatus}\r\nStart Date: ${trial.startDate}\r\nExpected Completion: ${trial.completionDate}\r\n\r\nConditions: ${trial.conditions.join(', ') || 'Not specified'}\r\nInterventions: ${trial.interventions.join(', ') || 'Not specified'}\r\n\r\nThis clinical trial involves medical devices and is relevant for regulatory intelligence monitoring.`;\r\n  }\r\n\r\n  private generateFDAUrl(record: any, endpoint: APIEndpoint): string {\r\n    if (endpoint.name.includes('510k')) {\r\n      return `https://www.accessdata.fda.gov/scripts/cdrh/cfdocs/cfpmn/pmn.cfm?ID=${record.k_number || ''}`;\r\n    }\r\n    if (endpoint.name.includes('PMA')) {\r\n      return `https://www.accessdata.fda.gov/scripts/cdrh/cfdocs/cfpma/pma.cfm?id=${record.pma_number || ''}`;\r\n    }\r\n    return 'https://www.fda.gov/medical-devices';\r\n  }\r\n\r\n  private getFDADocumentType(endpoint: APIEndpoint): string {\r\n    if (endpoint.name.includes('510k')) return '510k_clearance';\r\n    if (endpoint.name.includes('Recall')) return 'device_recall';\r\n    if (endpoint.name.includes('PMA')) return 'pma_approval';\r\n    return 'fda_document';\r\n  }\r\n\r\n  private determineFDAPriority(record: any): 'low' | 'medium' | 'high' | 'critical' {\r\n    const deviceName = (record.device_name || '').toLowerCase();\r\n    const productCode = (record.product_code || '').toLowerCase();\r\n    \r\n    // High-risk device indicators\r\n    if (deviceName.includes('cardiac') || deviceName.includes('heart') || \r\n        deviceName.includes('pacemaker') || deviceName.includes('defibrillator') ||\r\n        deviceName.includes('implant') || productCode.includes('class iii')) {\r\n      return 'high';\r\n    }\r\n    \r\n    // Medium-risk indicators\r\n    if (deviceName.includes('surgical') || deviceName.includes('diagnostic') ||\r\n        productCode.includes('class ii')) {\r\n      return 'medium';\r\n    }\r\n    \r\n    return 'low';\r\n  }\r\n\r\n  private determineFDARecallPriority(record: any): 'low' | 'medium' | 'high' | 'critical' {\r\n    const classification = (record.classification || '').toLowerCase();\r\n    \r\n    if (classification.includes('class i')) return 'critical';\r\n    if (classification.includes('class ii')) return 'high';\r\n    if (classification.includes('class iii')) return 'medium';\r\n    \r\n    return 'low';\r\n  }\r\n\r\n  private determineClinicalTrialPriority(trial: ClinicalTrial): 'low' | 'medium' | 'high' | 'critical' {\r\n    const phase = trial.phase.toLowerCase();\r\n    const status = trial.overallStatus.toLowerCase();\r\n    \r\n    if (phase.includes('phase 3') || phase.includes('phase iii')) return 'high';\r\n    if (status.includes('completed') && (phase.includes('phase 2') || phase.includes('phase ii'))) return 'medium';\r\n    \r\n    return 'low';\r\n  }\r\n\r\n  private async checkForDuplicate(update: any): Promise<boolean> {\r\n    try {\r\n      const allUpdates = await storage.getAllRegulatoryUpdates();\r\n      return allUpdates.some(existing => \r\n        existing.id === update.id || \r\n        (existing.title === update.title && existing.authority === update.authority)\r\n      );\r\n    } catch (error) {\r\n      console.error('[Real-Time API] Error checking for duplicates:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async performComprehensiveSync(): Promise<{ success: boolean; summary: any }> {\r\n    try {\r\n      console.log('[Real-Time API] Starting comprehensive real-time data synchronization...');\r\n      \r\n      const syncResults = await Promise.allSettled([\r\n        this.syncFDAData(),\r\n        this.syncClinicalTrialsData(),\r\n        this.syncWHOData()\r\n      ]);\r\n      \r\n      const results = {\r\n        fda: syncResults[0].status === 'fulfilled' ? syncResults[0].value : { success: false, error: 'Failed to sync' },\r\n        clinicalTrials: syncResults[1].status === 'fulfilled' ? syncResults[1].value : { success: false, error: 'Failed to sync' },\r\n        who: syncResults[2].status === 'fulfilled' ? syncResults[2].value : { success: false, error: 'Failed to sync' }\r\n      };\r\n      \r\n      const successCount = Object.values(results).filter(r => r.success).length;\r\n      const totalSources = Object.keys(results).length;\r\n      \r\n      console.log(`[Real-Time API] Comprehensive sync completed: ${successCount}/${totalSources} sources successful`);\r\n      \r\n      return {\r\n        success: successCount > 0,\r\n        summary: {\r\n          totalSources,\r\n          successfulSources: successCount,\r\n          results,\r\n          timestamp: new Date().toISOString()\r\n        }\r\n      };\r\n    } catch (error: any) {\r\n      console.error('[Real-Time API] Comprehensive sync failed:', error);\r\n      return { success: false, summary: { error: error.message } };\r\n    }\r\n  }\r\n}"]}