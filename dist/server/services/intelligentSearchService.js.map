{"version":3,"file":"intelligentSearchService.js","sourceRoot":"","sources":["../../../server/services/intelligentSearchService.ts"],"names":[],"mappings":"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","sourcesContent":["// Services imports - using dynamic imports to avoid circular dependencies\r\n\r\ninterface SearchResult {\r\n  id: string;\r\n  title: string;\r\n  content: string;\r\n  excerpt: string;\r\n  type: 'regulatory' | 'legal' | 'knowledge' | 'historical';\r\n  source: string;\r\n  relevance: number;\r\n  date: string;\r\n  url?: string;\r\n  metadata: {\r\n    region?: string;\r\n    deviceClass?: string;\r\n    category?: string;\r\n    tags?: string[];\r\n    language?: string;\r\n  };\r\n}\r\n\r\ninterface IntelligentAnswer {\r\n  query: string;\r\n  answer: string;\r\n  confidence: number;\r\n  sources: string[];\r\n  recommendations: string[];\r\n  relatedTopics: string[];\r\n  timestamp: string;\r\n}\r\n\r\ninterface SearchFilters {\r\n  type: string;\r\n  region: string;\r\n  timeframe: string;\r\n}\r\n\r\nclass IntelligentSearchService {\r\n  // ðŸ”´ MOCK DATA - Knowledge Base wird durch echte Artikel aus der Datenbank geladen\r\n  private knowledgeBase: any[] = []; // ðŸ”´ MOCK - EMPTY ARRAY CAUSES \"NO RESULTS\" - NEEDS DB CONNECTION\r\n\r\n  // Text similarity calculation using simple keyword matching\r\n  private calculateSimilarity(text1: string, text2: string): number {\r\n    const words1 = text1.toLowerCase().split(/\\s+/);\r\n    const words2 = text2.toLowerCase().split(/\\s+/);\r\n    \r\n    const intersection = words1.filter(word => words2.includes(word));\r\n    const union = Array.from(new Set([...words1, ...words2]));\r\n    \r\n    return intersection.length / union.length;\r\n  }\r\n\r\n  // Enhanced keyword extraction and matching\r\n  private extractKeywords(query: string): string[] {\r\n    const keywords = query.toLowerCase()\r\n      .replace(/[^\\w\\s]/g, ' ')\r\n      .split(/\\s+/)\r\n      .filter(word => word.length > 2)\r\n      .filter(word => !['und', 'oder', 'der', 'die', 'das', 'ist', 'sind', 'fÃ¼r', 'mit', 'von', 'zu', 'auf', 'bei'].includes(word));\r\n    \r\n    return Array.from(new Set(keywords));\r\n  }\r\n\r\n  // Search through regulatory data sources\r\n  private async searchRegulatoryData(query: string, filters: SearchFilters): Promise<SearchResult[]> {\r\n    const results: SearchResult[] = [];\r\n    const keywords = this.extractKeywords(query);\r\n    \r\n    // Echte regulatory data aus der Datenbank laden\r\n    let regulatoryData: any[] = [];\r\n    try {\r\n      const storage = await import('../storage');\r\n      const allUpdates = await storage.default.getAllRegulatoryUpdates();\r\n      regulatoryData = allUpdates.slice(0, 50); // Begrenzte Anzahl fÃ¼r Performance\r\n    } catch (error) {\r\n      console.error('Error loading regulatory data for search:', error);\r\n    }\r\n\r\n    for (const item of regulatoryData) {\r\n      const relevance = this.calculateSimilarity(query, item.title + \" \" + item.content);\r\n      if (relevance > 0.1) {\r\n        results.push({\r\n          id: item.id,\r\n          title: item.title,\r\n          content: item.content,\r\n          excerpt: item.content.substring(0, 200) + \"...\",\r\n          type: 'regulatory',\r\n          source: item.source,\r\n          relevance,\r\n          date: item.date,\r\n          metadata: {\r\n            region: item.region,\r\n            deviceClass: item.deviceClass,\r\n            tags: keywords\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  // Search through legal cases\r\n  private async searchLegalData(query: string, filters: SearchFilters): Promise<SearchResult[]> {\r\n    const results: SearchResult[] = [];\r\n    const keywords = this.extractKeywords(query);\r\n    \r\n    // Get legal cases from legal data service (using dynamic import)\r\n    try {\r\n      const { legalDataService } = await import('./legalDataService');\r\n      // Echte Legal Cases aus der Datenbank laden\r\n      let legalData: any[] = [];\r\n      try {\r\n        const storage = await import('../storage');\r\n        legalData = await storage.default.getAllLegalCases();\r\n      } catch (error) {\r\n        console.error('Error loading legal data for search:', error);\r\n      }\r\n\r\n      for (const legalCase of legalData) {\r\n        const relevance = this.calculateSimilarity(query, legalCase.title + \" \" + legalCase.summary);\r\n        if (relevance > 0.1) {\r\n          results.push({\r\n            id: legalCase.id,\r\n            title: legalCase.title,\r\n            content: legalCase.summary,\r\n            excerpt: legalCase.summary.substring(0, 200) + \"...\",\r\n            type: 'legal',\r\n            source: 'Legal Database',\r\n            relevance,\r\n            date: legalCase.date,\r\n            url: legalCase.url,\r\n            metadata: {\r\n              region: legalCase.jurisdiction,\r\n              category: legalCase.caseType,\r\n              tags: keywords\r\n            }\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading legal data service:', error);\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  // Search through knowledge base\r\n  private async searchKnowledgeBase(query: string, filters: SearchFilters): Promise<SearchResult[]> {\r\n    const results: SearchResult[] = [];\r\n    const keywords = this.extractKeywords(query);\r\n    \r\n    // ðŸ”´ MOCK DATA REPAIR - Load real knowledge articles from database\r\n    let knowledgeData: any[] = [];\r\n    try {\r\n      const storage = await import('../storage');\r\n      knowledgeData = await storage.default.getAllKnowledgeArticles();\r\n      console.log(`[SEARCH] Loaded ${knowledgeData.length} knowledge articles from database`);\r\n    } catch (error) {\r\n      console.error('ðŸ”´ MOCK DATA - Error loading knowledge articles:', error);\r\n    }\r\n    \r\n    for (const item of knowledgeData) {\r\n      const relevance = this.calculateSimilarity(query, item.title + \" \" + item.content);\r\n      if (relevance > 0.1) {\r\n        results.push({\r\n          id: item.id,\r\n          title: item.title,\r\n          content: item.content,\r\n          excerpt: item.content.substring(0, 200) + \"...\",\r\n          type: 'knowledge',\r\n          source: item.source || \"Helix Knowledge Base\",\r\n          relevance,\r\n          date: item.publishedAt || item.createdAt || \"2025-01-20\",\r\n          metadata: {\r\n            region: item.region,\r\n            deviceClass: item.deviceClass,\r\n            category: item.category,\r\n            tags: item.tags || keywords\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  // Search through historical data\r\n  private async searchHistoricalData(query: string, filters: SearchFilters): Promise<SearchResult[]> {\r\n    const results: SearchResult[] = [];\r\n    const keywords = this.extractKeywords(query);\r\n    \r\n    // Get historical data from all sources\r\n    const historicalSources = ['fda_guidance', 'ema_guidelines', 'bfarm_guidance', 'mhra_guidance', 'swissmedic_guidance'];\r\n    \r\n    try {\r\n      const { historicalDataService } = await import('./historicalDataService');\r\n      \r\n      for (const sourceId of historicalSources) {\r\n        try {\r\n          const documents = await historicalDataService.getHistoricalData(sourceId);\r\n        \r\n        for (const doc of documents.slice(0, 5)) { // Limit for performance\r\n          const relevance = this.calculateSimilarity(query, doc.title + \" \" + (doc.summary || ''));\r\n          if (relevance > 0.1) {\r\n            results.push({\r\n              id: doc.id,\r\n              title: doc.title,\r\n              content: doc.summary || doc.title,\r\n              excerpt: (doc.summary || doc.title).substring(0, 200) + \"...\",\r\n              type: 'historical',\r\n              source: sourceId.replace('_', ' ').toUpperCase(),\r\n              relevance,\r\n              date: doc.publishedDate,\r\n              url: doc.documentUrl,\r\n              metadata: {\r\n                region: doc.region,\r\n                category: doc.documentType,\r\n                language: doc.language,\r\n                tags: keywords\r\n              }\r\n            });\r\n          }\r\n        }\r\n        } catch (error) {\r\n          console.error(`Error searching historical data for ${sourceId}:`, error);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading historical data service:', error);\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  // Generate intelligent answer based on search results\r\n  private generateIntelligentAnswer(query: string, results: SearchResult[]): IntelligentAnswer {\r\n    const topResults = results.slice(0, 5);\r\n    const sources = Array.from(new Set(topResults.map(r => r.source)));\r\n    \r\n    // Simple answer generation based on query patterns\r\n    let answer = \"\";\r\n    let confidence = 75;\r\n    let recommendations: string[] = [];\r\n    let relatedTopics: string[] = [];\r\n\r\n    // ALLE MOCK-ANTWORTEN ENTFERNT - Nur echte Datenbank-Suche verwenden\r\n    const topResult = topResults[0];\r\n    if (topResult) {\r\n      answer = `Based auf echten Datenbank-Ergebnissen: ${topResult.content.substring(0, 300)}...`;\r\n      confidence = Math.round(topResult.relevance * 100);\r\n      recommendations = [\"ÃœberprÃ¼fen Sie die Quelldokumente fÃ¼r detaillierte Informationen\"];\r\n      relatedTopics = topResult.metadata.tags || [];\r\n    } else {\r\n      answer = \"Keine Informationen in der Datenbank gefunden. Die Suche basiert nur auf authentischen Datenquellen.\";\r\n      confidence = 0;\r\n      recommendations = [\"Erweitern Sie Ihre Suche oder synchronisieren Sie neue Datenquellen\"];\r\n      relatedTopics = [];\r\n    }\r\n\r\n    return {\r\n      query,\r\n      answer,\r\n      confidence,\r\n      sources,\r\n      recommendations,\r\n      relatedTopics,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n  }\r\n\r\n  // Main search function\r\n  async search(query: string, filters: SearchFilters = { type: \"all\", region: \"all\", timeframe: \"all\" }) {\r\n    const allResults: SearchResult[] = [];\r\n\r\n    try {\r\n      // Search all data sources in parallel if type is \"all\"\r\n      if (filters.type === \"all\" || filters.type === \"regulatory\") {\r\n        const regulatoryResults = await this.searchRegulatoryData(query, filters);\r\n        allResults.push(...regulatoryResults);\r\n      }\r\n\r\n      if (filters.type === \"all\" || filters.type === \"legal\") {\r\n        const legalResults = await this.searchLegalData(query, filters);\r\n        allResults.push(...legalResults);\r\n      }\r\n\r\n      if (filters.type === \"all\" || filters.type === \"knowledge\") {\r\n        const knowledgeResults = await this.searchKnowledgeBase(query, filters);\r\n        allResults.push(...knowledgeResults);\r\n      }\r\n\r\n      if (filters.type === \"all\" || filters.type === \"historical\") {\r\n        const historicalResults = await this.searchHistoricalData(query, filters);\r\n        allResults.push(...historicalResults);\r\n      }\r\n\r\n      // Sort by relevance\r\n      allResults.sort((a, b) => b.relevance - a.relevance);\r\n\r\n      // Generate intelligent answer\r\n      const intelligentAnswer = this.generateIntelligentAnswer(query, allResults);\r\n\r\n      return {\r\n        results: allResults.slice(0, 20), // Limit to top 20 results\r\n        answer: intelligentAnswer,\r\n        totalResults: allResults.length\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Error in intelligent search:\", error);\r\n      throw new Error(\"Fehler bei der intelligenten Suche\");\r\n    }\r\n  }\r\n}\r\n\r\nexport const intelligentSearchService = new IntelligentSearchService();\r\n\r\n// ðŸ”´ MOCK DATA REPAIR - Export service for API routes\r\nexport { IntelligentSearchService };"]}