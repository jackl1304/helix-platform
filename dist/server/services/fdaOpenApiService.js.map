{"version":3,"file":"fdaOpenApiService.js","sourceRoot":"","sources":["../../../server/services/fdaOpenApiService.ts"],"names":[],"mappings":"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","sourcesContent":["import { storage } from '../storage';\r\n\r\ninterface FDADevice {\r\n  k_number?: string;\r\n  device_name?: string;\r\n  applicant?: string;\r\n  date_received?: string;\r\n  decision_date?: string;\r\n  decision?: string;\r\n  review_advisory_committee?: string;\r\n  product_code?: string;\r\n  regulation_number?: string;\r\n  clearance_type?: string;\r\n  third_party_flag?: string;\r\n  expedited_review_flag?: string;\r\n  statement_or_summary?: string;\r\n  type?: string;\r\n  openfda?: {\r\n    device_name?: string;\r\n    medical_specialty_description?: string;\r\n    regulation_number?: string;\r\n    device_class?: string;\r\n    fei_number?: string[];\r\n    registration_number?: string[];\r\n  };\r\n}\r\n\r\ninterface FDARecall {\r\n  recall_number?: string;\r\n  reason_for_recall?: string;\r\n  status?: string;\r\n  distribution_pattern?: string;\r\n  product_description?: string;\r\n  code_info?: string;\r\n  product_quantity?: string;\r\n  recall_initiation_date?: string;\r\n  state?: string;\r\n  event_id?: string;\r\n  product_type?: string;\r\n  more_code_info?: string;\r\n  recalling_firm?: string;\r\n  address_1?: string;\r\n  address_2?: string;\r\n  city?: string;\r\n  state_code?: string;\r\n  postal_code?: string;\r\n  country?: string;\r\n  voluntary_mandated?: string;\r\n  classification?: string;\r\n  openfda?: {\r\n    device_name?: string;\r\n    medical_specialty_description?: string;\r\n    regulation_number?: string;\r\n    device_class?: string;\r\n    fei_number?: string[];\r\n    registration_number?: string[];\r\n  };\r\n}\r\n\r\nexport class FDAOpenAPIService {\r\n  private baseUrl = 'https://api.fda.gov';\r\n  private apiKey = process.env.FDA_API_KEY || '';\r\n  private rateLimitDelay = 250; // 250ms between requests (240 requests/minute limit)\r\n  private maxRetries = 3;\r\n  private retryDelay = 2000; // 2 second retry delay\r\n\r\n  private async delay(ms: number): Promise<void> {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n\r\n  private async exponentialBackoff(attempt: number): Promise<void> {\r\n    const delay = this.retryDelay * Math.pow(2, attempt);\r\n    await this.delay(delay);\r\n  }\r\n\r\n  private async makeRequest(endpoint: string, retryAttempt: number = 0): Promise<any> {\r\n    try {\r\n      // Add API key as URL parameter if available\r\n      const urlWithKey = this.apiKey ? \r\n        `${endpoint}${endpoint.includes('?') ? '&' : '?'}api_key=${this.apiKey}` : \r\n        endpoint;\r\n      \r\n      console.log(`🔄 [FDA API] Requesting: ${urlWithKey.replace(this.apiKey, 'API_KEY_HIDDEN')} (attempt ${retryAttempt + 1})`);\r\n      \r\n      const response = await fetch(urlWithKey, {\r\n        headers: {\r\n          'User-Agent': 'Helix-Regulatory-Intelligence/1.0',\r\n          'Accept': 'application/json'\r\n        }\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        if (response.status === 429 && retryAttempt < this.maxRetries) {\r\n          console.log(`⏱️ [FDA API] Rate limited, retrying after backoff...`);\r\n          await this.exponentialBackoff(retryAttempt);\r\n          return this.makeRequest(endpoint, retryAttempt + 1);\r\n        }\r\n        throw new Error(`FDA API error: ${response.status} ${response.statusText}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      \r\n      // Validate response structure\r\n      if (!data || typeof data !== 'object') {\r\n        throw new Error('Invalid FDA API response format');\r\n      }\r\n      \r\n      // Rate limiting\r\n      await this.delay(this.rateLimitDelay);\r\n      \r\n      console.log(`✅ [FDA API] Request successful - received ${data.results?.length || 0} items`);\r\n      return data;\r\n    } catch (error) {\r\n      if (retryAttempt < this.maxRetries && !(error as Error).message.includes('Rate limited')) {\r\n        console.log(`🔄 [FDA API] Retrying request (attempt ${retryAttempt + 2})...`);\r\n        await this.exponentialBackoff(retryAttempt);\r\n        return this.makeRequest(endpoint, retryAttempt + 1);\r\n      }\r\n      \r\n      console.error(`❌ [FDA API] Request failed after ${retryAttempt + 1} attempts:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async collect510kDevices(limit: number = 100): Promise<FDADevice[]> {\r\n    try {\r\n      console.log(`[FDA API] Collecting 510(k) devices (limit: ${limit})`);\r\n      \r\n      const endpoint = `${this.baseUrl}/device/510k.json?limit=${limit}&sort=date_received:desc`;\r\n      const data = await this.makeRequest(endpoint);\r\n      \r\n      if (!data.results || !Array.isArray(data.results)) {\r\n        throw new Error('Invalid FDA 510k response format');\r\n      }\r\n      \r\n      console.log(`[FDA API] Found ${data.results.length} 510(k) devices`);\r\n      \r\n      for (const device of data.results as FDADevice[]) {\r\n        await this.process510kDevice(device);\r\n      }\r\n      \r\n      console.log(`[FDA API] 510(k) collection completed`);\r\n      return data.results as FDADevice[];\r\n    } catch (error) {\r\n      console.error('[FDA API] Error collecting 510k devices:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async process510kDevice(device: FDADevice): Promise<void> {\r\n    try {\r\n      const regulatoryUpdate = {\r\n        title: `FDA 510(k): ${device.device_name || 'Unknown Device'}${device.k_number ? ` (${device.k_number})` : ''}`,\r\n        description: this.formatDeviceContent(device),\r\n        sourceId: 'fda_510k',\r\n        sourceUrl: `https://www.fda.gov/medical-devices/510k-clearances/510k-clearance-${device.k_number}`,\r\n        region: 'US',\r\n        updateType: 'approval' as const,\r\n        priority: this.determinePriority(device),\r\n        deviceClasses: device.openfda?.device_class ? [device.openfda.device_class] : [],\r\n        categories: await this.categorizeDevice(device),\r\n        rawData: device,\r\n        publishedAt: this.parseDate(device.decision_date) || new Date(),\r\n      };\r\n      \r\n      await storage.createRegulatoryUpdate(regulatoryUpdate);\r\n      console.log(`[FDA API] Successfully created regulatory update: ${regulatoryUpdate.title}`);\r\n    } catch (error) {\r\n      console.error('[FDA API] Error processing 510k device:', error);\r\n    }\r\n  }\r\n\r\n  async collectRecalls(limit: number = 100): Promise<FDARecall[]> {\r\n    try {\r\n      console.log(`[FDA API] Collecting device recalls (limit: ${limit})`);\r\n      \r\n      const endpoint = `${this.baseUrl}/device/recall.json?limit=${limit}&sort=recall_initiation_date:desc`;\r\n      const data = await this.makeRequest(endpoint);\r\n      \r\n      if (!data.results || !Array.isArray(data.results)) {\r\n        throw new Error('Invalid FDA recall response format');\r\n      }\r\n      \r\n      console.log(`[FDA API] Found ${data.results.length} recalls`);\r\n      \r\n      for (const recall of data.results as FDARecall[]) {\r\n        await this.processRecall(recall);\r\n      }\r\n      \r\n      console.log(`[FDA API] Recall collection completed`);\r\n      return data.results as FDARecall[];\r\n    } catch (error) {\r\n      console.error('[FDA API] Error collecting recalls:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async processRecall(recall: FDARecall): Promise<void> {\r\n    try {\r\n      const regulatoryUpdate = {\r\n        title: `FDA Recall: ${recall.product_description || 'Medical Device Recall'}`,\r\n        description: this.formatRecallContent(recall),\r\n        sourceId: 'fda_recalls',\r\n        sourceUrl: `https://www.fda.gov/medical-devices/medical-device-recalls/${recall.recall_number}`,\r\n        region: 'US',\r\n        updateType: 'recall' as const,\r\n        priority: this.determineRecallPriority(recall),\r\n        deviceClasses: recall.openfda?.device_class ? [recall.openfda.device_class] : [],\r\n        categories: ['Safety Alert', 'Device Recall'],\r\n        rawData: recall,\r\n        publishedAt: this.parseDate(recall.recall_initiation_date) || new Date(),\r\n      };\r\n      \r\n      await storage.createRegulatoryUpdate(regulatoryUpdate);\r\n      console.log(`[FDA API] Successfully created recall update: ${regulatoryUpdate.title}`);\r\n    } catch (error) {\r\n      console.error('[FDA API] Error processing recall:', error);\r\n    }\r\n  }\r\n\r\n  private formatDeviceContent(device: FDADevice): string {\r\n    const parts = [\r\n      `K-Nummer: ${device.k_number || 'N/A'}`,\r\n      `Antragsteller: ${device.applicant || 'N/A'}`,\r\n      `Produktcode: ${device.product_code || 'N/A'}`,\r\n      `Geräteklasse: ${device.openfda?.device_class || 'N/A'}`,\r\n      `Regulierungsnummer: ${device.regulation_number || device.openfda?.regulation_number || 'N/A'}`,\r\n      `Entscheidungsdatum: ${device.decision_date || 'N/A'}`,\r\n      `Status: ${device.decision || 'N/A'}`\r\n    ];\r\n\r\n    if (device.statement_or_summary) {\r\n      parts.push(`Zusammenfassung: ${device.statement_or_summary}`);\r\n    }\r\n\r\n    if (device.openfda?.medical_specialty_description) {\r\n      parts.push(`Medizinischer Bereich: ${device.openfda.medical_specialty_description}`);\r\n    }\r\n\r\n    return parts.join('\\n');\r\n  }\r\n\r\n  private formatRecallContent(recall: FDARecall): string {\r\n    const parts = [\r\n      `Recall-Nummer: ${recall.recall_number || 'N/A'}`,\r\n      `Grund: ${recall.reason_for_recall || 'N/A'}`,\r\n      `Status: ${recall.status || 'N/A'}`,\r\n      `Klassifizierung: ${recall.classification || 'N/A'}`,\r\n      `Rückrufende Firma: ${recall.recalling_firm || 'N/A'}`,\r\n      `Produktmenge: ${recall.product_quantity || 'N/A'}`,\r\n      `Verteilungsmuster: ${recall.distribution_pattern || 'N/A'}`,\r\n      `Freiwillig/Verpflichtend: ${recall.voluntary_mandated || 'N/A'}`\r\n    ];\r\n\r\n    if (recall.code_info) {\r\n      parts.push(`Code-Info: ${recall.code_info}`);\r\n    }\r\n\r\n    return parts.join('\\n');\r\n  }\r\n\r\n  private parseDate(dateString: string | undefined): Date | null {\r\n    if (!dateString) return null;\r\n    \r\n    try {\r\n      return new Date(dateString);\r\n    } catch {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private determinePriority(device: FDADevice): 'critical' | 'high' | 'medium' | 'low' {\r\n    const deviceClass = device.openfda?.device_class;\r\n    const deviceName = device.device_name?.toLowerCase() || '';\r\n    \r\n    // High-risk devices\r\n    if (deviceClass === 'Class III' || \r\n        deviceName.includes('implant') || \r\n        deviceName.includes('pacemaker') ||\r\n        deviceName.includes('defibrillator')) {\r\n      return 'critical';\r\n    }\r\n    \r\n    // AI/ML devices\r\n    if (deviceName.includes('ai') || \r\n        deviceName.includes('artificial intelligence') ||\r\n        deviceName.includes('machine learning')) {\r\n      return 'high';\r\n    }\r\n    \r\n    // Class II devices\r\n    if (deviceClass === 'Class II') {\r\n      return 'medium';\r\n    }\r\n    \r\n    return 'low';\r\n  }\r\n\r\n  private determineRecallPriority(recall: FDARecall): 'critical' | 'high' | 'medium' | 'low' {\r\n    const classification = recall.classification?.toLowerCase() || '';\r\n    const reason = recall.reason_for_recall?.toLowerCase() || '';\r\n    \r\n    // Class I recalls (most serious)\r\n    if (classification.includes('class i') || \r\n        reason.includes('death') || \r\n        reason.includes('serious injury')) {\r\n      return 'critical';\r\n    }\r\n    \r\n    // Class II recalls\r\n    if (classification.includes('class ii')) {\r\n      return 'high';\r\n    }\r\n    \r\n    // Class III recalls\r\n    if (classification.includes('class iii')) {\r\n      return 'medium';\r\n    }\r\n    \r\n    return 'medium'; // Default for recalls\r\n  }\r\n\r\n  private async categorizeDevice(device: FDADevice): Promise<string[]> {\r\n    const categories: string[] = [];\r\n    const deviceName = device.device_name?.toLowerCase() || '';\r\n    const specialty = device.openfda?.medical_specialty_description?.toLowerCase() || '';\r\n    \r\n    // Medical specialties\r\n    if (specialty.includes('cardio')) categories.push('Kardiologie');\r\n    if (specialty.includes('neuro')) categories.push('Neurologie');\r\n    if (specialty.includes('ortho')) categories.push('Orthopädie');\r\n    if (specialty.includes('radio')) categories.push('Radiologie');\r\n    \r\n    // Device types\r\n    if (deviceName.includes('software') || deviceName.includes('ai')) {\r\n      categories.push('Software-Medizinprodukt');\r\n    }\r\n    if (deviceName.includes('implant')) categories.push('Implantat');\r\n    if (deviceName.includes('monitor')) categories.push('Monitoring');\r\n    if (deviceName.includes('diagnostic')) categories.push('Diagnostik');\r\n    \r\n    // Default category\r\n    if (categories.length === 0) {\r\n      categories.push('Medizinprodukt');\r\n    }\r\n    \r\n    return categories;\r\n  }\r\n}\r\n\r\nexport const fdaOpenApiService = new FDAOpenAPIService();"]}