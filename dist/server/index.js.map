{"version":3,"file":"index.js","sourceRoot":"","sources":["../../server/index.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,QAAQ,CAAC;AAC5B,MAAM,CAAC,MAAM,EAAE,CAAC;AAEhB,OAAO,OAA2D,MAAM,SAAS,CAAC;AAElF,OAAO,IAAI,MAAM,MAAM,CAAC;AACxB,OAAO,EAAE,cAAc,EAAE,MAAM,UAAU,CAAC;AAC1C,OAAO,EAAE,qBAAqB,EAAE,MAAM,kBAAkB,CAAC;AAEzD,OAAO,gBAAgB,MAAM,6BAA6B,CAAC;AAC3D,OAAO,eAAe,MAAM,qBAAqB,CAAC;AAClD,OAAO,cAAc,MAAM,2BAA2B,CAAC;AACvD,OAAO,EAAE,yBAAyB,EAAE,MAAM,+BAA+B,CAAC;AAC1E,OAAO,EAAE,mBAAmB,EAAE,MAAM,kCAAkC,CAAC;AACvE,OAAO,EAAE,SAAS,EAAE,GAAG,EAAE,MAAM,QAAQ,CAAC;AACxC,OAAO,EAAE,MAAM,IAAI,CAAC;AACpB,OAAO,IAAI,MAAM,MAAM,CAAC;AACxB,OAAO,EAAE,MAAM,EAAE,MAAM,2BAA2B,CAAC;AACnD,OAAO,KAAK,MAAM,YAAY,CAAC;AAC/B,OAAO,EAAE,YAAY,EAAE,MAAM,QAAQ,CAAC;AAEtC,OAAO,EAAE,IAAI,EAAE,MAAM,0BAA0B,CAAC;AAGhD,YAAY,CAAC,mBAAmB,GAAG,EAAE,CAAC;AACtC,OAAO,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;AAG5B,MAAM,CAAC,MAAM,GAAG,GAAG,OAAO,EAAE,CAAC;AAI7B,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;AAG/B,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;AACzC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;AAGhE,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;IACzB,mBAAmB,CAAC,GAAU,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AACzD,CAAC,CAAC,CAAC;AAGH,GAAG,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;IACxC,yBAAyB,CAAC,GAAU,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAC/D,CAAC,CAAC,CAAC;AACH,GAAG,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;IACpC,yBAAyB,CAAC,GAAU,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAC/D,CAAC,CAAC,CAAC;AAGH,KAAK,UAAU,cAAc,CAAC,MAAc,EAAE,KAAK,GAAG,OAAO;IAC3D,IAAI,CAAC;QACH,MAAM,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC;QAC/C,IAAI,CAAC,OAAO;YAAE,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;QAEtE,MAAM,GAAG,GAAG,MAAM,KAAK,CAAC,4CAA4C,EAAE;YACpE,MAAM,EAAE,MAAM;YACd,OAAO,EAAE;gBACP,aAAa,EAAE,UAAU,OAAO,EAAE;gBAClC,cAAc,EAAE,kBAAkB;aACnC;YACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC;SAC/E,CAAC,CAAC;QACH,IAAI,CAAC,GAAG,CAAC,EAAE;YAAE,MAAM,IAAI,KAAK,CAAC,wBAAwB,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC;QACnE,MAAM,IAAI,GAAG,MAAM,GAAG,CAAC,IAAI,EAAS,CAAC;QACrC,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,OAAO,IAAI,EAAE,CAAC;IACnD,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,KAAK,CAAC,CAAC;QAC9C,OAAO,8DAA8D,CAAC;IACxE,CAAC;AACH,CAAC;AAGD,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,YAAY,CAAC,CAAC;AAGxC,GAAG,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE;IACnC,GAAG,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;AAClE,CAAC,CAAC,CAAC;AAGH,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,EAAE;IACxD,IAAI,CAAC;QACH,MAAM,MAAM,GAAG,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC;QAChC,IAAI,CAAC,MAAM;YAAE,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,6BAA6B,EAAE,CAAC,CAAC;QACnF,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,MAAM,CAAC,CAAC;QAC5C,OAAO,GAAG,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;IAC9B,CAAC;IAAC,OAAO,GAAQ,EAAE,CAAC;QAClB,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACnB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,6BAA6B,EAAE,CAAC,CAAC;IACxE,CAAC;AACH,CAAC,CAAC,CAAC;AAGH,KAAK,UAAU,WAAW;IAExB,MAAM,YAAY,GAAG,MAAM,cAAc,CAAC,GAAG,CAAC,CAAC;IAG/C,qBAAqB,CAAC,GAAG,CAAC,CAAC;IAG3B,GAAG,CAAC,GAAG,CAAC,kBAAkB,EAAE,gBAAgB,CAAC,CAAC;IAC9C,GAAG,CAAC,GAAG,CAAC,aAAa,EAAE,eAAe,CAAC,CAAC;IAIxC,GAAG,CAAC,GAAG,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;IAGrC,GAAG,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,GAAY,EAAE,GAAa,EAAE,EAAE;QACvD,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;QAC5C,GAAG,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;IAGH,MAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,YAAa,CAAC,CAAC;IAEpD,GAAG,CAAC,IAAI,CAAC,eAAe,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;QAC3C,IAAI,CAAC;YACH,MAAM,EACJ,IAAI,EACJ,IAAI,GAAG,SAAS,EAChB,KAAK,EACL,OAAO,EACP,SAAS,EACT,QAAQ,EACR,WAAW,GAAG,EAAE,EACjB,GAAG,GAAG,CAAC,IAAI,CAAC;YAEb,OAAO,CAAC,GAAG,CAAC,sBAAsB,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;YAGrE,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,IAAI,CAAC,OAAO,EAAE,CAAC;gBAChC,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,KAAK,EAAE,2CAA2C;iBACnD,CAAC,CAAC;YACL,CAAC;YAGD,MAAM,QAAQ,GAAG,mBAAmB,CAAC;YACrC,MAAM,MAAM,GAAG,IAAI,CAAC;YAGpB,MAAM,MAAM,GAAG,MAAM,WAAW,CAAA;;;;;UAK1B,QAAQ,KAAK,MAAM,KAAK,IAAI,KAAK,IAAI,KAAK,KAAK,KAAK,OAAO;UAC3D,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC;;KAE3D,CAAC;YAEF,MAAM,UAAU,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;YAEjC,OAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE,UAAU,CAAC,CAAC;YAE/C,OAAO,GAAG,CAAC,IAAI,CAAC;gBACd,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,qEAAqE;gBAC9E,UAAU;aACX,CAAC,CAAC;QAEL,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,mBAAmB,EAAE,KAAK,CAAC,CAAC;YAC1C,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,KAAK,EAAE,uCAAuC;aAC/C,CAAC,CAAC;QACL,CAAC;IACH,CAAC,CAAC,CAAC;IAGH,GAAG,CAAC,GAAG,CAAC,eAAe,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;QAC1C,IAAI,CAAC;YACH,MAAM,EAAE,MAAM,GAAG,KAAK,EAAE,IAAI,GAAG,KAAK,EAAE,IAAI,EAAE,KAAK,GAAG,EAAE,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC;YAErE,MAAM,QAAQ,GAAG,MAAM,WAAW,CAAA;;;cAGxB,MAAM,CAAC,KAAK,CAAC;KACtB,CAAC;YAEF,GAAG,CAAC,IAAI,CAAC;gBACP,OAAO,EAAE,IAAI;gBACb,KAAK,EAAE,QAAQ,CAAC,MAAM;gBACtB,QAAQ;aACT,CAAC,CAAC;QAEL,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,KAAK,CAAC,CAAC;YAC9C,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,mCAAmC,EAAE,CAAC,CAAC;QACvE,CAAC;IACH,CAAC,CAAC,CAAC;IAGH,GAAG,CAAC,GAAG,CAAC,0BAA0B,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;QACrD,IAAI,CAAC;YACH,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAC1B,MAAM,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;YAE5B,MAAM,WAAW,CAAA;;qBAEA,MAAM;mBACR,EAAE;KAChB,CAAC;YAEF,GAAG,CAAC,IAAI,CAAC;gBACP,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,0CAA0C;aACpD,CAAC,CAAC;QAEL,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,0BAA0B,EAAE,KAAK,CAAC,CAAC;YACjD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,+CAA+C,EAAE,CAAC,CAAC;QACnF,CAAC;IACH,CAAC,CAAC,CAAC;IAGH,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;QAC7B,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,uBAAuB,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IACrE,CAAC,CAAC,CAAC;IAGH,GAAG,CAAC,GAAG,CAAC,CAAC,GAAQ,EAAE,IAAa,EAAE,GAAa,EAAE,KAAmB,EAAE,EAAE;QACtE,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,OAAO,IAAI,uBAAuB,EAAE,CAAC,CAAC;IACxF,CAAC,CAAC,CAAC;IAID,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,IAAI,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,aAAa,CAAC;IACzF,IAAI,CAAC,MAAM,EAAE,CAAC;QAEZ,SAAS,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACpD,CAAC;SAAM,CAAC;QAEN,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,EAAE,WAAW,CAAC,CAAC;QACnF,IAAI,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC;YAC5B,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;YAClC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE;gBACzB,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC,CAAC;YACrD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAGD,MAAM,IAAI,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,MAAM,EAAE,EAAE,CAAC,CAAC;IACtD,YAAY,CAAC,MAAM,CAAC,IAAI,EAAE,SAAS,EAAE,GAAG,EAAE;QACxC,GAAG,CAAC,yBAAyB,IAAI,EAAE,CAAC,CAAC;QACrC,OAAO,CAAC,GAAG,CAAC,0CAA0C,IAAI,EAAE,CAAC,CAAC;IAChE,CAAC,CAAC,CAAC;AACL,CAAC;AAGD,WAAW,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC","sourcesContent":["import dotenv from \"dotenv\";\r\ndotenv.config();\r\n\r\nimport express, { type Request, type Response, type NextFunction } from \"express\";\r\nimport { createServer } from \"http\";\r\nimport cors from \"cors\";\r\nimport { registerRoutes } from \"./routes\";\r\nimport { setupCustomerAIRoutes } from \"./temp-ai-routes\";\r\nimport tenantRoutes from \"./routes/tenant-routes\";\r\nimport tenantAuthRoutes from \"./routes/tenant-auth-simple\";\r\nimport tenantApiRoutes from \"./routes/tenant-api\";\r\nimport aiSearchRoutes from \"./routes/ai-search-routes\";\r\nimport { tenantIsolationMiddleware } from \"./middleware/tenant-isolation\";\r\nimport { analyticsMiddleware } from \"./middleware/analyticsMiddleware\";\r\nimport { setupVite, log } from \"./vite\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport { Logger } from \"./services/logger.service\";\r\nimport fetch from \"node-fetch\";\r\nimport { EventEmitter } from \"events\";\r\n// import \"./services/startupSyncService\"; // DISABLED - was causing endless duplicate loop\r\nimport { neon } from \"@neondatabase/serverless\";\r\n\r\n// Listener-Warnungen entschärfen\r\nEventEmitter.defaultMaxListeners = 30;\r\nprocess.setMaxListeners(30);\r\n\r\n// Express-App initialisieren\r\nexport const app = express();\r\n// Server wird von registerRoutes erstellt\r\n\r\n// CORS aktivieren (für alle Ursprünge, später einschränken)\r\napp.use(cors({ origin: \"*\" }));\r\n\r\n// Body-Parser\r\napp.use(express.json({ limit: \"50mb\" }));\r\napp.use(express.urlencoded({ extended: false, limit: \"50mb\" }));\r\n\r\n// Analytics Tracking Middleware (vor allen anderen Routen)\r\napp.use((req, res, next) => {\r\n  analyticsMiddleware(req as any, res, next).catch(next);\r\n});\r\n\r\n// Multi-Tenant Isolation Middleware\r\napp.use('/api/tenant', (req, res, next) => {\r\n  tenantIsolationMiddleware(req as any, res, next).catch(next);\r\n});\r\napp.use('/tenant', (req, res, next) => {\r\n  tenantIsolationMiddleware(req as any, res, next).catch(next);\r\n});\r\n\r\n// Simple Perplexity-Client\r\nasync function perplexityChat(prompt: string, model = \"sonar\"): Promise<string> {\r\n  try {\r\n    const API_KEY = process.env.PERPLEXITY_API_KEY;\r\n    if (!API_KEY) throw new Error(\"PERPLEXITY_API_KEY ist nicht gesetzt\");\r\n\r\n    const res = await fetch(\"https://api.perplexity.ai/chat/completions\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: `Bearer ${API_KEY}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ model, messages: [{ role: \"user\", content: prompt }] }),\r\n    });\r\n    if (!res.ok) throw new Error(`Perplexity API Error ${res.status}`);\r\n    const data = await res.json() as any;\r\n    return data.choices?.[0]?.message?.content || \"\";\r\n  } catch (error) {\r\n    console.error(\"Perplexity API Error:\", error);\r\n    return \"Entschuldigung, der AI-Service ist momentan nicht verfügbar.\";\r\n  }\r\n}\r\n\r\n// Logger\r\nconst logger = new Logger(\"ServerMain\");\r\n\r\n// Health-Check\r\napp.get(\"/api/health\", (_req, res) => {\r\n  res.json({ status: \"ok\", timestamp: new Date().toISOString() });\r\n});\r\n\r\n// AI-Route\r\napp.post(\"/api/ai\", async (req: Request, res: Response) => {\r\n  try {\r\n    const prompt = req.body?.prompt;\r\n    if (!prompt) return res.status(400).json({ error: \"Feld 'prompt' erforderlich.\" });\r\n    const answer = await perplexityChat(prompt);\r\n    return res.json({ answer });\r\n  } catch (err: any) {\r\n    console.error(err);\r\n    return res.status(500).json({ error: \"AI-Service nicht verfügbar.\" });\r\n  }\r\n});\r\n\r\n// Async startup function\r\nasync function startServer() {\r\n  // Register main routes - gets server back from routes\r\n  const routesServer = await registerRoutes(app);\r\n\r\n  // Setup customer AI routes  \r\n  setupCustomerAIRoutes(app);\r\n\r\n  // Register tenant-specific routes - ONLY new real data API\r\n  app.use('/api/tenant/auth', tenantAuthRoutes);\r\n  app.use('/api/tenant', tenantApiRoutes);  // NEW real data API with database connections\r\n  // OLD tenant routes REMOVED to prevent conflicts\r\n\r\n  // Register AI-powered search and analysis routes (Admin only)\r\n  app.use('/api/ai', aiSearchRoutes);\r\n\r\n// Weitere Routen\r\napp.post(\"/api/webhook\", (req: Request, res: Response) => {\r\n  console.log(\"Webhook empfangen:\", req.body);\r\n  res.json({ received: true });\r\n});\r\n\r\n// Quick Feedback Routes - MUSS VOR 404-Handler stehen\r\nconst sqlFeedback = neon(process.env.DATABASE_URL!);\r\n\r\napp.post('/api/feedback', async (req, res) => {\r\n  try {\r\n    const {\r\n      page,\r\n      type = 'general',\r\n      title,\r\n      message,\r\n      userEmail,\r\n      userName,\r\n      browserInfo = {}\r\n    } = req.body;\r\n    \r\n    console.log('[FEEDBACK] Received:', { page, type, title, userName });\r\n    \r\n    // Validation\r\n    if (!page || !title || !message) {\r\n      return res.status(400).json({ \r\n        error: 'Page, title und message sind erforderlich' \r\n      });\r\n    }\r\n    \r\n    // Get current tenant (default if not authenticated)\r\n    const tenantId = 'demo-medical-tech';\r\n    const userId = null;\r\n    \r\n    // Create feedback entry\r\n    const result = await sqlFeedback`\r\n      INSERT INTO feedback (\r\n        tenant_id, user_id, page, type, title, message, \r\n        user_email, user_name, browser_info, status, priority\r\n      ) VALUES (\r\n        ${tenantId}, ${userId}, ${page}, ${type}, ${title}, ${message},\r\n        ${userEmail}, ${userName}, ${JSON.stringify(browserInfo)}, 'new', 'medium'\r\n      ) RETURNING id\r\n    `;\r\n    \r\n    const feedbackId = result[0]?.id;\r\n    \r\n    console.log('[FEEDBACK] SUCCESS:', feedbackId);\r\n    \r\n    return res.json({\r\n      success: true,\r\n      message: 'Feedback erfolgreich übermittelt! Vielen Dank für Ihre Rückmeldung.',\r\n      feedbackId\r\n    });\r\n    \r\n  } catch (error: any) {\r\n    console.error('[FEEDBACK] ERROR:', error);\r\n    return res.status(500).json({ \r\n      error: 'Fehler beim Übermitteln des Feedbacks' \r\n    });\r\n  }\r\n});\r\n\r\n// Get all feedback\r\napp.get('/api/feedback', async (req, res) => {\r\n  try {\r\n    const { status = 'all', type = 'all', page, limit = 50 } = req.query;\r\n    \r\n    const feedback = await sqlFeedback`\r\n      SELECT * FROM feedback \r\n      ORDER BY created_at DESC \r\n      LIMIT ${Number(limit)}\r\n    `;\r\n    \r\n    res.json({\r\n      success: true,\r\n      total: feedback.length,\r\n      feedback\r\n    });\r\n    \r\n  } catch (error: any) {\r\n    console.error('[FEEDBACK] Get Error:', error);\r\n    res.status(500).json({ error: 'Fehler beim Abrufen des Feedbacks' });\r\n  }\r\n});\r\n\r\n// Update feedback status\r\napp.put('/api/feedback/:id/status', async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const { status } = req.body;\r\n    \r\n    await sqlFeedback`\r\n      UPDATE feedback \r\n      SET status = ${status}, updated_at = NOW()\r\n      WHERE id = ${id}\r\n    `;\r\n    \r\n    res.json({\r\n      success: true,\r\n      message: 'Feedback-Status erfolgreich aktualisiert'\r\n    });\r\n    \r\n  } catch (error: any) {\r\n    console.error('[FEEDBACK] Update Error:', error);\r\n    res.status(500).json({ error: 'Fehler beim Aktualisieren des Feedback-Status' });\r\n  }\r\n});\r\n\r\n// 404-Handler nur für API (must be AFTER all other routes)\r\napp.use(\"/api/*\", (req, res) => {\r\n  res.status(404).json({ error: `API nicht gefunden: ${req.path}` });\r\n});\r\n\r\n// Globaler Error-Handler\r\napp.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\r\n  res.status(err.status || 500).json({ error: err.message || \"Internal Server Error\" });\r\n});\r\n\r\n\r\n  // Entwicklungs- vs. Produktionsmodus\r\n  const isProd = process.env.NODE_ENV === \"production\" || app.get(\"env\") !== \"development\";\r\n  if (!isProd) {\r\n    // Vite Dev-Server im Dev-Modus\r\n    setupVite(app, routesServer).catch(console.error);\r\n  } else {\r\n    // Statische Dateien im Prod-Modus\r\n    const distPath = path.resolve(import.meta.url.replace(\"file://\", \"\"), \"../public\");\r\n    if (fs.existsSync(distPath)) {\r\n      app.use(express.static(distPath));\r\n      app.get(\"*\", (_req, res) => {\r\n        res.sendFile(path.resolve(distPath, \"index.html\"));\r\n      });\r\n    }\r\n  }\r\n\r\n  // Server starten\r\n  const port = parseInt(process.env.PORT || \"5000\", 10);\r\n  routesServer.listen(port, \"0.0.0.0\", () => {\r\n    log(`Server läuft auf Port ${port}`);\r\n    console.log(`🚀 Server is running on http://0.0.0.0:${port}`);\r\n  });\r\n}\r\n\r\n// Start the server\r\nstartServer().catch(console.error);\r\n"]}