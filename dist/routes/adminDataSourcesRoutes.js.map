{"version":3,"file":"adminDataSourcesRoutes.js","sourceRoot":"","sources":["../../server/routes/adminDataSourcesRoutes.ts"],"names":[],"mappings":"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","sourcesContent":["import { Router } from 'express';\r\nimport { apiManagementService } from '../services/apiManagementService';\r\nimport { realFDAApiService } from '../services/realFDAApiService';\r\nimport { webScrapingService } from '../services/webScrapingService';\r\n\r\nconst router = Router();\r\n\r\n/**\r\n * GET /api/admin/data-sources\r\n * Get all configured data sources\r\n */\r\nrouter.get('/data-sources', async (req, res) => {\r\n  try {\r\n    const dataSources = apiManagementService.getActiveDataSources();\r\n    res.json(dataSources);\r\n  } catch (error) {\r\n    console.error('[Admin API] Error fetching data sources:', error);\r\n    res.status(500).json({ error: 'Failed to fetch data sources' });\r\n  }\r\n});\r\n\r\n/**\r\n * GET /api/admin/data-sources/health\r\n * Perform health check on all data sources\r\n */\r\nrouter.get('/data-sources/health', async (req, res) => {\r\n  try {\r\n    const healthCheck = await apiManagementService.performHealthCheck();\r\n    res.json(healthCheck);\r\n  } catch (error) {\r\n    console.error('[Admin API] Error performing health check:', error);\r\n    res.status(500).json({ error: 'Failed to perform health check' });\r\n  }\r\n});\r\n\r\n/**\r\n * GET /api/admin/data-sources/unauthenticated\r\n * Get data sources that require authentication\r\n */\r\nrouter.get('/data-sources/unauthenticated', async (req, res) => {\r\n  try {\r\n    const unauthenticatedSources = apiManagementService.getUnauthenticatedSources();\r\n    res.json(unauthenticatedSources);\r\n  } catch (error) {\r\n    console.error('[Admin API] Error fetching unauthenticated sources:', error);\r\n    res.status(500).json({ error: 'Failed to fetch unauthenticated sources' });\r\n  }\r\n});\r\n\r\n/**\r\n * POST /api/admin/data-sources/:sourceId/sync\r\n * Trigger sync for a specific data source\r\n */\r\nrouter.post('/data-sources/:sourceId/sync', async (req, res) => {\r\n  try {\r\n    const { sourceId } = req.params;\r\n    let result;\r\n\r\n    switch (sourceId) {\r\n      case 'fda_openfda':\r\n        result = await realFDAApiService.syncAllFDAData();\r\n        break;\r\n      case 'bfarm_scraping':\r\n      case 'swissmedic_scraping':\r\n      case 'health_canada_scraping':\r\n        result = await webScrapingService.syncAllWebScrapingSources();\r\n        break;\r\n      default:\r\n        return res.status(400).json({ error: 'Unknown data source' });\r\n    }\r\n\r\n    res.json({\r\n      success: result.success,\r\n      message: `Sync completed: ${result.processed} processed, ${result.errors} errors`,\r\n      processed: result.processed,\r\n      errors: result.errors\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error(`[Admin API] Error syncing ${req.params.sourceId}:`, error);\r\n    res.status(500).json({ \r\n      error: 'Sync failed', \r\n      details: error instanceof Error ? error.message : 'Unknown error' \r\n    });\r\n  }\r\n});\r\n\r\n/**\r\n * POST /api/admin/data-sources/:sourceId/configure\r\n * Configure API key or credentials for a data source\r\n */\r\nrouter.post('/data-sources/:sourceId/configure', async (req, res) => {\r\n  try {\r\n    const { sourceId } = req.params;\r\n    const { apiKey } = req.body;\r\n\r\n    if (!apiKey) {\r\n      return res.status(400).json({ error: 'API key is required' });\r\n    }\r\n\r\n    // In a real implementation, this would securely store the API key\r\n    // For now, we'll just log the configuration attempt\r\n    console.log(`[Admin API] Configuring API key for ${sourceId}`);\r\n\r\n    // Simulate configuration success\r\n    res.json({\r\n      success: true,\r\n      message: `API key configured for ${sourceId}`,\r\n      sourceId\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error(`[Admin API] Error configuring ${req.params.sourceId}:`, error);\r\n    res.status(500).json({ \r\n      error: 'Configuration failed', \r\n      details: error instanceof Error ? error.message : 'Unknown error' \r\n    });\r\n  }\r\n});\r\n\r\n/**\r\n * GET /api/admin/data-sources/regions\r\n * Get data sources grouped by region\r\n */\r\nrouter.get('/data-sources/regions', async (req, res) => {\r\n  try {\r\n    const allSources = apiManagementService.getActiveDataSources();\r\n    const regionGroups = allSources.reduce((acc, source) => {\r\n      if (!acc[source.region]) {\r\n        acc[source.region] = [];\r\n      }\r\n      acc[source.region].push(source);\r\n      return acc;\r\n    }, {} as Record<string, typeof allSources>);\r\n\r\n    res.json(regionGroups);\r\n  } catch (error) {\r\n    console.error('[Admin API] Error fetching regions:', error);\r\n    res.status(500).json({ error: 'Failed to fetch regional data sources' });\r\n  }\r\n});\r\n\r\n/**\r\n * GET /api/admin/data-sources/statistics\r\n * Get comprehensive statistics about data sources\r\n */\r\nrouter.get('/data-sources/statistics', async (req, res) => {\r\n  try {\r\n    const allSources = apiManagementService.getActiveDataSources();\r\n    \r\n    const stats = {\r\n      total: allSources.length,\r\n      byType: {\r\n        official_api: allSources.filter(s => s.type === 'official_api').length,\r\n        web_scraping: allSources.filter(s => s.type === 'web_scraping').length,\r\n        partner_api: allSources.filter(s => s.type === 'partner_api').length,\r\n      },\r\n      byStatus: {\r\n        active: allSources.filter(s => s.status === 'active').length,\r\n        inactive: allSources.filter(s => s.status === 'inactive').length,\r\n        testing: allSources.filter(s => s.status === 'testing').length,\r\n      },\r\n      byPriority: {\r\n        high: allSources.filter(s => s.priority === 'high').length,\r\n        medium: allSources.filter(s => s.priority === 'medium').length,\r\n        low: allSources.filter(s => s.priority === 'low').length,\r\n      },\r\n      requireAuth: allSources.filter(s => s.requiresAuth).length,\r\n      withErrors: allSources.filter(s => s.errorCount > 0).length,\r\n    };\r\n\r\n    res.json(stats);\r\n  } catch (error) {\r\n    console.error('[Admin API] Error fetching statistics:', error);\r\n    res.status(500).json({ error: 'Failed to fetch statistics' });\r\n  }\r\n});\r\n\r\nexport default router;"]}