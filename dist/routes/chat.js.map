{"version":3,"file":"chat.js","sourceRoot":"","sources":["../../server/routes/chat.ts"],"names":[],"mappings":"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","sourcesContent":["// Chat Board API Routes für Tenant-Administrator-Kommunikation\r\nimport { Router } from 'express';\r\nimport { storage } from '../storage';\r\nimport { insertChatMessageSchema, insertChatConversationSchema } from '../../shared/schema';\r\nimport { z } from 'zod';\r\n\r\nconst router = Router();\r\n\r\n// GET /api/chat/messages/:tenantId - Alle Nachrichten für einen Tenant\r\nrouter.get('/messages/:tenantId', async (req, res) => {\r\n  try {\r\n    console.log(`[CHAT API] Getting messages for tenant: ${req.params.tenantId}`);\r\n    const messages = await storage.getChatMessagesByTenant(req.params.tenantId);\r\n    \r\n    res.json({\r\n      success: true,\r\n      data: messages,\r\n      total: messages.length\r\n    });\r\n  } catch (error) {\r\n    console.error('[CHAT API] Get messages error:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      error: 'Failed to fetch messages'\r\n    });\r\n  }\r\n});\r\n\r\n// POST /api/chat/messages - Neue Nachricht erstellen\r\nrouter.post('/messages', async (req, res) => {\r\n  try {\r\n    console.log('[CHAT API] Creating new message:', req.body);\r\n    \r\n    // Validierung mit Zod Schema\r\n    const validationSchema = insertChatMessageSchema.extend({\r\n      tenantId: z.string().min(1, 'Tenant ID ist erforderlich'),\r\n      senderName: z.string().min(1, 'Sender Name ist erforderlich'),\r\n      senderEmail: z.string().email('Gültige E-Mail ist erforderlich'),\r\n      message: z.string().min(1, 'Nachricht ist erforderlich'),\r\n      senderType: z.enum(['tenant', 'admin'])\r\n    });\r\n\r\n    const validatedData = validationSchema.parse(req.body);\r\n    \r\n    const newMessage = await storage.createChatMessage({\r\n      tenantId: validatedData.tenantId,\r\n      senderId: validatedData.senderId || null,\r\n      senderType: validatedData.senderType,\r\n      senderName: validatedData.senderName,\r\n      senderEmail: validatedData.senderEmail,\r\n      messageType: validatedData.messageType || 'message',\r\n      subject: validatedData.subject,\r\n      message: validatedData.message,\r\n      priority: validatedData.priority || 'normal',\r\n      attachments: validatedData.attachments || [],\r\n      metadata: validatedData.metadata || {}\r\n    });\r\n\r\n    console.log('[CHAT API] Message created successfully:', newMessage.id);\r\n    \r\n    res.status(201).json({\r\n      success: true,\r\n      data: newMessage,\r\n      message: 'Nachricht erfolgreich gesendet'\r\n    });\r\n  } catch (error) {\r\n    console.error('[CHAT API] Create message error:', error);\r\n    \r\n    if (error instanceof z.ZodError) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        error: 'Validierungsfehler',\r\n        details: error.errors\r\n      });\r\n    }\r\n    \r\n    return res.status(500).json({\r\n      success: false,\r\n      error: 'Failed to create message'\r\n    });\r\n  }\r\n});\r\n\r\n// PUT /api/chat/messages/:id/status - Nachrichtenstatus aktualisieren\r\nrouter.put('/messages/:id/status', async (req, res) => {\r\n  try {\r\n    const { status } = req.body;\r\n    const messageId = req.params.id;\r\n    \r\n    if (!['unread', 'read', 'resolved', 'in_progress'].includes(status)) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        error: 'Invalid status'\r\n      });\r\n    }\r\n\r\n    console.log(`[CHAT API] Updating message ${messageId} status to: ${status}`);\r\n    \r\n    const updatedMessage = await storage.updateChatMessageStatus(\r\n      messageId, \r\n      status, \r\n      status === 'read' ? new Date() : undefined\r\n    );\r\n\r\n    res.json({\r\n      success: true,\r\n      data: updatedMessage,\r\n      message: `Status auf ${status} geändert`\r\n    });\r\n  } catch (error) {\r\n    console.error('[CHAT API] Update status error:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      error: 'Failed to update message status'\r\n    });\r\n  }\r\n});\r\n\r\n// GET /api/chat/messages/unread-count/:tenantId? - Anzahl ungelesener Nachrichten\r\nrouter.get('/messages/unread-count/:tenantId?', async (req, res) => {\r\n  try {\r\n    const tenantId = req.params.tenantId;\r\n    const count = await storage.getUnreadChatMessagesCount(tenantId);\r\n    \r\n    res.json({\r\n      success: true,\r\n      data: { count },\r\n      tenantId: tenantId || 'all'\r\n    });\r\n  } catch (error) {\r\n    console.error('[CHAT API] Unread count error:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      error: 'Failed to get unread count'\r\n    });\r\n  }\r\n});\r\n\r\n// GET /api/chat/admin/messages - Alle Nachrichten für Admin-Übersicht\r\nrouter.get('/admin/messages', async (req, res) => {\r\n  try {\r\n    console.log('[CHAT API] Getting all messages for admin');\r\n    const messages = await storage.getAllChatMessages();\r\n    \r\n    // Gruppierung nach Tenant für bessere Übersicht\r\n    const messagesByTenant = messages.reduce((acc, message) => {\r\n      const tenantId = message.tenant_id;\r\n      if (!acc[tenantId]) {\r\n        acc[tenantId] = {\r\n          tenant_name: message.tenant_name,\r\n          tenant_subdomain: message.subdomain,\r\n          color_scheme: message.color_scheme,\r\n          messages: []\r\n        };\r\n      }\r\n      acc[tenantId].messages.push(message);\r\n      return acc;\r\n    }, {} as any);\r\n\r\n    res.json({\r\n      success: true,\r\n      data: {\r\n        allMessages: messages,\r\n        messagesByTenant,\r\n        totalMessages: messages.length,\r\n        unreadCount: messages.filter(m => m.status === 'unread').length\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('[CHAT API] Get admin messages error:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      error: 'Failed to fetch admin messages'\r\n    });\r\n  }\r\n});\r\n\r\n// GET /api/chat/conversations/:tenantId - Conversations für einen Tenant\r\nrouter.get('/conversations/:tenantId', async (req, res) => {\r\n  try {\r\n    const conversations = await storage.getChatConversationsByTenant(req.params.tenantId);\r\n    \r\n    res.json({\r\n      success: true,\r\n      data: conversations,\r\n      total: conversations.length\r\n    });\r\n  } catch (error) {\r\n    console.error('[CHAT API] Get conversations error:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      error: 'Failed to fetch conversations'\r\n    });\r\n  }\r\n});\r\n\r\n// POST /api/chat/conversations - Neue Conversation erstellen\r\nrouter.post('/conversations', async (req, res) => {\r\n  try {\r\n    const validationSchema = insertChatConversationSchema.extend({\r\n      tenantId: z.string().min(1, 'Tenant ID ist erforderlich'),\r\n      subject: z.string().min(1, 'Betreff ist erforderlich')\r\n    });\r\n\r\n    const validatedData = validationSchema.parse(req.body);\r\n    \r\n    const newConversation = await storage.createChatConversation({\r\n      tenantId: validatedData.tenantId,\r\n      subject: validatedData.subject,\r\n      status: validatedData.status || 'open',\r\n      priority: validatedData.priority || 'normal',\r\n      participantIds: validatedData.participantIds || [],\r\n      metadata: validatedData.metadata || {}\r\n    });\r\n\r\n    res.status(201).json({\r\n      success: true,\r\n      data: newConversation,\r\n      message: 'Conversation erfolgreich erstellt'\r\n    });\r\n  } catch (error) {\r\n    console.error('[CHAT API] Create conversation error:', error);\r\n    \r\n    if (error instanceof z.ZodError) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        error: 'Validierungsfehler',\r\n        details: error.errors\r\n      });\r\n    }\r\n    \r\n    return res.status(500).json({\r\n      success: false,\r\n      error: 'Failed to create conversation'\r\n    });\r\n  }\r\n});\r\n\r\nexport default router;"]}