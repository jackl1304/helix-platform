{"version":3,"file":"storage.js","sourceRoot":"","sources":["../../../shared/types/storage.ts"],"names":[],"mappings":"","sourcesContent":["import { \r\n  DashboardStats, \r\n  DataSource, \r\n  RegulatoryUpdate, \r\n  LegalCase \r\n} from './api';\r\n\r\n// Legacy storage interfaces (kept for backward compatibility)\r\nexport interface StorageRegulatoryUpdate {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  source_id: string;\r\n  source_url: string;\r\n  content?: string;\r\n  region: string;\r\n  update_type: string;\r\n  priority: string;\r\n  device_classes: string[];\r\n  categories?: Record<string, unknown>;\r\n  raw_data?: Record<string, unknown>;\r\n  published_at: string;\r\n  created_at: string;\r\n  effective_date?: string;\r\n}\r\n\r\nexport interface StorageLegalCase {\r\n  id: string;\r\n  case_number: string;\r\n  title: string;\r\n  court: string;\r\n  jurisdiction: string;\r\n  status: string;\r\n  verdict?: string;\r\n  damages?: number;\r\n  defendants: string[];\r\n  plaintiffs: string[];\r\n  filed_date: string;\r\n  decision_date?: string;\r\n  closed_date?: string;\r\n  case_summary?: string;\r\n  summary?: string;\r\n  legal_issues: string[];\r\n  outcome?: string;\r\n  impact_level?: string;\r\n  document_url?: string;\r\n}\r\n\r\nexport interface StorageDataSource {\r\n  id: string;\r\n  name: string;\r\n  type: string;\r\n  url: string;\r\n  is_active: boolean;\r\n  last_sync: string;\r\n  sync_frequency: string;\r\n  status: string;\r\n  metadata: Record<string, unknown>;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\n// User related types\r\nexport interface User {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  role: 'admin' | 'user' | 'viewer';\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n  isActive: boolean;\r\n}\r\n\r\nexport interface CreateUserInput {\r\n  name: string;\r\n  email: string;\r\n  role: 'admin' | 'user' | 'viewer';\r\n}\r\n\r\nexport interface UpdateUserInput {\r\n  name?: string;\r\n  email?: string;\r\n  role?: 'admin' | 'user' | 'viewer';\r\n  isActive?: boolean;\r\n}\r\n\r\n// Knowledge Article types\r\nexport interface KnowledgeArticle {\r\n  id: string;\r\n  title: string;\r\n  content: string;\r\n  category: string;\r\n  tags: string[];\r\n  author: string;\r\n  publishedAt: Date;\r\n  updatedAt: Date;\r\n  isPublished: boolean;\r\n  viewCount: number;\r\n}\r\n\r\nexport interface CreateKnowledgeArticleInput {\r\n  title: string;\r\n  content: string;\r\n  category: string;\r\n  tags: string[];\r\n  author: string;\r\n  isPublished?: boolean;\r\n}\r\n\r\n// Newsletter types\r\nexport interface Newsletter {\r\n  id: string;\r\n  title: string;\r\n  content: string;\r\n  scheduledDate: Date;\r\n  sentDate?: Date;\r\n  status: 'draft' | 'scheduled' | 'sent' | 'cancelled';\r\n  recipientCount: number;\r\n  openRate?: number;\r\n  clickRate?: number;\r\n}\r\n\r\nexport interface Subscriber {\r\n  id: string;\r\n  email: string;\r\n  name?: string;\r\n  subscribedAt: Date;\r\n  isActive: boolean;\r\n  preferences: {\r\n    regulations: boolean;\r\n    legal: boolean;\r\n    newsletters: boolean;\r\n  };\r\n}\r\n\r\n// Approval types\r\nexport interface Approval {\r\n  id: string;\r\n  contentType: 'regulatory_update' | 'legal_case' | 'knowledge_article';\r\n  contentId: string;\r\n  status: 'pending' | 'approved' | 'rejected';\r\n  submittedBy: string;\r\n  reviewedBy?: string;\r\n  submittedAt: Date;\r\n  reviewedAt?: Date;\r\n  comments?: string;\r\n  confidence?: number;\r\n  aiRecommendation?: 'approve' | 'reject' | 'review';\r\n}\r\n\r\nexport interface CreateApprovalInput {\r\n  contentType: 'regulatory_update' | 'legal_case' | 'knowledge_article';\r\n  contentId: string;\r\n  submittedBy: string;\r\n  comments?: string;\r\n  confidence?: number;\r\n  aiRecommendation?: 'approve' | 'reject' | 'review';\r\n}\r\n\r\nexport interface UpdateApprovalInput {\r\n  status?: 'pending' | 'approved' | 'rejected';\r\n  reviewedBy?: string;\r\n  comments?: string;\r\n}\r\n\r\n// Storage interface with proper typing\r\nexport interface IStorage {\r\n  // Dashboard operations\r\n  getDashboardStats(): Promise<DashboardStats>;\r\n  \r\n  // Data source operations  \r\n  getAllDataSources(): Promise<DataSource[]>;\r\n  getActiveDataSources(): Promise<DataSource[]>;\r\n  getDataSourceById(id: string): Promise<DataSource | undefined>;\r\n  updateDataSource(id: string, updates: Partial<DataSource>): Promise<DataSource>;\r\n  updateDataSourceLastSync(id: string, lastSync: Date): Promise<void>;\r\n  addDataSource(dataSource: Omit<DataSource, 'id'>): Promise<DataSource>;\r\n  deleteDataSource(id: string): Promise<void>;\r\n  \r\n  // User operations\r\n  createUser(user: CreateUserInput): Promise<User>;\r\n  getUserById(id: string): Promise<User | undefined>;\r\n  getAllUsers(): Promise<User[]>;\r\n  updateUser(id: string, updates: UpdateUserInput): Promise<User>;\r\n  deleteUser(id: string): Promise<void>;\r\n  \r\n  // Regulatory update operations\r\n  addRegulatoryUpdate(update: Omit<RegulatoryUpdate, 'id'>): Promise<RegulatoryUpdate>;\r\n  getAllRegulatoryUpdates(): Promise<RegulatoryUpdate[]>;\r\n  getRegulatoryUpdateById(id: string): Promise<RegulatoryUpdate | undefined>;\r\n  getRegulatoryUpdatesByRegion(region: string): Promise<RegulatoryUpdate[]>;\r\n  getRecentRegulatoryUpdates(limit?: number): Promise<RegulatoryUpdate[]>;\r\n  updateRegulatoryUpdate(id: string, updates: Partial<RegulatoryUpdate>): Promise<RegulatoryUpdate>;\r\n  deleteRegulatoryUpdate(id: string): Promise<void>;\r\n  \r\n  // Legal case operations\r\n  addLegalCase(legalCase: Omit<LegalCase, 'id'>): Promise<LegalCase>;\r\n  getAllLegalCases(): Promise<LegalCase[]>;\r\n  getLegalCaseById(id: string): Promise<LegalCase | undefined>;\r\n  getLegalCasesByJurisdiction(jurisdiction: string): Promise<LegalCase[]>;\r\n  updateLegalCase(id: string, updates: Partial<LegalCase>): Promise<LegalCase>;\r\n  deleteLegalCase(id: string): Promise<void>;\r\n  \r\n  // Knowledge article operations\r\n  addKnowledgeArticle(article: CreateKnowledgeArticleInput): Promise<KnowledgeArticle>;\r\n  getAllKnowledgeArticles(): Promise<KnowledgeArticle[]>;\r\n  getKnowledgeArticleById(id: string): Promise<KnowledgeArticle | undefined>;\r\n  updateKnowledgeArticle(id: string, updates: Partial<KnowledgeArticle>): Promise<KnowledgeArticle>;\r\n  deleteKnowledgeArticle(id: string): Promise<void>;\r\n  \r\n  // Newsletter and subscriber operations\r\n  addNewsletter(newsletter: Omit<Newsletter, 'id'>): Promise<Newsletter>;\r\n  getAllNewsletters(): Promise<Newsletter[]>;\r\n  getNewsletterById(id: string): Promise<Newsletter | undefined>;\r\n  updateNewsletter(id: string, updates: Partial<Newsletter>): Promise<Newsletter>;\r\n  deleteNewsletter(id: string): Promise<void>;\r\n  \r\n  addSubscriber(subscriber: Omit<Subscriber, 'id'>): Promise<Subscriber>;\r\n  getAllSubscribers(): Promise<Subscriber[]>;\r\n  getSubscriberById(id: string): Promise<Subscriber | undefined>;\r\n  updateSubscriber(id: string, updates: Partial<Subscriber>): Promise<Subscriber>;\r\n  deleteSubscriber(id: string): Promise<void>;\r\n  \r\n  // Approval operations\r\n  addApproval(approval: CreateApprovalInput): Promise<Approval>;\r\n  getAllApprovals(): Promise<Approval[]>;\r\n  getApprovalById(id: string): Promise<Approval | undefined>;\r\n  getPendingApprovals(): Promise<Approval[]>;\r\n  updateApproval(id: string, updates: UpdateApprovalInput): Promise<Approval>;\r\n  deleteApproval(id: string): Promise<void>;\r\n}"]}