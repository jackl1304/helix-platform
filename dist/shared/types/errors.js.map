{"version":3,"file":"errors.js","sourceRoot":"","sources":["../../../shared/types/errors.ts"],"names":[],"mappings":"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","sourcesContent":["// Structured Error Classes for Type Safety and Better Error Handling\r\n\r\nexport class AppError extends Error {\r\n  public readonly name: string;\r\n  public readonly statusCode: number;\r\n  public readonly isOperational: boolean;\r\n  public readonly timestamp: string;\r\n\r\n  constructor(\r\n    message: string,\r\n    statusCode: number = 500,\r\n    isOperational: boolean = true,\r\n    stack?: string\r\n  ) {\r\n    super(message);\r\n    \r\n    this.name = this.constructor.name;\r\n    this.statusCode = statusCode;\r\n    this.isOperational = isOperational;\r\n    this.timestamp = new Date().toISOString();\r\n\r\n    if (stack) {\r\n      this.stack = stack;\r\n    } else {\r\n      Error.captureStackTrace(this, this.constructor);\r\n    }\r\n  }\r\n}\r\n\r\nexport class ValidationError extends AppError {\r\n  public readonly name = 'ValidationError';\r\n  \r\n  constructor(\r\n    message: string,\r\n    public field: string,\r\n    public value: unknown,\r\n    public expectedType: string\r\n  ) {\r\n    super(`Validation failed for field '${field}': ${message}`, 400);\r\n  }\r\n}\r\n\r\nexport class DatabaseError extends AppError {\r\n  public readonly name = 'DatabaseError';\r\n  \r\n  constructor(\r\n    message: string,\r\n    public operation: string,\r\n    public table?: string,\r\n    public originalError?: Error\r\n  ) {\r\n    super(`Database operation '${operation}' failed: ${message}`, 500);\r\n  }\r\n}\r\n\r\nexport class ApiError extends AppError {\r\n  public readonly name = 'ApiError';\r\n  \r\n  constructor(\r\n    message: string,\r\n    statusCode: number,\r\n    public code: string,\r\n    public details?: Record<string, unknown>\r\n  ) {\r\n    super(message, statusCode);\r\n  }\r\n}\r\n\r\nexport class NotFoundError extends AppError {\r\n  public readonly name = 'NotFoundError';\r\n  \r\n  constructor(resource: string, identifier?: string) {\r\n    const message = identifier \r\n      ? `${resource} with identifier '${identifier}' not found`\r\n      : `${resource} not found`;\r\n    super(message, 404);\r\n  }\r\n}\r\n\r\nexport class AuthenticationError extends AppError {\r\n  public readonly name = 'AuthenticationError';\r\n  \r\n  constructor(message: string = 'Authentication required') {\r\n    super(message, 401);\r\n  }\r\n}\r\n\r\nexport class AuthorizationError extends AppError {\r\n  public readonly name = 'AuthorizationError';\r\n  \r\n  constructor(message: string = 'Insufficient permissions') {\r\n    super(message, 403);\r\n  }\r\n}\r\n\r\nexport class RateLimitError extends AppError {\r\n  public readonly name = 'RateLimitError';\r\n  \r\n  constructor(\r\n    public resetTime: Date,\r\n    public limit: number,\r\n    public windowMs: number\r\n  ) {\r\n    super(`Rate limit exceeded. Limit: ${limit} requests per ${windowMs}ms`, 429);\r\n  }\r\n}\r\n\r\nexport class ExternalServiceError extends AppError {\r\n  public readonly name = 'ExternalServiceError';\r\n  \r\n  constructor(\r\n    public serviceName: string,\r\n    message: string,\r\n    public originalError?: Error\r\n  ) {\r\n    super(`External service '${serviceName}' error: ${message}`, 502);\r\n  }\r\n}\r\n\r\nexport class ConfigurationError extends AppError {\r\n  public readonly name = 'ConfigurationError';\r\n  \r\n  constructor(\r\n    public configKey: string,\r\n    message: string\r\n  ) {\r\n    super(`Configuration error for '${configKey}': ${message}`, 500, false);\r\n  }\r\n}\r\n\r\n// Type guards for error handling\r\nexport const isAppError = (error: unknown): error is AppError => {\r\n  return error instanceof AppError;\r\n};\r\n\r\nexport const isOperationalError = (error: unknown): boolean => {\r\n  return isAppError(error) && error.isOperational;\r\n};\r\n\r\n// Error handler utility\r\nexport const getErrorMessage = (error: unknown): string => {\r\n  if (error instanceof Error) {\r\n    return error.message;\r\n  }\r\n  return typeof error === 'string' ? error : 'Unknown error occurred';\r\n};\r\n\r\nexport const getErrorStatusCode = (error: unknown): number => {\r\n  if (isAppError(error)) {\r\n    return error.statusCode;\r\n  }\r\n  return 500;\r\n};\r\n\r\n// Error response formatter\r\nexport interface ErrorResponse {\r\n  error: string;\r\n  message: string;\r\n  statusCode: number;\r\n  timestamp: string;\r\n  details?: Record<string, unknown>;\r\n}\r\n\r\nexport const formatErrorResponse = (error: unknown): ErrorResponse => {\r\n  const message = getErrorMessage(error);\r\n  const statusCode = getErrorStatusCode(error);\r\n  \r\n  const response: ErrorResponse = {\r\n    error: isAppError(error) ? error.name : 'InternalServerError',\r\n    message,\r\n    statusCode,\r\n    timestamp: new Date().toISOString()\r\n  };\r\n\r\n  if (isAppError(error) && 'details' in error) {\r\n    response.details = (error as ApiError).details;\r\n  }\r\n\r\n  return response;\r\n};"]}