{"version":3,"file":"backgroundInitService.js","sourceRoot":"","sources":["../../server/services/backgroundInitService.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger } from './logger.service';\r\nimport { storage } from '../storage';\r\nimport { legalDataService } from './legalDataService';\r\n\r\nconst logger = new Logger('BackgroundInitService');\r\n\r\n/**\r\n * Background initialization service for non-critical data loading\r\n * Implements async initialization to improve server startup performance\r\n */\r\nexport class BackgroundInitService {\r\n  private static instance: BackgroundInitService;\r\n  private initializationPromise: Promise<void> | null = null;\r\n\r\n  private constructor() {}\r\n\r\n  static getInstance(): BackgroundInitService {\r\n    if (!BackgroundInitService.instance) {\r\n      BackgroundInitService.instance = new BackgroundInitService();\r\n    }\r\n    return BackgroundInitService.instance;\r\n  }\r\n\r\n  /**\r\n   * Start background initialization without blocking server startup\r\n   */\r\n  async startBackgroundInit(): Promise<void> {\r\n    if (this.initializationPromise) {\r\n      return this.initializationPromise;\r\n    }\r\n\r\n    this.initializationPromise = this.performBackgroundInit();\r\n    \r\n    // Don't await - let it run in background\r\n    this.initializationPromise.catch(error => {\r\n      logger.error('Background initialization failed', { error });\r\n    });\r\n\r\n    return Promise.resolve();\r\n  }\r\n\r\n  /**\r\n   * Get the initialization status\r\n   */\r\n  async waitForInit(): Promise<void> {\r\n    if (this.initializationPromise) {\r\n      return this.initializationPromise;\r\n    }\r\n    return Promise.resolve();\r\n  }\r\n\r\n  private async performBackgroundInit(): Promise<void> {\r\n    logger.info(\"Starting background data initialization...\");\r\n    \r\n    try {\r\n      // Initialize data sources\r\n      await this.initializeDataSources();\r\n      \r\n      // Initialize legal data if needed\r\n      await this.initializeLegalDataIfNeeded();\r\n      \r\n      // Initialize regulatory data if needed  \r\n      await this.initializeRegulatoryDataIfNeeded();\r\n      \r\n      logger.info(\"Background initialization completed successfully\");\r\n    } catch (error) {\r\n      logger.error(\"Background initialization failed\", { error });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async initializeDataSources(): Promise<void> {\r\n    try {\r\n      const existingSources = await storage.getAllDataSources();\r\n      logger.info(`Found ${existingSources.length} existing data sources`);\r\n      \r\n      // Only initialize if we have fewer than expected sources\r\n      if (existingSources.length < 46) {\r\n        logger.info(\"Initializing additional data sources...\");\r\n        \r\n        const requiredSources = [\r\n          // GRIP Platform - Global Intelligence\r\n          { id: 'grip_platform', name: 'GRIP Regulatory Intelligence', endpoint: 'https://grip-app.pureglobal.com', country: 'GLOBAL', region: 'Global', type: 'intelligence', category: 'regulatory', isActive: true },\r\n          // Core FDA sources\r\n          { id: 'fda_510k', name: 'FDA 510(k) Database', endpoint: 'https://api.fda.gov/device/510k.json', country: 'US', region: 'North America', type: 'regulatory', category: 'approvals', isActive: true },\r\n          { id: 'fda_recalls', name: 'FDA Device Recalls', endpoint: 'https://api.fda.gov/device/recall.json', country: 'US', region: 'North America', type: 'safety', category: 'recalls', isActive: true },\r\n          // Add only essential sources for performance\r\n        ];\r\n        \r\n        for (const source of requiredSources) {\r\n          try {\r\n            await storage.createDataSource(source);\r\n            logger.debug(`Created/Updated data source: ${source.name}`);\r\n          } catch (err) {\r\n            const errorMessage = err instanceof Error ? err.message : String(err);\r\n            logger.debug(`Data source ${source.name} already exists or error: ${errorMessage}`);\r\n          }\r\n        }\r\n      }\r\n      \r\n      const finalCount = await storage.getAllDataSources();\r\n      logger.info(`Data sources ready: ${finalCount.length} sources available`);\r\n      \r\n    } catch (error) {\r\n      logger.error(\"Error initializing data sources\", { error });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async initializeLegalDataIfNeeded(): Promise<void> {\r\n    try {\r\n      const currentLegalCases = await storage.getAllLegalCases();\r\n      logger.info(`Current legal cases in database: ${currentLegalCases.length}`);\r\n      \r\n      // Only initialize if we have insufficient data\r\n      if (currentLegalCases.length < 100) {\r\n        logger.info(\"Initializing legal data in background...\");\r\n        await legalDataService.initializeLegalData();\r\n        \r\n        const updatedLegalCount = await storage.getAllLegalCases();\r\n        logger.info(`Legal data initialized: ${updatedLegalCount.length} legal cases`);\r\n      }\r\n    } catch (error) {\r\n      logger.error(\"Error initializing legal data\", { error });\r\n      // Don't throw - allow other init to continue\r\n    }\r\n  }\r\n\r\n  private async initializeRegulatoryDataIfNeeded(): Promise<void> {\r\n    try {\r\n      const currentUpdates = await storage.getAllRegulatoryUpdates();\r\n      logger.info(`Current regulatory updates: ${currentUpdates.length}`);\r\n      \r\n      // Only collect if we have insufficient data\r\n      if (currentUpdates.length < 1000) {\r\n        logger.info(\"Starting regulatory data collection in background...\");\r\n        \r\n        // Import and initialize data collection service\r\n        const { DataCollectionService } = await import(\"./dataCollectionService\");\r\n        const dataService = new DataCollectionService();\r\n        \r\n        // Perform limited initial collection to avoid overwhelming startup\r\n        await dataService.performLimitedDataCollection(10);\r\n        \r\n        const updatedCount = await storage.getAllRegulatoryUpdates();\r\n        logger.info(`Regulatory data collection completed: ${updatedCount.length} updates`);\r\n      }\r\n    } catch (error) {\r\n      logger.error(\"Error collecting regulatory data\", { error });\r\n      // Don't throw - allow other init to continue\r\n    }\r\n  }\r\n}\r\n\r\nexport const backgroundInitService = BackgroundInitService.getInstance();"]}