{"version":3,"file":"apiManagementService.js","sourceRoot":"","sources":["../../server/services/apiManagementService.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,YAAY,CAAC;AAqDrC,MAAM,OAAO,oBAAoB;IAK/B;QAJQ,gBAAW,GAA4B,IAAI,GAAG,EAAE,CAAC;QACjD,eAAU,GAAuD,IAAI,GAAG,EAAE,CAAC;QAC3E,gBAAW,GAAY,KAAK,CAAC;QAGnC,IAAI,CAAC,qBAAqB,EAAE,CAAC;IAC/B,CAAC;IAEO,KAAK,CAAC,qBAAqB;QACjC,IAAI,CAAC;YACH,OAAO,CAAC,GAAG,CAAC,wDAAwD,CAAC,CAAC;YAGtE,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,oBAAoB,EAAE,CAAC;YACvD,OAAO,CAAC,GAAG,CAAC,0BAA0B,SAAS,CAAC,MAAM,kCAAkC,CAAC,CAAC;YAG1F,KAAK,MAAM,QAAQ,IAAI,SAA6B,EAAE,CAAC;gBACrD,IAAI,QAAQ,CAAC,EAAE,IAAI,QAAQ,CAAC,IAAI,EAAE,CAAC;oBAEjC,MAAM,QAAQ,GAAG,QAAQ,CAAC,WAAW;wBACrB,QAAQ,CAAC,QAAQ;wBACjB,QAAQ,CAAC,GAAG;wBACZ,EAAE,CAAC;oBAGnB,IAAI,QAA0B,CAAC;oBAC/B,IAAI,QAAQ,CAAC,QAAQ,EAAE,CAAC;wBACtB,QAAQ,GAAG,OAAO,QAAQ,CAAC,QAAQ,KAAK,QAAQ;4BAC9C,CAAC,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC;4BAC7B,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC;oBACxB,CAAC;oBAED,MAAM,YAAY,GAAe;wBAC/B,EAAE,EAAE,QAAQ,CAAC,EAAE;wBACf,IAAI,EAAE,QAAQ,CAAC,IAAI;wBACnB,IAAI,EAAE,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,IAAI,SAAS,CAAC;wBACpD,QAAQ,EAAE,QAAQ;wBAClB,YAAY,EAAE,QAAQ,CAAC,YAAY,IAAI,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC,IAAI,IAAI,EAAE,EAAE,QAAQ,CAAC,IAAI,CAAC;wBACtG,QAAQ,EAAE,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,IAAI,IAAI,EAAE,EAAE,QAAQ,CAAC,MAAM,IAAI,EAAE,CAAC;wBAC5E,MAAM,EAAE,QAAQ,CAAC,MAAM,IAAI,SAAS;wBACpC,MAAM,EAAE,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,UAAU;wBACjD,QAAQ,EAAE,QAAQ;wBAClB,UAAU,EAAE,CAAC;qBACd,CAAC;oBAEF,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;gBACxC,CAAC;YACH,CAAC;YAED,OAAO,CAAC,GAAG,CAAC,4CAA4C,IAAI,CAAC,WAAW,CAAC,IAAI,eAAe,CAAC,CAAC;YAC9F,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YAGxB,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAE/B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,uEAAuE,EAAE,KAAK,CAAC,CAAC;YAC9F,IAAI,CAAC,yBAAyB,EAAE,CAAC;QACnC,CAAC;IACH,CAAC;IAEO,yBAAyB;QAE/B,IAAI,CAAC,kBAAkB,CAAC;YACtB,EAAE,EAAE,aAAa;YACjB,IAAI,EAAE,iBAAiB;YACvB,IAAI,EAAE,cAAc;YACpB,QAAQ,EAAE,qBAAqB;YAC/B,YAAY,EAAE,KAAK;YACnB,QAAQ,EAAE,MAAM;YAChB,MAAM,EAAE,eAAe;YACvB,MAAM,EAAE,QAAQ;YAChB,UAAU,EAAE,CAAC;SACd,CAAC,CAAC;QAGH,IAAI,CAAC,kBAAkB,CAAC;YACtB,EAAE,EAAE,SAAS;YACb,IAAI,EAAE,gCAAgC;YACtC,IAAI,EAAE,cAAc;YACpB,QAAQ,EAAE,2BAA2B;YACrC,YAAY,EAAE,IAAI;YAClB,QAAQ,EAAE,MAAM;YAChB,MAAM,EAAE,gBAAgB;YACxB,MAAM,EAAE,SAAS;YACjB,UAAU,EAAE,CAAC;SACd,CAAC,CAAC;QAEH,IAAI,CAAC,kBAAkB,CAAC;YACtB,EAAE,EAAE,WAAW;YACf,IAAI,EAAE,wBAAwB;YAC9B,IAAI,EAAE,cAAc;YACpB,QAAQ,EAAE,6BAA6B;YACvC,YAAY,EAAE,IAAI;YAClB,QAAQ,EAAE,QAAQ;YAClB,MAAM,EAAE,gBAAgB;YACxB,MAAM,EAAE,SAAS;YACjB,UAAU,EAAE,CAAC;SACd,CAAC,CAAC;QAGH,IAAI,CAAC,kBAAkB,CAAC;YACtB,EAAE,EAAE,gBAAgB;YACpB,IAAI,EAAE,oBAAoB;YAC1B,IAAI,EAAE,cAAc;YACpB,QAAQ,EAAE,sBAAsB;YAChC,YAAY,EAAE,KAAK;YACnB,QAAQ,EAAE,QAAQ;YAClB,MAAM,EAAE,SAAS;YACjB,MAAM,EAAE,QAAQ;YAChB,UAAU,EAAE,CAAC;SACd,CAAC,CAAC;QAEH,IAAI,CAAC,kBAAkB,CAAC;YACtB,EAAE,EAAE,qBAAqB;YACzB,IAAI,EAAE,yBAAyB;YAC/B,IAAI,EAAE,cAAc;YACpB,QAAQ,EAAE,2BAA2B;YACrC,YAAY,EAAE,KAAK;YACnB,QAAQ,EAAE,QAAQ;YAClB,MAAM,EAAE,aAAa;YACrB,MAAM,EAAE,QAAQ;YAChB,UAAU,EAAE,CAAC;SACd,CAAC,CAAC;QAEH,IAAI,CAAC,kBAAkB,CAAC;YACtB,EAAE,EAAE,wBAAwB;YAC5B,IAAI,EAAE,4BAA4B;YAClC,IAAI,EAAE,cAAc;YACpB,QAAQ,EAAE,wCAAwC;YAClD,YAAY,EAAE,KAAK;YACnB,QAAQ,EAAE,QAAQ;YAClB,MAAM,EAAE,QAAQ;YAChB,MAAM,EAAE,QAAQ;YAChB,UAAU,EAAE,CAAC;SACd,CAAC,CAAC;QAEH,OAAO,CAAC,GAAG,CAAC,0DAA0D,IAAI,CAAC,WAAW,CAAC,IAAI,UAAU,CAAC,CAAC;QACvG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;IAC1B,CAAC;IAKO,aAAa,CAAC,MAAc;QAClC,IAAI,MAAM,EAAE,WAAW,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC;YAAE,OAAO,cAAc,CAAC;QACjE,IAAI,MAAM,EAAE,WAAW,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,MAAM,EAAE,WAAW,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC;YAAE,OAAO,cAAc,CAAC;QAC/G,IAAI,MAAM,EAAE,WAAW,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,MAAM,EAAE,WAAW,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC;YAAE,OAAO,aAAa,CAAC;QAG9G,QAAQ,MAAM,EAAE,WAAW,EAAE,EAAE,CAAC;YAC9B,KAAK,YAAY,CAAC;YAClB,KAAK,UAAU,CAAC;YAChB,KAAK,YAAY;gBACf,OAAO,cAAc,CAAC;YACxB,KAAK,KAAK,CAAC;YACX,KAAK,YAAY,CAAC;YAClB,KAAK,aAAa;gBAChB,OAAO,cAAc,CAAC;YACxB;gBACE,OAAO,cAAc,CAAC;QAC1B,CAAC;IACH,CAAC;IAKO,sBAAsB,CAAC,IAAY,EAAE,IAAY;QACvD,MAAM,oBAAoB,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,eAAe,EAAE,SAAS,CAAC,CAAC;QAC3F,MAAM,QAAQ,GAAG,GAAG,IAAI,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QACjD,OAAO,oBAAoB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;IAC1E,CAAC;IAKO,iBAAiB,CAAC,IAAY,EAAE,MAAc;QAEpD,MAAM,mBAAmB,GAAG,CAAC,eAAe,EAAE,gBAAgB,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;QAC9F,MAAM,iBAAiB,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;QAElE,MAAM,OAAO,GAAG,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC;QAC1C,MAAM,SAAS,GAAG,MAAM,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC;QAE9C,IAAI,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YACpD,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;YACrD,OAAO,MAAM,CAAC;QAChB,CAAC;QAGD,IAAI,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;YACrG,OAAO,QAAQ,CAAC;QAClB,CAAC;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAKO,qBAAqB;QAC3B,MAAM,MAAM,GAAG,IAAI,GAAG,EAAkB,CAAC;QACzC,MAAM,QAAQ,GAAG,IAAI,GAAG,EAAkB,CAAC;QAC3C,MAAM,QAAQ,GAAG,IAAI,GAAG,EAAkB,CAAC;QAE3C,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,EAAE,CAAC;YAC/C,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YAC5D,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACpE,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACtE,CAAC;QAED,OAAO,CAAC,GAAG,CAAC,uCAAuC,CAAC,CAAC;QACrD,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC;QACtD,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC1D,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC5D,CAAC;IAKO,KAAK,CAAC,iBAAiB;QAC7B,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;YACtB,OAAO,CAAC,GAAG,CAAC,4DAA4D,CAAC,CAAC;YAE1E,IAAI,OAAO,GAAG,CAAC,CAAC;YAChB,OAAO,CAAC,IAAI,CAAC,WAAW,IAAI,OAAO,GAAG,EAAE,EAAE,CAAC;gBACzC,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;gBACvD,OAAO,EAAE,CAAC;YACZ,CAAC;YACD,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;gBACtB,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;YACjE,CAAC;QACH,CAAC;IACH,CAAC;IAEO,kBAAkB,CAAC,MAAkB;QAC3C,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;QACxC,OAAO,CAAC,GAAG,CAAC,4CAA4C,MAAM,CAAC,IAAI,KAAK,MAAM,CAAC,IAAI,GAAG,CAAC,CAAC;IAC1F,CAAC;IAKO,KAAK,CAAC,cAAc,CAAC,QAAgB;QAC3C,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC5C,IAAI,CAAC,KAAK;YAAE,OAAO,IAAI,CAAC;QAExB,IAAI,KAAK,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,EAAE,CAAC;YACjC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YACjC,OAAO,IAAI,CAAC;QACd,CAAC;QAED,OAAO,KAAK,CAAC,QAAQ,GAAG,CAAC,CAAC;IAC5B,CAAC;IAEO,eAAe,CAAC,QAAgB,EAAE,iBAAyB,EAAE,SAAe;QAClF,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,EAAE;YAC5B,QAAQ,EAAE,iBAAiB;YAC3B,SAAS;SACV,CAAC,CAAC;IACL,CAAC;IAKD,KAAK,CAAC,OAAO,CAAC,QAAgB,EAAE,QAAgB,EAAE,OAAa;QAC7D,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAE/B,MAAM,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC9C,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,OAAO,CAAC,KAAK,CAAC,yCAAyC,QAAQ,sBAAsB,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YAC5H,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,wBAAwB,QAAQ,EAAE,EAAE,CAAC;QACvE,CAAC;QAGD,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC;YAC3C,OAAO;gBACL,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,qBAAqB;gBAC5B,YAAY,EAAE,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,SAAS,IAAI,IAAI,IAAI,EAAE;aACrE,CAAC;QACJ,CAAC;QAED,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;YAGtE,MAAM,CAAC,UAAU,GAAG,CAAC,CAAC;YACtB,MAAM,CAAC,QAAQ,GAAG,IAAI,IAAI,EAAE,CAAC;YAE7B,OAAO;gBACL,OAAO,EAAE,IAAI;gBACb,IAAI,EAAE,QAAQ,CAAC,IAAI;gBACnB,kBAAkB,EAAE,QAAQ,CAAC,kBAAkB;aAChD,CAAC;QAEJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,CAAC,UAAU,EAAE,CAAC;YAGpB,IAAI,MAAM,CAAC,UAAU,IAAI,CAAC,EAAE,CAAC;gBAC3B,MAAM,CAAC,MAAM,GAAG,UAAU,CAAC;gBAC3B,OAAO,CAAC,KAAK,CAAC,wCAAwC,QAAQ,yBAAyB,CAAC,CAAC;YAC3F,CAAC;YAED,OAAO;gBACL,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;aAChE,CAAC;QACJ,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,cAAc,CAAC,MAAkB,EAAE,QAAgB,EAAE,OAAa;QAC9E,MAAM,OAAO,GAAG,GAAG,MAAM,CAAC,QAAQ,GAAG,QAAQ,EAAE,CAAC;QAEhD,QAAQ,MAAM,CAAC,IAAI,EAAE,CAAC;YACpB,KAAK,cAAc;gBACjB,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;YAC9D,KAAK,cAAc;gBACjB,OAAO,MAAM,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;YAC5D,KAAK,aAAa;gBAChB,OAAO,MAAM,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;YAC7D;gBACE,MAAM,IAAI,KAAK,CAAC,4BAA4B,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;QAC/D,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,eAAe,CAAC,GAAW,EAAE,MAAkB,EAAE,OAAa;QAC1E,MAAM,OAAO,GAA2B;YACtC,YAAY,EAAE,mCAAmC;YACjD,QAAQ,EAAE,kBAAkB;SAC7B,CAAC;QAGF,IAAI,MAAM,CAAC,YAAY,IAAI,OAAO,EAAE,MAAM,EAAE,CAAC;YAC3C,OAAO,CAAC,eAAe,CAAC,GAAG,UAAU,OAAO,CAAC,MAAM,EAAE,CAAC;QACxD,CAAC;QAED,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,EAAE;YAChC,MAAM,EAAE,OAAO,EAAE,MAAM,IAAI,KAAK;YAChC,OAAO;YACP,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS;SAC/D,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;YACjB,MAAM,IAAI,KAAK,CAAC,QAAQ,QAAQ,CAAC,MAAM,KAAK,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC;QACrE,CAAC;QAGD,MAAM,kBAAkB,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;QACzE,MAAM,cAAc,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;QAEjE,IAAI,kBAAkB,IAAI,cAAc,EAAE,CAAC;YACzC,IAAI,CAAC,eAAe,CAClB,MAAM,CAAC,EAAE,EACT,QAAQ,CAAC,kBAAkB,CAAC,EAC5B,IAAI,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC,CAC1C,CAAC;QACJ,CAAC;QAED,OAAO;YACL,IAAI,EAAE,MAAM,QAAQ,CAAC,IAAI,EAAE;YAC3B,kBAAkB,EAAE,kBAAkB,CAAC,CAAC,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,SAAS;SAClF,CAAC;IACJ,CAAC;IAEO,KAAK,CAAC,aAAa,CAAC,GAAW,EAAE,MAAkB,EAAE,OAAa;QAGxE,OAAO,CAAC,GAAG,CAAC,iCAAiC,GAAG,0BAA0B,CAAC,CAAC;QAG5E,OAAO;YACL,IAAI,EAAE,EAAE;YACR,kBAAkB,EAAE,SAAS;SAC9B,CAAC;IACJ,CAAC;IAEO,KAAK,CAAC,cAAc,CAAC,GAAW,EAAE,MAAkB,EAAE,OAAa;QAEzE,OAAO,CAAC,GAAG,CAAC,wCAAwC,GAAG,EAAE,CAAC,CAAC;QAE3D,OAAO;YACL,IAAI,EAAE,EAAE;YACR,kBAAkB,EAAE,SAAS;SAC9B,CAAC;IACJ,CAAC;IAKD,oBAAoB;QAClB,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,KAAK,QAAQ,CAAC,CAAC;IAC5F,CAAC;IAKD,sBAAsB,CAAC,MAAc;QACnC,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC;IAC1F,CAAC;IAKD,yBAAyB;QACvB,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,CACjD,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,YAAY,IAAI,MAAM,CAAC,MAAM,KAAK,SAAS,CAC7D,CAAC;IACJ,CAAC;IAKD,KAAK,CAAC,kBAAkB;QACtB,MAAM,OAAO,GAAG,EAAE,CAAC;QACnB,IAAI,OAAO,GAAG,CAAC,CAAC;QAChB,IAAI,SAAS,GAAG,CAAC,CAAC;QAElB,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,EAAE,CAAC;YAC/C,IAAI,CAAC;gBAEH,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,EAAE,SAAS,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;gBAC3E,IAAI,MAAM,CAAC,OAAO,EAAE,CAAC;oBACnB,OAAO,EAAE,CAAC;oBACV,OAAO,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,MAAM,CAAC,EAAE,EAAE,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;gBACtF,CAAC;qBAAM,CAAC;oBACN,SAAS,EAAE,CAAC;oBACZ,OAAO,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,MAAM,CAAC,EAAE,EAAE,MAAM,EAAE,WAAW,EAAE,KAAK,EAAE,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;gBAClF,CAAC;YACH,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,SAAS,EAAE,CAAC;gBACZ,OAAO,CAAC,IAAI,CAAC;oBACX,QAAQ,EAAE,MAAM,CAAC,EAAE;oBACnB,MAAM,EAAE,WAAW;oBACnB,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;iBAChE,CAAC,CAAC;YACL,CAAC;QACH,CAAC;QAED,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;IAClD,CAAC;CACF;AAED,MAAM,CAAC,MAAM,oBAAoB,GAAG,IAAI,oBAAoB,EAAE,CAAC","sourcesContent":["import { storage } from '../storage';\r\nimport type { InsertRegulatoryUpdate } from '@shared/schema';\r\n\r\n// Type definition for database source objects returned by storage.getActiveDataSources()\r\nexport interface DatabaseSource {\r\n  id: string;\r\n  name: string;\r\n  description?: string;\r\n  url?: string;\r\n  apiEndpoint?: string;\r\n  country?: string;\r\n  region?: string;\r\n  type: string;\r\n  category?: string;\r\n  language?: string;\r\n  isActive: boolean;\r\n  lastSync?: Date | string;\r\n  syncFrequency?: string;\r\n  authRequired?: boolean;\r\n  apiKey?: string;\r\n  metadata?: any;\r\n  createdAt?: Date | string;\r\n  updatedAt?: Date | string;\r\n  // Additional transformed properties from storage transformation\r\n  endpoint?: string;\r\n}\r\n\r\n/**\r\n * Zentrales API-Management-System für alle Datenquellen\r\n * Basierend auf der Deep Search Analyse der verfügbaren APIs\r\n */\r\n\r\nexport interface DataSource {\r\n  id: string;\r\n  name: string;\r\n  type: 'official_api' | 'web_scraping' | 'partner_api';\r\n  endpoint?: string;\r\n  requiresAuth: boolean;\r\n  priority: 'high' | 'medium' | 'low';\r\n  region: string;\r\n  status: 'active' | 'inactive' | 'testing';\r\n  lastSync?: Date;\r\n  errorCount: number;\r\n}\r\n\r\nexport interface APIResponse {\r\n  success: boolean;\r\n  data?: any[];\r\n  error?: string;\r\n  rateLimitRemaining?: number;\r\n  nextSyncTime?: Date;\r\n}\r\n\r\nexport class APIManagementService {\r\n  private dataSources: Map<string, DataSource> = new Map();\r\n  private rateLimits: Map<string, { requests: number; resetTime: Date }> = new Map();\r\n  private initialized: boolean = false;\r\n\r\n  constructor() {\r\n    this.initializeDataSources();\r\n  }\r\n\r\n  private async initializeDataSources() {\r\n    try {\r\n      console.log('[API Management] Loading data sources from database...');\r\n      \r\n      // Load active data sources from database\r\n      const dbSources = await storage.getActiveDataSources();\r\n      console.log(`[API Management] Found ${dbSources.length} active data sources in database`);\r\n      \r\n      // Map database sources to APIManagementService format\r\n      for (const dbSource of dbSources as DatabaseSource[]) {\r\n        if (dbSource.id && dbSource.name) {\r\n          // Extract endpoint from multiple possible sources\r\n          const endpoint = dbSource.apiEndpoint || \r\n                          dbSource.endpoint || \r\n                          dbSource.url || \r\n                          '';\r\n          \r\n          // Parse lastSync from various possible formats\r\n          let lastSync: Date | undefined;\r\n          if (dbSource.lastSync) {\r\n            lastSync = typeof dbSource.lastSync === 'string' \r\n              ? new Date(dbSource.lastSync) \r\n              : dbSource.lastSync;\r\n          }\r\n          \r\n          const mappedSource: DataSource = {\r\n            id: dbSource.id,\r\n            name: dbSource.name,\r\n            type: this.mapSourceType(dbSource.type || 'unknown'),\r\n            endpoint: endpoint,\r\n            requiresAuth: dbSource.authRequired || this.requiresAuthentication(dbSource.type || '', dbSource.name),\r\n            priority: this.determinePriority(dbSource.type || '', dbSource.region || ''),\r\n            region: dbSource.region || 'Unknown',\r\n            status: dbSource.isActive ? 'active' : 'inactive',\r\n            lastSync: lastSync,\r\n            errorCount: 0\r\n          };\r\n          \r\n          this.registerDataSource(mappedSource);\r\n        }\r\n      }\r\n      \r\n      console.log(`[API Management] Successfully registered ${this.dataSources.size} data sources`);\r\n      this.initialized = true;\r\n      \r\n      // Log source distribution by type and region\r\n      this.logSourceDistribution();\r\n      \r\n    } catch (error) {\r\n      console.error('[API Management] Error loading from database, using fallback sources:', error);\r\n      this.initializeFallbackSources();\r\n    }\r\n  }\r\n  \r\n  private initializeFallbackSources() {\r\n    // Priorität 1: Offizielle APIs mit direktem Zugang\r\n    this.registerDataSource({\r\n      id: 'fda_openfda',\r\n      name: 'FDA OpenFDA API',\r\n      type: 'official_api',\r\n      endpoint: 'https://api.fda.gov',\r\n      requiresAuth: false, // API Key empfohlen aber nicht erforderlich\r\n      priority: 'high',\r\n      region: 'United States',\r\n      status: 'active',\r\n      errorCount: 0\r\n    });\r\n\r\n    // Priorität 2: APIs mit Registrierungsanforderung\r\n    this.registerDataSource({\r\n      id: 'ema_pms',\r\n      name: 'EMA Product Management Service',\r\n      type: 'official_api',\r\n      endpoint: 'https://api.ema.europa.eu',\r\n      requiresAuth: true, // Erfordert EMA-Benutzerkonto\r\n      priority: 'high',\r\n      region: 'European Union',\r\n      status: 'testing', // Benötigt Zugangsdaten\r\n      errorCount: 0\r\n    });\r\n\r\n    this.registerDataSource({\r\n      id: 'mhra_more',\r\n      name: 'MHRA MORE Platform API',\r\n      type: 'official_api',\r\n      endpoint: 'https://www.gov.uk/api/more',\r\n      requiresAuth: true, // Erfordert MORE Portal Registrierung\r\n      priority: 'medium',\r\n      region: 'United Kingdom',\r\n      status: 'testing', // Benötigt Zugangsdaten\r\n      errorCount: 0\r\n    });\r\n\r\n    // Priorität 3: Web Scraping für Behörden ohne APIs\r\n    this.registerDataSource({\r\n      id: 'bfarm_scraping',\r\n      name: 'BfArM Web Scraping',\r\n      type: 'web_scraping',\r\n      endpoint: 'https://www.bfarm.de',\r\n      requiresAuth: false,\r\n      priority: 'medium',\r\n      region: 'Germany',\r\n      status: 'active',\r\n      errorCount: 0\r\n    });\r\n\r\n    this.registerDataSource({\r\n      id: 'swissmedic_scraping',\r\n      name: 'Swissmedic Web Scraping',\r\n      type: 'web_scraping',\r\n      endpoint: 'https://www.swissmedic.ch',\r\n      requiresAuth: false,\r\n      priority: 'medium',\r\n      region: 'Switzerland',\r\n      status: 'active',\r\n      errorCount: 0\r\n    });\r\n\r\n    this.registerDataSource({\r\n      id: 'health_canada_scraping',\r\n      name: 'Health Canada Web Scraping',\r\n      type: 'web_scraping',\r\n      endpoint: 'https://www.canada.ca/en/health-canada',\r\n      requiresAuth: false,\r\n      priority: 'medium',\r\n      region: 'Canada',\r\n      status: 'active',\r\n      errorCount: 0\r\n    });\r\n    \r\n    console.log(`[API Management] Fallback initialization complete with ${this.dataSources.size} sources`);\r\n    this.initialized = true;\r\n  }\r\n  \r\n  /**\r\n   * Map database source type to APIManagementService type\r\n   */\r\n  private mapSourceType(dbType: string): 'official_api' | 'web_scraping' | 'partner_api' {\r\n    if (dbType?.toLowerCase().includes('api')) return 'official_api';\r\n    if (dbType?.toLowerCase().includes('scraping') || dbType?.toLowerCase().includes('web')) return 'web_scraping';\r\n    if (dbType?.toLowerCase().includes('partner') || dbType?.toLowerCase().includes('grip')) return 'partner_api';\r\n    \r\n    // Default mapping for common types\r\n    switch (dbType?.toLowerCase()) {\r\n      case 'regulatory':\r\n      case 'official':\r\n      case 'government':\r\n        return 'official_api';\r\n      case 'rss':\r\n      case 'newsletter':\r\n      case 'publication':\r\n        return 'web_scraping';\r\n      default:\r\n        return 'web_scraping'; // Conservative default\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Determine if source requires authentication\r\n   */\r\n  private requiresAuthentication(type: string, name: string): boolean {\r\n    const authRequiredKeywords = ['ema', 'mhra', 'more', 'portal', 'authenticated', 'private'];\r\n    const typeName = `${type} ${name}`.toLowerCase();\r\n    return authRequiredKeywords.some(keyword => typeName.includes(keyword));\r\n  }\r\n  \r\n  /**\r\n   * Determine source priority based on type and region\r\n   */\r\n  private determinePriority(type: string, region: string): 'high' | 'medium' | 'low' {\r\n    // High priority for major regulatory bodies\r\n    const highPriorityRegions = ['united states', 'european union', 'germany', 'france', 'japan'];\r\n    const highPriorityTypes = ['fda', 'ema', 'bfarm', 'ansm', 'pmda'];\r\n    \r\n    const typeStr = type?.toLowerCase() || '';\r\n    const regionStr = region?.toLowerCase() || '';\r\n    \r\n    if (highPriorityRegions.some(r => regionStr.includes(r)) || \r\n        highPriorityTypes.some(t => typeStr.includes(t))) {\r\n      return 'high';\r\n    }\r\n    \r\n    // Medium priority for regulatory type sources\r\n    if (typeStr.includes('regulatory') || typeStr.includes('government') || typeStr.includes('official')) {\r\n      return 'medium';\r\n    }\r\n    \r\n    return 'low';\r\n  }\r\n  \r\n  /**\r\n   * Log source distribution for debugging\r\n   */\r\n  private logSourceDistribution() {\r\n    const byType = new Map<string, number>();\r\n    const byRegion = new Map<string, number>();\r\n    const byStatus = new Map<string, number>();\r\n    \r\n    for (const source of this.dataSources.values()) {\r\n      byType.set(source.type, (byType.get(source.type) || 0) + 1);\r\n      byRegion.set(source.region, (byRegion.get(source.region) || 0) + 1);\r\n      byStatus.set(source.status, (byStatus.get(source.status) || 0) + 1);\r\n    }\r\n    \r\n    console.log('[API Management] Source distribution:');\r\n    console.log('  By Type:', Object.fromEntries(byType));\r\n    console.log('  By Region:', Object.fromEntries(byRegion));\r\n    console.log('  By Status:', Object.fromEntries(byStatus));\r\n  }\r\n  \r\n  /**\r\n   * Ensure initialization is complete before API calls\r\n   */\r\n  private async ensureInitialized(): Promise<void> {\r\n    if (!this.initialized) {\r\n      console.log('[API Management] Waiting for initialization to complete...');\r\n      // Simple retry mechanism\r\n      let retries = 0;\r\n      while (!this.initialized && retries < 10) {\r\n        await new Promise(resolve => setTimeout(resolve, 500));\r\n        retries++;\r\n      }\r\n      if (!this.initialized) {\r\n        throw new Error('API Management Service failed to initialize');\r\n      }\r\n    }\r\n  }\r\n\r\n  private registerDataSource(source: DataSource) {\r\n    this.dataSources.set(source.id, source);\r\n    console.log(`[API Management] Registered data source: ${source.name} (${source.type})`);\r\n  }\r\n\r\n  /**\r\n   * Rate Limiting Management\r\n   */\r\n  private async checkRateLimit(sourceId: string): Promise<boolean> {\r\n    const limit = this.rateLimits.get(sourceId);\r\n    if (!limit) return true;\r\n\r\n    if (limit.resetTime < new Date()) {\r\n      this.rateLimits.delete(sourceId);\r\n      return true;\r\n    }\r\n\r\n    return limit.requests > 0;\r\n  }\r\n\r\n  private updateRateLimit(sourceId: string, requestsRemaining: number, resetTime: Date) {\r\n    this.rateLimits.set(sourceId, {\r\n      requests: requestsRemaining,\r\n      resetTime\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Zentrale API-Aufruf-Methode mit einheitlichem Error Handling\r\n   */\r\n  async callAPI(sourceId: string, endpoint: string, options?: any): Promise<APIResponse> {\r\n    await this.ensureInitialized();\r\n    \r\n    const source = this.dataSources.get(sourceId);\r\n    if (!source) {\r\n      console.error(`[API Management] Unknown data source: ${sourceId}. Available sources:`, Array.from(this.dataSources.keys()));\r\n      return { success: false, error: `Unknown data source: ${sourceId}` };\r\n    }\r\n\r\n    // Rate Limit Check\r\n    if (!(await this.checkRateLimit(sourceId))) {\r\n      return { \r\n        success: false, \r\n        error: 'Rate limit exceeded',\r\n        nextSyncTime: this.rateLimits.get(sourceId)?.resetTime || new Date()\r\n      };\r\n    }\r\n\r\n    try {\r\n      const response = await this.executeAPICall(source, endpoint, options);\r\n      \r\n      // Success - Reset error count\r\n      source.errorCount = 0;\r\n      source.lastSync = new Date();\r\n      \r\n      return {\r\n        success: true,\r\n        data: response.data,\r\n        rateLimitRemaining: response.rateLimitRemaining\r\n      };\r\n\r\n    } catch (error) {\r\n      source.errorCount++;\r\n      \r\n      // Automatic deactivation after 5 consecutive errors\r\n      if (source.errorCount >= 5) {\r\n        source.status = 'inactive';\r\n        console.error(`[API Management] Deactivating source ${sourceId} due to repeated errors`);\r\n      }\r\n\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      };\r\n    }\r\n  }\r\n\r\n  private async executeAPICall(source: DataSource, endpoint: string, options?: any): Promise<any> {\r\n    const fullUrl = `${source.endpoint}${endpoint}`;\r\n    \r\n    switch (source.type) {\r\n      case 'official_api':\r\n        return await this.callOfficialAPI(fullUrl, source, options);\r\n      case 'web_scraping':\r\n        return await this.scrapeWebsite(fullUrl, source, options);\r\n      case 'partner_api':\r\n        return await this.callPartnerAPI(fullUrl, source, options);\r\n      default:\r\n        throw new Error(`Unsupported source type: ${source.type}`);\r\n    }\r\n  }\r\n\r\n  private async callOfficialAPI(url: string, source: DataSource, options?: any): Promise<any> {\r\n    const headers: Record<string, string> = {\r\n      'User-Agent': 'Helix-Regulatory-Intelligence/1.0',\r\n      'Accept': 'application/json'\r\n    };\r\n\r\n    // Add authentication headers if required\r\n    if (source.requiresAuth && options?.apiKey) {\r\n      headers['Authorization'] = `Bearer ${options.apiKey}`;\r\n    }\r\n\r\n    const response = await fetch(url, {\r\n      method: options?.method || 'GET',\r\n      headers,\r\n      body: options?.body ? JSON.stringify(options.body) : undefined,\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n    }\r\n\r\n    // Extract rate limit info from headers\r\n    const rateLimitRemaining = response.headers.get('X-RateLimit-Remaining');\r\n    const rateLimitReset = response.headers.get('X-RateLimit-Reset');\r\n\r\n    if (rateLimitRemaining && rateLimitReset) {\r\n      this.updateRateLimit(\r\n        source.id,\r\n        parseInt(rateLimitRemaining),\r\n        new Date(parseInt(rateLimitReset) * 1000)\r\n      );\r\n    }\r\n\r\n    return {\r\n      data: await response.json(),\r\n      rateLimitRemaining: rateLimitRemaining ? parseInt(rateLimitRemaining) : undefined\r\n    };\r\n  }\r\n\r\n  private async scrapeWebsite(url: string, source: DataSource, options?: any): Promise<any> {\r\n    // 🔴 MOCK DATA - Web Scraping Implementation würde hier erfolgen\r\n    // 🔴 MOCK DATA - Für jetzt Placeholder mit Logging - AUTHENTIC SCRAPER REQUIRED\r\n    console.log(`[API Management] Web scraping ${url} - Implementation needed`);\r\n    \r\n    // Return structured data format\r\n    return {\r\n      data: [],\r\n      rateLimitRemaining: undefined\r\n    };\r\n  }\r\n\r\n  private async callPartnerAPI(url: string, source: DataSource, options?: any): Promise<any> {\r\n    // Partner API calls (wie GRIP) würden hier implementiert\r\n    console.log(`[API Management] Partner API call to ${url}`);\r\n    \r\n    return {\r\n      data: [],\r\n      rateLimitRemaining: undefined\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get all active data sources\r\n   */\r\n  getActiveDataSources(): DataSource[] {\r\n    return Array.from(this.dataSources.values()).filter(source => source.status === 'active');\r\n  }\r\n\r\n  /**\r\n   * Get data sources by region\r\n   */\r\n  getDataSourcesByRegion(region: string): DataSource[] {\r\n    return Array.from(this.dataSources.values()).filter(source => source.region === region);\r\n  }\r\n\r\n  /**\r\n   * Get data sources requiring authentication\r\n   */\r\n  getUnauthenticatedSources(): DataSource[] {\r\n    return Array.from(this.dataSources.values()).filter(\r\n      source => source.requiresAuth && source.status === 'testing'\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Health check for all data sources\r\n   */\r\n  async performHealthCheck(): Promise<{ healthy: number; unhealthy: number; details: any[] }> {\r\n    const results = [];\r\n    let healthy = 0;\r\n    let unhealthy = 0;\r\n\r\n    for (const source of this.dataSources.values()) {\r\n      try {\r\n        // Simple health check endpoint\r\n        const result = await this.callAPI(source.id, '/health', { timeout: 5000 });\r\n        if (result.success) {\r\n          healthy++;\r\n          results.push({ sourceId: source.id, status: 'healthy', lastSync: source.lastSync });\r\n        } else {\r\n          unhealthy++;\r\n          results.push({ sourceId: source.id, status: 'unhealthy', error: result.error });\r\n        }\r\n      } catch (error) {\r\n        unhealthy++;\r\n        results.push({ \r\n          sourceId: source.id, \r\n          status: 'unhealthy', \r\n          error: error instanceof Error ? error.message : 'Unknown error' \r\n        });\r\n      }\r\n    }\r\n\r\n    return { healthy, unhealthy, details: results };\r\n  }\r\n}\r\n\r\nexport const apiManagementService = new APIManagementService();"]}