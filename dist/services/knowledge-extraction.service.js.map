{"version":3,"file":"knowledge-extraction.service.js","sourceRoot":"","sources":["../../server/services/knowledge-extraction.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger } from './logger.service';\r\n// Define types locally since @shared/types doesn't exist\r\ninterface IStorage {\r\n  // Add minimal interface for the methods we need\r\n  getAllRegulatoryUpdates(): Promise<any[]>;\r\n  getAllLegalCases(): Promise<any[]>;\r\n  getAllKnowledgeArticles(): Promise<any[]>;\r\n  createKnowledgeArticle(data: any): Promise<any>;\r\n}\r\n\r\ninterface RegulatoryUpdate {\r\n  id: string;\r\n  title: string;\r\n  description?: string;\r\n  content?: string;\r\n}\r\n\r\ninterface LegalCase {\r\n  id: string;\r\n  title: string;\r\n  content?: string;\r\n  summary?: string;\r\n}\r\n\r\nclass AppError extends Error {\r\n  public readonly statusCode: number;\r\n  \r\n  constructor(message: string, statusCode: number = 500) {\r\n    super(message);\r\n    this.statusCode = statusCode;\r\n    Error.captureStackTrace(this, this.constructor);\r\n  }\r\n}\r\n\r\nclass DatabaseError extends AppError {\r\n  constructor(message: string) {\r\n    super(message, 500);\r\n  }\r\n}\r\n\r\nconst logger = new Logger('KnowledgeExtraction');\r\n\r\nexport interface ExtractedArticle {\r\n  title: string;\r\n  link: string;\r\n  source: string;\r\n  sourceType: 'regulatory' | 'legal';\r\n  category: string;\r\n  region: string;\r\n  extractedAt: Date;\r\n}\r\n\r\nexport interface ArticleExtractionStats {\r\n  totalProcessed: number;\r\n  articlesExtracted: number;\r\n  duplicatesSkipped: number;\r\n  errorsEncountered: number;\r\n  sourcesProcessed: string[];\r\n}\r\n\r\nexport class KnowledgeExtractionService {\r\n  constructor(private storage: IStorage) {}\r\n\r\n  /**\r\n   * Extrahiert Artikel aus allen verfügbaren Datenquellen\r\n   */\r\n  async extractArticlesFromAllSources(): Promise<ArticleExtractionStats> {\r\n    logger.info('Starting knowledge article extraction from all data sources');\r\n    \r\n    const stats: ArticleExtractionStats = {\r\n      totalProcessed: 0,\r\n      articlesExtracted: 0,\r\n      duplicatesSkipped: 0,\r\n      errorsEncountered: 0,\r\n      sourcesProcessed: []\r\n    };\r\n\r\n    try {\r\n      // Regulatorische Updates verarbeiten\r\n      const regulatoryStats = await this.extractFromRegulatoryUpdates();\r\n      this.mergeStats(stats, regulatoryStats);\r\n\r\n      // Rechtsfälle verarbeiten\r\n      const legalStats = await this.extractFromLegalCases();\r\n      this.mergeStats(stats, legalStats);\r\n\r\n      logger.info('Knowledge article extraction completed', { \r\n        totalProcessed: stats.totalProcessed,\r\n        articlesExtracted: stats.articlesExtracted,\r\n        duplicatesSkipped: stats.duplicatesSkipped,\r\n        errorsEncountered: stats.errorsEncountered\r\n      });\r\n      return stats;\r\n    } catch (error) {\r\n      logger.error('Failed to extract knowledge articles', { error });\r\n      throw new AppError('Knowledge article extraction failed', 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extrahiert Artikel aus regulatorischen Updates\r\n   */\r\n  private async extractFromRegulatoryUpdates(): Promise<Partial<ArticleExtractionStats>> {\r\n    logger.info('Extracting articles from regulatory updates');\r\n    \r\n    const stats = {\r\n      totalProcessed: 0,\r\n      articlesExtracted: 0,\r\n      duplicatesSkipped: 0,\r\n      errorsEncountered: 0,\r\n      sourcesProcessed: ['regulatory_updates']\r\n    };\r\n\r\n    try {\r\n      const updates = await this.storage.getAllRegulatoryUpdates();\r\n      stats.totalProcessed = updates.length;\r\n\r\n      for (const update of updates) {\r\n        try {\r\n          const extracted = this.extractArticleFromRegulatoryUpdate(update);\r\n          if (extracted) {\r\n            const isDuplicate = await this.checkForDuplicate(extracted);\r\n            \r\n            if (!isDuplicate) {\r\n              await this.createKnowledgeArticle(extracted);\r\n              stats.articlesExtracted++;\r\n              \r\n              logger.debug('Created knowledge article from regulatory update', {\r\n                title: extracted.title,\r\n                source: extracted.source\r\n              });\r\n            } else {\r\n              stats.duplicatesSkipped++;\r\n            }\r\n          }\r\n        } catch (error) {\r\n          stats.errorsEncountered++;\r\n          logger.warn('Failed to process regulatory update', {\r\n            updateId: update.id,\r\n            error: error instanceof Error ? error.message : String(error)\r\n          });\r\n        }\r\n      }\r\n\r\n      return stats;\r\n    } catch (error) {\r\n      logger.error('Failed to extract from regulatory updates', { error });\r\n      throw new DatabaseError('Failed to fetch regulatory updates', 'getAllRegulatoryUpdates');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extrahiert Artikel aus Rechtsfällen\r\n   */\r\n  private async extractFromLegalCases(): Promise<Partial<ArticleExtractionStats>> {\r\n    logger.info('Extracting articles from legal cases');\r\n    \r\n    const stats = {\r\n      totalProcessed: 0,\r\n      articlesExtracted: 0,\r\n      duplicatesSkipped: 0,\r\n      errorsEncountered: 0,\r\n      sourcesProcessed: ['legal_cases']\r\n    };\r\n\r\n    try {\r\n      const legalCases = await this.storage.getAllLegalCases();\r\n      stats.totalProcessed = legalCases.length;\r\n\r\n      for (const legalCase of legalCases) {\r\n        try {\r\n          const extracted = this.extractArticleFromLegalCase(legalCase);\r\n          if (extracted) {\r\n            const isDuplicate = await this.checkForDuplicate(extracted);\r\n            \r\n            if (!isDuplicate) {\r\n              await this.createKnowledgeArticle(extracted);\r\n              stats.articlesExtracted++;\r\n              \r\n              logger.debug('Created knowledge article from legal case', {\r\n                title: extracted.title,\r\n                source: extracted.source\r\n              });\r\n            } else {\r\n              stats.duplicatesSkipped++;\r\n            }\r\n          }\r\n        } catch (error) {\r\n          stats.errorsEncountered++;\r\n          logger.warn('Failed to process legal case', {\r\n            caseId: legalCase.id,\r\n            error: error instanceof Error ? error.message : String(error)\r\n          });\r\n        }\r\n      }\r\n\r\n      return stats;\r\n    } catch (error) {\r\n      logger.error('Failed to extract from legal cases', { error });\r\n      throw new DatabaseError('Failed to fetch legal cases', 'getAllLegalCases');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extrahiert Artikel-Informationen aus einem regulatorischen Update\r\n   */\r\n  private extractArticleFromRegulatoryUpdate(update: RegulatoryUpdate): ExtractedArticle | null {\r\n    if (!update.title) {\r\n      return null;\r\n    }\r\n\r\n    // Use source_url instead of url, fallback to constructed link\r\n    const link = update.source_url || `https://example.com/regulatory/${update.id}`;\r\n\r\n    return {\r\n      title: this.cleanTitle(update.title),\r\n      link: link,\r\n      source: update.source || 'Regulatory Authority',\r\n      sourceType: 'regulatory',\r\n      category: this.categorizeRegulatoryUpdate(update),\r\n      region: update.region || 'Global',\r\n      extractedAt: new Date()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Extrahiert Artikel-Informationen aus einem Rechtsfall\r\n   */\r\n  private extractArticleFromLegalCase(legalCase: LegalCase): ExtractedArticle | null {\r\n    if (!legalCase.title) {\r\n      return null;\r\n    }\r\n\r\n    // Konstruiere einen Link falls nicht vorhanden\r\n    const link = this.constructLegalCaseLink(legalCase);\r\n\r\n    return {\r\n      title: this.cleanTitle(legalCase.title),\r\n      link: link,\r\n      source: legalCase.court,\r\n      sourceType: 'legal',\r\n      category: this.categorizeLegalCase(legalCase),\r\n      region: legalCase.jurisdiction,\r\n      extractedAt: new Date()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Bereinigt und normalisiert Titel\r\n   */\r\n  private cleanTitle(title: string): string {\r\n    return title\r\n      .trim()\r\n      .replace(/\\s+/g, ' ')\r\n      .replace(/[^\\w\\s\\-\\(\\)\\[\\].,;:!?]/g, '')\r\n      .substring(0, 200); // Titel-Länge begrenzen\r\n  }\r\n\r\n  /**\r\n   * Kategorisiert regulatorische Updates\r\n   */\r\n  private categorizeRegulatoryUpdate(update: RegulatoryUpdate): string {\r\n    const title = update.title.toLowerCase();\r\n    const type = (update.update_type || '').toLowerCase();\r\n\r\n    if (title.includes('software') || title.includes('samd')) {\r\n      return 'Software & Digital Health';\r\n    } else if (title.includes('clinical') || title.includes('trial')) {\r\n      return 'Clinical Trials';\r\n    } else if (title.includes('quality') || title.includes('iso')) {\r\n      return 'Quality Management';\r\n    } else if (type.includes('guidance')) {\r\n      return 'Regulatory Guidance';\r\n    } else if (type.includes('standard')) {\r\n      return 'Standards & Compliance';\r\n    } else {\r\n      return 'General Regulatory';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Kategorisiert Rechtsfälle\r\n   */\r\n  private categorizeLegalCase(legalCase: LegalCase): string {\r\n    const title = legalCase.title.toLowerCase();\r\n    const issues = (legalCase.keywords || []).join(' ').toLowerCase();\r\n\r\n    if (title.includes('patent') || issues.includes('patent')) {\r\n      return 'Patent Law';\r\n    } else if (title.includes('product liability') || issues.includes('liability')) {\r\n      return 'Product Liability';\r\n    } else if (title.includes('regulatory') || issues.includes('fda')) {\r\n      return 'Regulatory Compliance';\r\n    } else if (title.includes('antitrust') || issues.includes('competition')) {\r\n      return 'Antitrust & Competition';\r\n    } else {\r\n      return 'General Legal';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Konstruiert einen Link für Rechtsfälle\r\n   */\r\n  private constructLegalCaseLink(legalCase: LegalCase): string {\r\n    // Verwende document_url falls vorhanden, sonst Suchlink\r\n    if (legalCase.document_url) {\r\n      return legalCase.document_url;\r\n    }\r\n    \r\n    // Fallback: Suchlink basierend auf Gerichtshof und Fallnummer\r\n    const searchQuery = encodeURIComponent(`${legalCase.court} ${legalCase.case_number || legalCase.caseNumber || legalCase.id}`);\r\n    return `https://www.google.com/search?q=${searchQuery}`;\r\n  }\r\n\r\n  /**\r\n   * Prüft auf Duplikate\r\n   */\r\n  private async checkForDuplicate(extracted: ExtractedArticle): Promise<boolean> {\r\n    try {\r\n      const existingArticles = await this.storage.getAllKnowledgeArticles();\r\n      \r\n      return existingArticles.some(article => \r\n        article.title === extracted.title || \r\n        (extracted.link && extracted.link !== '' && \r\n         article.content && article.content.includes(extracted.link))\r\n      );\r\n    } catch (error) {\r\n      logger.warn('Failed to check for duplicates', { error });\r\n      return false; // Im Zweifel erlauben wir die Erstellung\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Erstellt einen Knowledge Article\r\n   */\r\n  private async createKnowledgeArticle(extracted: ExtractedArticle): Promise<void> {\r\n    const articleContent = this.generateArticleContent(extracted);\r\n    \r\n    await this.storage.addKnowledgeArticle({\r\n      title: extracted.title,\r\n      content: articleContent,\r\n      category: extracted.category,\r\n      tags: this.generateTags(extracted),\r\n      author: 'System - Automated Extraction',\r\n      isPublished: false // Startet als Entwurf für Review\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Generiert Artikel-Inhalt\r\n   */\r\n  private generateArticleContent(extracted: ExtractedArticle): string {\r\n    return `# ${extracted.title}\r\n\r\n**Quelle:** ${extracted.source}  \r\n**Region:** ${extracted.region}  \r\n**Typ:** ${extracted.sourceType === 'regulatory' ? 'Regulatorisches Update' : 'Rechtsfall'}  \r\n**Kategorie:** ${extracted.category}  \r\n**Extrahiert am:** ${extracted.extractedAt.toLocaleDateString('de-DE')}\r\n\r\n## Originalquelle\r\n[Zum Originaldokument](${extracted.link})\r\n\r\n## Zusammenfassung\r\n*Dieser Artikel wurde automatisch aus den Datenquellen extrahiert und erfordert eine manuelle Überprüfung und Ergänzung.*\r\n\r\n---\r\n*Automatisch generiert am ${extracted.extractedAt.toISOString()}*`;\r\n  }\r\n\r\n  /**\r\n   * Generiert Tags für den Artikel\r\n   */\r\n  private generateTags(extracted: ExtractedArticle): string[] {\r\n    const tags: string[] = [\r\n      extracted.sourceType,\r\n      extracted.region,\r\n      extracted.category,\r\n      'auto-extracted',\r\n      'needs-review'\r\n    ];\r\n\r\n    // Zusätzliche Tags basierend auf dem Titel\r\n    const title = extracted.title.toLowerCase();\r\n    if (title.includes('software')) tags.push('software');\r\n    if (title.includes('clinical')) tags.push('clinical-trials');\r\n    if (title.includes('fda')) tags.push('fda');\r\n    if (title.includes('ema')) tags.push('ema');\r\n    if (title.includes('mhra')) tags.push('mhra');\r\n    if (title.includes('guidance')) tags.push('guidance');\r\n    if (title.includes('recall')) tags.push('recall');\r\n\r\n    return Array.from(new Set(tags)); // Duplikate entfernen\r\n  }\r\n\r\n  /**\r\n   * Führt Statistiken zusammen\r\n   */\r\n  private mergeStats(target: ArticleExtractionStats, source: Partial<ArticleExtractionStats>): void {\r\n    target.totalProcessed += source.totalProcessed || 0;\r\n    target.articlesExtracted += source.articlesExtracted || 0;\r\n    target.duplicatesSkipped += source.duplicatesSkipped || 0;\r\n    target.errorsEncountered += source.errorsEncountered || 0;\r\n    target.sourcesProcessed.push(...(source.sourcesProcessed || []));\r\n  }\r\n\r\n  /**\r\n   * Extrahiert Artikel aus spezifischen Datenquellen\r\n   */\r\n  async extractFromSpecificSources(sourceIds: string[]): Promise<ArticleExtractionStats> {\r\n    logger.info('Extracting articles from specific sources', { sourceIds });\r\n    \r\n    const stats: ArticleExtractionStats = {\r\n      totalProcessed: 0,\r\n      articlesExtracted: 0,\r\n      duplicatesSkipped: 0,\r\n      errorsEncountered: 0,\r\n      sourcesProcessed: sourceIds\r\n    };\r\n\r\n    // Hier könnte spezifische Logik für bestimmte Datenquellen implementiert werden\r\n    // Vorerst verwenden wir die allgemeine Extraktion\r\n    return await this.extractArticlesFromAllSources();\r\n  }\r\n}"]}