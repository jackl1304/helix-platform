{"version":3,"file":"startupSyncService.js","sourceRoot":"","sources":["../../server/services/startupSyncService.ts"],"names":[],"mappings":"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","sourcesContent":["import { RealTimeAPIService } from './realTimeAPIService';\r\nimport { universalSourceDispatcher } from './universalSourceDispatcher';\r\nimport { db } from '../db';\r\n\r\n/**\r\n * Startup Synchronization Service\r\n * Ensures fresh regulatory data on every server start\r\n */\r\nexport class StartupSyncService {\r\n  private realTimeAPI: RealTimeAPIService;\r\n\r\n  constructor() {\r\n    this.realTimeAPI = new RealTimeAPIService();\r\n  }\r\n\r\n  /**\r\n   * Comprehensive data synchronization on startup\r\n   * RESILIENT: Each phase runs independently, failures don't stop other phases\r\n   */\r\n  async performStartupSync(): Promise<void> {\r\n    console.log('[Startup Sync] 🚀 Starting resilient multi-source data synchronization...');\r\n    \r\n    const syncResults = {\r\n      fda: { success: false, error: null, records: 0 },\r\n      clinical: { success: false, error: null, records: 0 },\r\n      who: { success: false, error: null, records: 0 },\r\n      universal: { success: false, error: null, sources: 0, records: 0 },\r\n      cleanup: { success: false, error: null, entriesRemoved: 0 }\r\n    };\r\n\r\n    // Phase 1: FDA Data (High Priority) - Resilient execution\r\n    try {\r\n      console.log('[Startup Sync] Phase 1: Syncing FDA data sources...');\r\n      const fdaResult = await this.realTimeAPI.syncFDAData();\r\n      syncResults.fda.success = fdaResult.success;\r\n      syncResults.fda.records = fdaResult.summary?.totalRecords || 0;\r\n      console.log('[Startup Sync] FDA Phase Result:', fdaResult.summary);\r\n    } catch (error: any) {\r\n      syncResults.fda.error = error.message;\r\n      console.error('[Startup Sync] FDA phase failed but continuing:', error.message);\r\n    }\r\n\r\n    // Phase 2: Clinical Trials (Medium Priority) - Resilient execution\r\n    try {\r\n      console.log('[Startup Sync] Phase 2: Syncing clinical trials data...');\r\n      const clinicalResult = await this.realTimeAPI.syncClinicalTrialsData();\r\n      syncResults.clinical.success = clinicalResult.success;\r\n      syncResults.clinical.records = clinicalResult.summary?.totalRecords || 0;\r\n      console.log('[Startup Sync] Clinical Trials Phase Result:', clinicalResult.summary);\r\n    } catch (error: any) {\r\n      syncResults.clinical.error = error.message;\r\n      console.error('[Startup Sync] Clinical trials phase failed but continuing:', error.message);\r\n    }\r\n\r\n    // Phase 3: EU Regulatory Data (High Priority) - Resilient execution\r\n    try {\r\n      console.log('[Startup Sync] Phase 3: Syncing EU regulatory data (EMA, BfArM, Swissmedic)...');\r\n      const euResult = await this.realTimeAPI.syncEUData();\r\n      syncResults.who.success = euResult.success;\r\n      syncResults.who.records = euResult.summary?.totalRecords || 0;\r\n      console.log('[Startup Sync] EU Regulatory Phase Result:', euResult.summary);\r\n    } catch (error: any) {\r\n      syncResults.who.error = error.message;\r\n      console.error('[Startup Sync] EU regulatory phase failed but continuing:', error.message);\r\n    }\r\n\r\n    // Phase 4: Universal Multi-Source Sync (ALL 70+ sources)\r\n    try {\r\n      console.log('[Startup Sync] Phase 4: Universal multi-source synchronization (70+ sources)...');\r\n      const universalResult = await universalSourceDispatcher.syncAllSources();\r\n      syncResults.universal = { \r\n        success: universalResult.summary.successfulSources > 0, \r\n        error: null, \r\n        sources: universalResult.summary.totalSources,\r\n        records: universalResult.summary.totalRecords \r\n      };\r\n      console.log('[Startup Sync] Universal sync phase completed:', universalResult.summary);\r\n    } catch (error: any) {\r\n      syncResults.universal = { success: false, error: error.message, sources: 0, records: 0 };\r\n      console.error('[Startup Sync] Universal sync failed but continuing:', error.message);\r\n    }\r\n\r\n    // Phase 5: Cleanup - ALWAYS runs regardless of previous failures\r\n    try {\r\n      console.log('[Startup Sync] Phase 5: Cleaning up generic entries...');\r\n      await this.cleanupGenericEntries();\r\n      syncResults.cleanup.success = true;\r\n      console.log('[Startup Sync] Cleanup phase completed successfully');\r\n    } catch (error: any) {\r\n      syncResults.cleanup.error = error.message;\r\n      console.error('[Startup Sync] Cleanup failed:', error.message);\r\n    }\r\n\r\n    // Final Summary Report\r\n    const totalSuccesses = Object.values(syncResults).filter(r => r.success).length;\r\n    const totalPhases = Object.keys(syncResults).length;\r\n    const totalRecords = syncResults.fda.records + syncResults.clinical.records + syncResults.who.records + syncResults.universal.records;\r\n\r\n    console.log('[Startup Sync] 🎯 FINAL SUMMARY:');\r\n    console.log(`[Startup Sync] Success Rate: ${totalSuccesses}/${totalPhases} phases successful`);\r\n    console.log(`[Startup Sync] Total Records Synced: ${totalRecords}`);\r\n    console.log('[Startup Sync] Phase Details:', syncResults);\r\n    \r\n    if (totalSuccesses >= 2) {\r\n      console.log('[Startup Sync] ✅ Startup sync completed successfully (partial or full)');\r\n    } else {\r\n      console.log('[Startup Sync] ⚠️  Startup sync completed with limited success');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove any remaining generic/fake entries from previous sync issues\r\n   */\r\n  private async cleanupGenericEntries(): Promise<void> {\r\n    try {\r\n      console.log('[Startup Sync] Cleaning up generic entries...');\r\n      \r\n      // Remove entries with generic titles and no source\r\n      const result = await db.execute(`\r\n        DELETE FROM regulatory_updates \r\n        WHERE (\r\n          title LIKE '%Medical Device Approval%' OR \r\n          title LIKE '%Medical Device Clearance%' OR\r\n          title LIKE '%Medical Device Recall%'\r\n        ) \r\n        AND source_id IS NULL\r\n        AND description IS NULL\r\n      `);\r\n\r\n      console.log(`[Startup Sync] Cleaned up ${result.rowCount || 0} generic entries`);\r\n      \r\n    } catch (error) {\r\n      console.error('[Startup Sync] Error during cleanup:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get sync statistics for monitoring\r\n   */\r\n  async getSyncStats(): Promise<any> {\r\n    try {\r\n      const totalResult = await db.execute('SELECT COUNT(*) as total FROM regulatory_updates');\r\n      const recentResult = await db.execute(`\r\n        SELECT COUNT(*) as recent \r\n        FROM regulatory_updates \r\n        WHERE created_at >= NOW() - INTERVAL '24 hours'\r\n      `);\r\n\r\n      return {\r\n        totalUpdates: totalResult.rows[0]?.total || 0,\r\n        recentUpdates: recentResult.rows[0]?.recent || 0,\r\n        lastSync: new Date().toISOString()\r\n      };\r\n    } catch (error) {\r\n      console.error('[Startup Sync] Error getting stats:', error);\r\n      return { totalUpdates: 0, recentUpdates: 0, lastSync: new Date().toISOString() };\r\n    }\r\n  }\r\n}\r\n\r\n// Auto-run on server startup\r\nexport const startupSyncService = new StartupSyncService();\r\n\r\n// Schedule startup sync when this module is imported\r\nif (process.env.NODE_ENV !== 'test') {\r\n  setTimeout(async () => {\r\n    try {\r\n      await startupSyncService.performStartupSync();\r\n    } catch (error) {\r\n      console.error('[Startup Sync] Failed to run startup sync:', error);\r\n    }\r\n  }, 5000); // Wait 5 seconds after server start to allow DB connection\r\n}"]}