{"version":3,"file":"performanceMonitor.js","sourceRoot":"","sources":["../../server/services/performanceMonitor.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger } from './logger.service';\r\nimport { cachingService } from './cachingService';\r\n\r\nconst logger = new Logger('PerformanceMonitor');\r\n\r\ninterface PerformanceMetrics {\r\n  endpoint: string;\r\n  method: string;\r\n  duration: number;\r\n  statusCode: number;\r\n  timestamp: Date;\r\n  cacheHit?: boolean;\r\n  memoryUsage?: number;\r\n}\r\n\r\n/**\r\n * Production-ready performance monitoring service\r\n * Tracks API response times, cache effectiveness, and system health\r\n */\r\nexport class PerformanceMonitor {\r\n  private static instance: PerformanceMonitor;\r\n  private metrics: PerformanceMetrics[] = [];\r\n  private readonly maxMetricsHistory = 1000;\r\n\r\n  private constructor() {\r\n    // Clean up old metrics every 10 minutes\r\n    setInterval(() => {\r\n      this.cleanupOldMetrics();\r\n    }, 10 * 60 * 1000);\r\n  }\r\n\r\n  static getInstance(): PerformanceMonitor {\r\n    if (!PerformanceMonitor.instance) {\r\n      PerformanceMonitor.instance = new PerformanceMonitor();\r\n    }\r\n    return PerformanceMonitor.instance;\r\n  }\r\n\r\n  /**\r\n   * Track API endpoint performance\r\n   */\r\n  trackApiCall(\r\n    endpoint: string,\r\n    method: string,\r\n    duration: number,\r\n    statusCode: number,\r\n    cacheHit: boolean = false\r\n  ): void {\r\n    const metric: PerformanceMetrics = {\r\n      endpoint,\r\n      method,\r\n      duration,\r\n      statusCode,\r\n      timestamp: new Date(),\r\n      cacheHit,\r\n      memoryUsage: this.getMemoryUsage()\r\n    };\r\n\r\n    this.metrics.push(metric);\r\n\r\n    // Log slow requests\r\n    if (duration > 2000) {\r\n      logger.warn('Slow API request detected', {\r\n        endpoint,\r\n        method,\r\n        duration,\r\n        statusCode,\r\n        cacheHit\r\n      });\r\n    }\r\n\r\n    // Keep metrics array manageable\r\n    if (this.metrics.length > this.maxMetricsHistory) {\r\n      this.metrics = this.metrics.slice(-this.maxMetricsHistory);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get performance statistics for the last N minutes\r\n   */\r\n  getPerformanceStats(lastMinutes: number = 60) {\r\n    const cutoffTime = new Date(Date.now() - lastMinutes * 60 * 1000);\r\n    const recentMetrics = this.metrics.filter(m => m.timestamp > cutoffTime);\r\n\r\n    if (recentMetrics.length === 0) {\r\n      return {\r\n        totalRequests: 0,\r\n        averageResponseTime: 0,\r\n        cacheHitRate: 0,\r\n        errorRate: 0,\r\n        slowRequestCount: 0,\r\n        endpoints: {}\r\n      };\r\n    }\r\n\r\n    const totalRequests = recentMetrics.length;\r\n    const averageResponseTime = recentMetrics.reduce((sum, m) => sum + m.duration, 0) / totalRequests;\r\n    const cacheHits = recentMetrics.filter(m => m.cacheHit).length;\r\n    const cacheHitRate = (cacheHits / totalRequests) * 100;\r\n    const errors = recentMetrics.filter(m => m.statusCode >= 400).length;\r\n    const errorRate = (errors / totalRequests) * 100;\r\n    const slowRequestCount = recentMetrics.filter(m => m.duration > 2000).length;\r\n\r\n    // Group by endpoint\r\n    const endpointStats = recentMetrics.reduce((acc, metric) => {\r\n      if (!acc[metric.endpoint]) {\r\n        acc[metric.endpoint] = {\r\n          count: 0,\r\n          totalDuration: 0,\r\n          errors: 0,\r\n          cacheHits: 0\r\n        };\r\n      }\r\n      acc[metric.endpoint].count++;\r\n      acc[metric.endpoint].totalDuration += metric.duration;\r\n      if (metric.statusCode >= 400) acc[metric.endpoint].errors++;\r\n      if (metric.cacheHit) acc[metric.endpoint].cacheHits++;\r\n      return acc;\r\n    }, {} as Record<string, any>);\r\n\r\n    // Calculate averages for each endpoint\r\n    const endpoints = Object.entries(endpointStats).reduce((acc, [endpoint, stats]: [string, any]) => {\r\n      acc[endpoint] = {\r\n        count: stats.count,\r\n        averageResponseTime: Math.round(stats.totalDuration / stats.count),\r\n        errorRate: Math.round((stats.errors / stats.count) * 100),\r\n        cacheHitRate: Math.round((stats.cacheHits / stats.count) * 100)\r\n      };\r\n      return acc;\r\n    }, {} as Record<string, any>);\r\n\r\n    return {\r\n      totalRequests,\r\n      averageResponseTime: Math.round(averageResponseTime),\r\n      cacheHitRate: Math.round(cacheHitRate),\r\n      errorRate: Math.round(errorRate),\r\n      slowRequestCount,\r\n      currentMemoryUsage: this.getMemoryUsage(),\r\n      endpoints\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get system health summary\r\n   */\r\n  getHealthSummary() {\r\n    const stats = this.getPerformanceStats(15); // Last 15 minutes\r\n    const cacheStats = cachingService.getStats();\r\n    \r\n    let healthScore = 100;\r\n    const issues: string[] = [];\r\n\r\n    // Deduct points for performance issues\r\n    if (stats.averageResponseTime > 1000) {\r\n      healthScore -= 20;\r\n      issues.push('High average response time');\r\n    }\r\n    \r\n    if (stats.errorRate > 5) {\r\n      healthScore -= 25;\r\n      issues.push('High error rate');\r\n    }\r\n    \r\n    if (stats.slowRequestCount > 0) {\r\n      healthScore -= 10;\r\n      issues.push('Slow requests detected');\r\n    }\r\n    \r\n    if (cacheStats.size > cacheStats.maxSize * 0.9) {\r\n      healthScore -= 5;\r\n      issues.push('Cache nearly full');\r\n    }\r\n\r\n    const memoryUsage = this.getMemoryUsage();\r\n    if (memoryUsage > 80) {\r\n      healthScore -= 15;\r\n      issues.push('High memory usage');\r\n    }\r\n\r\n    return {\r\n      healthScore: Math.max(0, healthScore),\r\n      status: healthScore >= 90 ? 'excellent' : \r\n              healthScore >= 70 ? 'good' : \r\n              healthScore >= 50 ? 'fair' : 'poor',\r\n      issues,\r\n      performance: stats,\r\n      cache: cacheStats,\r\n      uptime: process.uptime(),\r\n      memoryUsage\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create Express middleware for automatic performance tracking\r\n   */\r\n  createMiddleware() {\r\n    return (req: any, res: any, next: any) => {\r\n      const startTime = Date.now();\r\n      \r\n      res.on('finish', () => {\r\n        const duration = Date.now() - startTime;\r\n        const cacheHit = res.getHeader('X-Cache-Hit') === 'true';\r\n        \r\n        this.trackApiCall(\r\n          req.path,\r\n          req.method,\r\n          duration,\r\n          res.statusCode,\r\n          cacheHit\r\n        );\r\n      });\r\n      \r\n      next();\r\n    };\r\n  }\r\n\r\n  private getMemoryUsage(): number {\r\n    const usage = process.memoryUsage();\r\n    return Math.round((usage.heapUsed / usage.heapTotal) * 100);\r\n  }\r\n\r\n  private cleanupOldMetrics(): void {\r\n    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);\r\n    const initialCount = this.metrics.length;\r\n    this.metrics = this.metrics.filter(m => m.timestamp > oneHourAgo);\r\n    \r\n    const cleaned = initialCount - this.metrics.length;\r\n    if (cleaned > 0) {\r\n      logger.debug('Cleaned up old performance metrics', { \r\n        cleaned, \r\n        remaining: this.metrics.length \r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport const performanceMonitor = PerformanceMonitor.getInstance();"]}