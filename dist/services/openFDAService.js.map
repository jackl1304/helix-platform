{"version":3,"file":"openFDAService.js","sourceRoot":"","sources":["../../server/services/openFDAService.ts"],"names":[],"mappings":"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","sourcesContent":["import { db } from '../db';\r\nimport { fdaDrugLabels, fdaAdverseEvents, fdaDeviceRecalls } from '../../shared/schema';\r\nimport { eq, and, desc, asc, count } from 'drizzle-orm';\r\n\r\ninterface OpenFDAConfig {\r\n  baseUrl: string;\r\n  rateLimit: {\r\n    requestsPerHour: number;\r\n    requestsPerDay: number;\r\n  };\r\n}\r\n\r\ninterface DrugLabelResponse {\r\n  meta: {\r\n    disclaimer: string;\r\n    license: string;\r\n    last_updated: string;\r\n    results: {\r\n      skip: number;\r\n      limit: number;\r\n      total: number;\r\n    };\r\n  };\r\n  results: Array<{\r\n    application_number: string[];\r\n    brand_name: string[];\r\n    generic_name: string[];\r\n    manufacturer_name: string[];\r\n    product_type: string[];\r\n    route: string[];\r\n    active_ingredient: string[];\r\n    indications_and_usage: string[];\r\n    dosage_and_administration: string[];\r\n    contraindications: string[];\r\n    warnings: string[];\r\n    adverse_reactions: string[];\r\n    drug_interactions: string[];\r\n    pregnancy: string[];\r\n    ndc: string[];\r\n    labeling_revision_date: string;\r\n    approval_date: string;\r\n  }>;\r\n}\r\n\r\ninterface AdverseEventResponse {\r\n  meta: {\r\n    disclaimer: string;\r\n    license: string;\r\n    last_updated: string;\r\n    results: {\r\n      skip: number;\r\n      limit: number;\r\n      total: number;\r\n    };\r\n  };\r\n  results: Array<{\r\n    safetyreportid: string;\r\n    receiptdate: string;\r\n    transmissiondate: string;\r\n    patient: {\r\n      patientage: string;\r\n      patientsex: string;\r\n      patientweight: string;\r\n      drug: Array<{\r\n        medicinalproduct: string;\r\n        drugcharacterization: string;\r\n        drugindicationmeddraversion: string;\r\n        drugadditional: string;\r\n      }>;\r\n      reaction: Array<{\r\n        reactionmeddrapt: string;\r\n        reactionoutcome: string;\r\n      }>;\r\n    };\r\n    reporttype: string;\r\n    qualification: string;\r\n    occurcountry: string;\r\n    reportercountry: string;\r\n    seriousness: string;\r\n    serious: number;\r\n  }>;\r\n}\r\n\r\ninterface DeviceRecallResponse {\r\n  meta: {\r\n    disclaimer: string;\r\n    license: string;\r\n    last_updated: string;\r\n    results: {\r\n      skip: number;\r\n      limit: number;\r\n      total: number;\r\n    };\r\n  };\r\n  results: Array<{\r\n    recall_number: string;\r\n    device_name: string;\r\n    manufacturer_name: string;\r\n    device_class: string;\r\n    product_code: string;\r\n    reason_for_recall: string;\r\n    distribution_pattern: string;\r\n    k_number: string;\r\n    pma_number: string;\r\n    recall_initiation_date: string;\r\n    report_date: string;\r\n    termination_date: string;\r\n    status: string;\r\n    recall_classification: string;\r\n  }>;\r\n}\r\n\r\nexport class OpenFDAService {\r\n  private config: OpenFDAConfig;\r\n  private requestCount: { hour: number; day: number; lastReset: { hour: number; day: number } };\r\n\r\n  constructor() {\r\n    this.config = {\r\n      baseUrl: 'https://api.fda.gov',\r\n      rateLimit: {\r\n        requestsPerHour: 1000,\r\n        requestsPerDay: 40000\r\n      }\r\n    };\r\n    \r\n    this.requestCount = {\r\n      hour: 0,\r\n      day: 0,\r\n      lastReset: {\r\n        hour: Date.now(),\r\n        day: Date.now()\r\n      }\r\n    };\r\n  }\r\n\r\n  private parseDate(dateString: string): Date | null {\r\n    try {\r\n      // Handle common FDA date formats\r\n      if (!dateString || dateString.trim() === '') {\r\n        return null;\r\n      }\r\n      \r\n      // Remove any trailing/leading whitespace\r\n      const cleanDateString = dateString.trim();\r\n      \r\n      // Try parsing the date\r\n      const date = new Date(cleanDateString);\r\n      \r\n      // Check if the date is valid\r\n      if (isNaN(date.getTime())) {\r\n        console.warn(`[OpenFDA] Invalid date string: \"${dateString}\"`);\r\n        return null;\r\n      }\r\n      \r\n      return date;\r\n    } catch (error) {\r\n      console.warn(`[OpenFDA] Error parsing date \"${dateString}\":`, error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private checkRateLimit(): boolean {\r\n    const now = Date.now();\r\n    const hoursSinceReset = (now - this.requestCount.lastReset.hour) / (1000 * 60 * 60);\r\n    const daysSinceReset = (now - this.requestCount.lastReset.day) / (1000 * 60 * 60 * 24);\r\n\r\n    // Reset hourly counter\r\n    if (hoursSinceReset >= 1) {\r\n      this.requestCount.hour = 0;\r\n      this.requestCount.lastReset.hour = now;\r\n    }\r\n\r\n    // Reset daily counter\r\n    if (daysSinceReset >= 1) {\r\n      this.requestCount.day = 0;\r\n      this.requestCount.lastReset.day = now;\r\n    }\r\n\r\n    // Check limits\r\n    if (this.requestCount.hour >= this.config.rateLimit.requestsPerHour) {\r\n      throw new Error('OpenFDA API hourly rate limit exceeded');\r\n    }\r\n\r\n    if (this.requestCount.day >= this.config.rateLimit.requestsPerDay) {\r\n      throw new Error('OpenFDA API daily rate limit exceeded');\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private async makeRequest(endpoint: string, params: Record<string, string> = {}): Promise<any> {\r\n    this.checkRateLimit();\r\n\r\n    const url = new URL(`${this.config.baseUrl}${endpoint}`);\r\n    Object.entries(params).forEach(([key, value]) => {\r\n      url.searchParams.append(key, value);\r\n    });\r\n\r\n    console.log(`[OpenFDA] Making request to: ${url.toString()}`);\r\n\r\n    try {\r\n      const response = await fetch(url.toString(), {\r\n        headers: {\r\n          'User-Agent': 'Helix-Regulatory-Intelligence/1.0'\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`OpenFDA API error: ${response.status} ${response.statusText}`);\r\n      }\r\n\r\n      this.requestCount.hour++;\r\n      this.requestCount.day++;\r\n\r\n      const data = await response.json();\r\n      console.log(`[OpenFDA] Request successful, got ${data.results?.length || 0} results`);\r\n      \r\n      return data;\r\n    } catch (error) {\r\n      console.error('[OpenFDA] Request failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // FDA Drug Labels API\r\n  async fetchDrugLabels(search?: string, limit: number = 100): Promise<DrugLabelResponse> {\r\n    const params: Record<string, string> = { limit: limit.toString() };\r\n    \r\n    if (search) {\r\n      params.search = search;\r\n    }\r\n\r\n    return this.makeRequest('/drug/label.json', params);\r\n  }\r\n\r\n  async storeDrugLabels(labels: DrugLabelResponse['results'], tenantId: string): Promise<void> {\r\n    console.log(`[OpenFDA] Storing ${labels.length} drug labels in database`);\r\n\r\n    for (const label of labels) {\r\n      try {\r\n        // Check if record already exists to avoid duplicates\r\n        const appNumber = label.application_number?.[0] || '';\r\n        const existingRecord = await db.select().from(fdaDrugLabels)\r\n          .where(and(\r\n            eq(fdaDrugLabels.applicationNumber, appNumber),\r\n            eq(fdaDrugLabels.tenantId, tenantId)\r\n          ))\r\n          .limit(1);\r\n        \r\n        if (existingRecord.length === 0) {\r\n          await db.insert(fdaDrugLabels).values({\r\n            tenantId,\r\n            applicationNumber: appNumber,\r\n            brandName: label.brand_name?.[0],\r\n            genericName: label.generic_name?.[0],\r\n            manufacturerName: label.manufacturer_name?.[0],\r\n            productType: label.product_type?.[0],\r\n            routeOfAdministration: label.route || [],\r\n            activeIngredients: { ingredients: label.active_ingredient || [] },\r\n            indicationsAndUsage: label.indications_and_usage?.[0],\r\n            dosageAndAdministration: label.dosage_and_administration?.[0],\r\n            contraindications: label.contraindications?.[0],\r\n            warnings: label.warnings?.[0],\r\n            adverseReactions: label.adverse_reactions?.[0],\r\n            drugInteractions: label.drug_interactions?.[0],\r\n            pregnancyCategory: label.pregnancy?.[0],\r\n            ndc: label.ndc || [],\r\n            labelingRevisionDate: label.labeling_revision_date ? this.parseDate(label.labeling_revision_date) : null,\r\n            fdaApprovalDate: label.approval_date ? this.parseDate(label.approval_date) : null,\r\n            rawData: label\r\n          });\r\n        }\r\n      } catch (error) {\r\n        console.error('[OpenFDA] Error storing drug label:', error);\r\n      }\r\n    }\r\n  }\r\n\r\n  // FDA Adverse Events API\r\n  async fetchAdverseEvents(search?: string, limit: number = 100): Promise<AdverseEventResponse> {\r\n    const params: Record<string, string> = { limit: limit.toString() };\r\n    \r\n    if (search) {\r\n      params.search = search;\r\n    }\r\n\r\n    return this.makeRequest('/drug/event.json', params);\r\n  }\r\n\r\n  async storeAdverseEvents(events: AdverseEventResponse['results'], tenantId: string): Promise<void> {\r\n    console.log(`[OpenFDA] Storing ${events.length} adverse events in database`);\r\n\r\n    for (const event of events) {\r\n      try {\r\n        // Check if record already exists to avoid duplicates\r\n        const existingRecord = await db.select().from(fdaAdverseEvents)\r\n          .where(and(\r\n            eq(fdaAdverseEvents.safetyReportId, event.safetyreportid),\r\n            eq(fdaAdverseEvents.tenantId, tenantId)\r\n          ))\r\n          .limit(1);\r\n        \r\n        if (existingRecord.length === 0) {\r\n          await db.insert(fdaAdverseEvents).values({\r\n            tenantId,\r\n            safetyReportId: event.safetyreportid,\r\n            receiptDate: event.receiptdate ? this.parseDate(event.receiptdate) : null,\r\n            transmissionDate: event.transmissiondate ? this.parseDate(event.transmissiondate) : null,\r\n            patientAge: event.patient?.patientage,\r\n            patientSex: event.patient?.patientsex,\r\n            patientWeight: event.patient?.patientweight,\r\n            drugs: { drugs: event.patient?.drug || [] },\r\n            reactions: { reactions: event.patient?.reaction || [] },\r\n            outcomes: event.patient?.reaction?.map(r => r.reactionoutcome) || [],\r\n            seriousness: event.seriousness,\r\n            reportType: event.reporttype,\r\n            qualification: event.qualification,\r\n            country: event.occurcountry || event.reportercountry,\r\n            rawData: event\r\n          });\r\n        }\r\n      } catch (error) {\r\n        console.error('[OpenFDA] Error storing adverse event:', error);\r\n      }\r\n    }\r\n  }\r\n\r\n  // FDA Device Recalls API\r\n  async fetchDeviceRecalls(search?: string, limit: number = 100): Promise<DeviceRecallResponse> {\r\n    const params: Record<string, string> = { limit: limit.toString() };\r\n    \r\n    if (search) {\r\n      params.search = search;\r\n    }\r\n\r\n    return this.makeRequest('/device/recall.json', params);\r\n  }\r\n\r\n  async storeDeviceRecalls(recalls: DeviceRecallResponse['results'], tenantId: string): Promise<void> {\r\n    console.log(`[OpenFDA] Storing ${recalls.length} device recalls in database`);\r\n\r\n    for (const recall of recalls) {\r\n      try {\r\n        // Skip records with missing required fields\r\n        if (!recall.recall_number || recall.recall_number.trim() === '') {\r\n          console.warn(`[OpenFDA] Skipping device recall with missing recall_number:`, recall);\r\n          continue;\r\n        }\r\n        \r\n        // Check if record already exists to avoid duplicates\r\n        const existingRecord = await db.select().from(fdaDeviceRecalls)\r\n          .where(and(\r\n            eq(fdaDeviceRecalls.recallNumber, recall.recall_number),\r\n            eq(fdaDeviceRecalls.tenantId, tenantId)\r\n          ))\r\n          .limit(1);\r\n        \r\n        if (existingRecord.length === 0) {\r\n          await db.insert(fdaDeviceRecalls).values({\r\n            tenantId,\r\n            recallNumber: recall.recall_number,\r\n            deviceName: recall.device_name,\r\n            manufacturer: recall.manufacturer_name,\r\n            deviceClass: recall.device_class,\r\n            productCode: recall.product_code,\r\n            recallReason: recall.reason_for_recall,\r\n            distributionPattern: recall.distribution_pattern,\r\n            kNumber: recall.k_number,\r\n            pmaNumber: recall.pma_number,\r\n            recallInitiationDate: recall.recall_initiation_date ? this.parseDate(recall.recall_initiation_date) : null,\r\n            reportDate: recall.report_date ? this.parseDate(recall.report_date) : null,\r\n            terminationDate: recall.termination_date ? this.parseDate(recall.termination_date) : null,\r\n            recallStatus: recall.status,\r\n            recallClassification: recall.recall_classification,\r\n            rawData: recall\r\n          });\r\n        }\r\n      } catch (error) {\r\n        console.error('[OpenFDA] Error storing device recall:', error);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Combined data fetch and store operations\r\n  async syncDrugLabels(tenantId: string, search?: string): Promise<{ success: boolean; count: number; message: string }> {\r\n    try {\r\n      console.log('[OpenFDA] Starting drug labels sync...');\r\n      const response = await this.fetchDrugLabels(search, 100);\r\n      \r\n      if (response.results && response.results.length > 0) {\r\n        await this.storeDrugLabels(response.results, tenantId);\r\n        return {\r\n          success: true,\r\n          count: response.results.length,\r\n          message: `Successfully synced ${response.results.length} drug labels`\r\n        };\r\n      } else {\r\n        return {\r\n          success: true,\r\n          count: 0,\r\n          message: 'No new drug labels found'\r\n        };\r\n      }\r\n    } catch (error) {\r\n      console.error('[OpenFDA] Drug labels sync failed:', error);\r\n      return {\r\n        success: false,\r\n        count: 0,\r\n        message: `Sync failed: ${error instanceof Error ? error.message : 'Unknown error'}`\r\n      };\r\n    }\r\n  }\r\n\r\n  async syncAdverseEvents(tenantId: string, search?: string): Promise<{ success: boolean; count: number; message: string }> {\r\n    try {\r\n      console.log('[OpenFDA] Starting adverse events sync...');\r\n      const response = await this.fetchAdverseEvents(search, 100);\r\n      \r\n      if (response.results && response.results.length > 0) {\r\n        await this.storeAdverseEvents(response.results, tenantId);\r\n        return {\r\n          success: true,\r\n          count: response.results.length,\r\n          message: `Successfully synced ${response.results.length} adverse events`\r\n        };\r\n      } else {\r\n        return {\r\n          success: true,\r\n          count: 0,\r\n          message: 'No new adverse events found'\r\n        };\r\n      }\r\n    } catch (error) {\r\n      console.error('[OpenFDA] Adverse events sync failed:', error);\r\n      return {\r\n        success: false,\r\n        count: 0,\r\n        message: `Sync failed: ${error instanceof Error ? error.message : 'Unknown error'}`\r\n      };\r\n    }\r\n  }\r\n\r\n  async syncDeviceRecalls(tenantId: string, search?: string): Promise<{ success: boolean; count: number; message: string }> {\r\n    try {\r\n      console.log('[OpenFDA] Starting device recalls sync...');\r\n      const response = await this.fetchDeviceRecalls(search, 100);\r\n      \r\n      if (response.results && response.results.length > 0) {\r\n        await this.storeDeviceRecalls(response.results, tenantId);\r\n        return {\r\n          success: true,\r\n          count: response.results.length,\r\n          message: `Successfully synced ${response.results.length} device recalls`\r\n        };\r\n      } else {\r\n        return {\r\n          success: true,\r\n          count: 0,\r\n          message: 'No new device recalls found'\r\n        };\r\n      }\r\n    } catch (error) {\r\n      console.error('[OpenFDA] Device recalls sync failed:', error);\r\n      return {\r\n        success: false,\r\n        count: 0,\r\n        message: `Sync failed: ${error instanceof Error ? error.message : 'Unknown error'}`\r\n      };\r\n    }\r\n  }\r\n\r\n  // Get stored data from database\r\n  async getDrugLabels(tenantId?: string, limit: number = 50) {\r\n    const query = db.select().from(fdaDrugLabels).orderBy(desc(fdaDrugLabels.createdAt)).limit(limit);\r\n    \r\n    if (tenantId) {\r\n      return query.where(eq(fdaDrugLabels.tenantId, tenantId));\r\n    }\r\n    \r\n    return query;\r\n  }\r\n\r\n  async getAdverseEvents(tenantId?: string, limit: number = 50) {\r\n    const query = db.select().from(fdaAdverseEvents).orderBy(desc(fdaAdverseEvents.createdAt)).limit(limit);\r\n    \r\n    if (tenantId) {\r\n      return query.where(eq(fdaAdverseEvents.tenantId, tenantId));\r\n    }\r\n    \r\n    return query;\r\n  }\r\n\r\n  async getDeviceRecalls(tenantId?: string, limit: number = 50) {\r\n    const query = db.select().from(fdaDeviceRecalls).orderBy(desc(fdaDeviceRecalls.createdAt)).limit(limit);\r\n    \r\n    if (tenantId) {\r\n      return query.where(eq(fdaDeviceRecalls.tenantId, tenantId));\r\n    }\r\n    \r\n    return query;\r\n  }\r\n\r\n  // Search functionality\r\n  async searchDrugLabels(searchTerm: string, tenantId?: string, limit: number = 50) {\r\n    // This would implement full-text search when needed\r\n    // For now, simple LIKE search\r\n    const query = db.select().from(fdaDrugLabels)\r\n      .where(\r\n        and(\r\n          tenantId ? eq(fdaDrugLabels.tenantId, tenantId) : undefined,\r\n          // Simple search in multiple fields - would be replaced with proper full-text search\r\n        )\r\n      )\r\n      .orderBy(desc(fdaDrugLabels.createdAt))\r\n      .limit(limit);\r\n    \r\n    return query;\r\n  }\r\n\r\n  // Statistics and analytics\r\n  async getStatistics(tenantId?: string) {\r\n    const drugLabelsQuery = db.select({ count: count() }).from(fdaDrugLabels);\r\n    const adverseEventsQuery = db.select({ count: count() }).from(fdaAdverseEvents);\r\n    const deviceRecallsQuery = db.select({ count: count() }).from(fdaDeviceRecalls);\r\n    \r\n    if (tenantId) {\r\n      drugLabelsQuery.where(eq(fdaDrugLabels.tenantId, tenantId));\r\n      adverseEventsQuery.where(eq(fdaAdverseEvents.tenantId, tenantId));\r\n      deviceRecallsQuery.where(eq(fdaDeviceRecalls.tenantId, tenantId));\r\n    }\r\n    \r\n    const [drugLabelsCount] = await drugLabelsQuery;\r\n    const [adverseEventsCount] = await adverseEventsQuery;\r\n    const [deviceRecallsCount] = await deviceRecallsQuery;\r\n\r\n    return {\r\n      drugLabels: drugLabelsCount.count,\r\n      adverseEvents: adverseEventsCount.count,\r\n      deviceRecalls: deviceRecallsCount.count,\r\n      totalRecords: drugLabelsCount.count + adverseEventsCount.count + deviceRecallsCount.count\r\n    };\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const openFDAService = new OpenFDAService();"]}