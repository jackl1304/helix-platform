{"version":3,"file":"geminiService.js","sourceRoot":"","sources":["../../server/services/geminiService.ts"],"names":[],"mappings":"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","sourcesContent":["import { GoogleGenAI } from \"@google/genai\";\r\n\r\n// Initialize Gemini AI client\r\nconst ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY || \"\" });\r\n\r\nexport interface RegulatoryAnalysis {\r\n  summary: string;\r\n  keyPoints: string[];\r\n  complianceRequirements: string[];\r\n  riskLevel: \"Low\" | \"Medium\" | \"High\";\r\n  confidence: number;\r\n}\r\n\r\nexport interface DocumentSentiment {\r\n  rating: number; // 1-5 scale\r\n  confidence: number; // 0-1 scale\r\n  tone: \"Positive\" | \"Neutral\" | \"Negative\";\r\n  urgency: \"Low\" | \"Medium\" | \"High\";\r\n}\r\n\r\nexport interface ComplianceInsight {\r\n  requirement: string;\r\n  applicability: string[];\r\n  timeline: string;\r\n  impact: \"Low\" | \"Medium\" | \"High\";\r\n  recommendations: string[];\r\n}\r\n\r\n/**\r\n * Analyzes regulatory documents and provides comprehensive insights\r\n */\r\nexport async function analyzeRegulatoryDocument(text: string): Promise<RegulatoryAnalysis> {\r\n  try {\r\n    const systemPrompt = `You are a regulatory intelligence expert specializing in medical device compliance. \r\n    Analyze the provided regulatory document and provide:\r\n    1. A concise executive summary (max 200 words)\r\n    2. Key regulatory points (3-5 bullet points)\r\n    3. Specific compliance requirements\r\n    4. Risk level assessment (Low/Medium/High)\r\n    5. Confidence score (0-1)\r\n    \r\n    Respond in JSON format matching the RegulatoryAnalysis interface.`;\r\n\r\n    const response = await ai.models.generateContent({\r\n      model: \"gemini-2.5-pro\",\r\n      config: {\r\n        systemInstruction: systemPrompt,\r\n        responseMimeType: \"application/json\",\r\n        responseSchema: {\r\n          type: \"object\",\r\n          properties: {\r\n            summary: { type: \"string\" },\r\n            keyPoints: { type: \"array\", items: { type: \"string\" } },\r\n            complianceRequirements: { type: \"array\", items: { type: \"string\" } },\r\n            riskLevel: { type: \"string\", enum: [\"Low\", \"Medium\", \"High\"] },\r\n            confidence: { type: \"number\" }\r\n          },\r\n          required: [\"summary\", \"keyPoints\", \"complianceRequirements\", \"riskLevel\", \"confidence\"]\r\n        }\r\n      },\r\n      contents: text\r\n    });\r\n\r\n    const rawJson = response.text;\r\n    if (rawJson) {\r\n      const analysis: RegulatoryAnalysis = JSON.parse(rawJson);\r\n      return analysis;\r\n    } else {\r\n      throw new Error(\"Empty response from Gemini\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Gemini regulatory analysis error:\", error);\r\n    throw new Error(`Failed to analyze regulatory document: ${error}`);\r\n  }\r\n}\r\n\r\n/**\r\n * Performs sentiment analysis on regulatory updates\r\n */\r\nexport async function analyzeSentiment(text: string): Promise<DocumentSentiment> {\r\n  try {\r\n    const systemPrompt = `You are a regulatory sentiment analysis expert.\r\n    Analyze the sentiment and urgency of the regulatory text and provide:\r\n    1. Rating from 1-5 (1=very negative, 3=neutral, 5=very positive)\r\n    2. Confidence score between 0 and 1\r\n    3. Overall tone (Positive/Neutral/Negative)\r\n    4. Urgency level (Low/Medium/High) based on regulatory impact\r\n    \r\n    Respond with JSON matching the DocumentSentiment interface.`;\r\n\r\n    const response = await ai.models.generateContent({\r\n      model: \"gemini-2.5-flash\",\r\n      config: {\r\n        systemInstruction: systemPrompt,\r\n        responseMimeType: \"application/json\",\r\n        responseSchema: {\r\n          type: \"object\",\r\n          properties: {\r\n            rating: { type: \"number\" },\r\n            confidence: { type: \"number\" },\r\n            tone: { type: \"string\", enum: [\"Positive\", \"Neutral\", \"Negative\"] },\r\n            urgency: { type: \"string\", enum: [\"Low\", \"Medium\", \"High\"] }\r\n          },\r\n          required: [\"rating\", \"confidence\", \"tone\", \"urgency\"]\r\n        }\r\n      },\r\n      contents: text\r\n    });\r\n\r\n    const rawJson = response.text;\r\n    if (rawJson) {\r\n      const sentiment: DocumentSentiment = JSON.parse(rawJson);\r\n      return sentiment;\r\n    } else {\r\n      throw new Error(\"Empty response from Gemini\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Gemini sentiment analysis error:\", error);\r\n    throw new Error(`Failed to analyze sentiment: ${error}`);\r\n  }\r\n}\r\n\r\n/**\r\n * Generates compliance insights for specific regulatory requirements\r\n */\r\nexport async function generateComplianceInsights(regulationText: string, deviceType: string = \"medical device\"): Promise<ComplianceInsight[]> {\r\n  try {\r\n    const prompt = `Analyze this ${deviceType} regulation and identify specific compliance insights:\r\n\r\n${regulationText}\r\n\r\nDevice Type: ${deviceType}\r\n\r\nProvide 3-5 key compliance insights with:\r\n- Specific requirement descriptions\r\n- Applicable device categories/classes  \r\n- Implementation timelines\r\n- Business impact assessment\r\n- Actionable recommendations\r\n\r\nRespond in JSON array format matching the ComplianceInsight interface.`;\r\n\r\n    const response = await ai.models.generateContent({\r\n      model: \"gemini-2.5-pro\",\r\n      config: {\r\n        responseMimeType: \"application/json\",\r\n        responseSchema: {\r\n          type: \"array\",\r\n          items: {\r\n            type: \"object\",\r\n            properties: {\r\n              requirement: { type: \"string\" },\r\n              applicability: { type: \"array\", items: { type: \"string\" } },\r\n              timeline: { type: \"string\" },\r\n              impact: { type: \"string\", enum: [\"Low\", \"Medium\", \"High\"] },\r\n              recommendations: { type: \"array\", items: { type: \"string\" } }\r\n            },\r\n            required: [\"requirement\", \"applicability\", \"timeline\", \"impact\", \"recommendations\"]\r\n          }\r\n        }\r\n      },\r\n      contents: prompt\r\n    });\r\n\r\n    const rawJson = response.text;\r\n    if (rawJson) {\r\n      const insights: ComplianceInsight[] = JSON.parse(rawJson);\r\n      return insights;\r\n    } else {\r\n      throw new Error(\"Empty response from Gemini\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Gemini compliance insights error:\", error);\r\n    throw new Error(`Failed to generate compliance insights: ${error}`);\r\n  }\r\n}\r\n\r\n/**\r\n * Summarizes legal cases with key takeaways\r\n */\r\nexport async function summarizeLegalCase(caseText: string): Promise<string> {\r\n  try {\r\n    const prompt = `Summarize this medical device legal case in a professional, concise manner:\r\n\r\n${caseText}\r\n\r\nProvide:\r\n1. Case overview (2-3 sentences)\r\n2. Key legal issues\r\n3. Court decision summary\r\n4. Industry implications\r\n5. Compliance takeaways\r\n\r\nKeep the summary focused on regulatory and compliance aspects.`;\r\n\r\n    const response = await ai.models.generateContent({\r\n      model: \"gemini-2.5-flash\",\r\n      contents: prompt\r\n    });\r\n\r\n    return response.text || \"Summary not available\";\r\n  } catch (error) {\r\n    console.error(\"Gemini legal case summary error:\", error);\r\n    throw new Error(`Failed to summarize legal case: ${error}`);\r\n  }\r\n}\r\n\r\n/**\r\n * Generates executive briefing for regulatory intelligence dashboard\r\n */\r\nexport async function generateExecutiveBriefing(\r\n  updates: any[], \r\n  legalCases: any[], \r\n  timeframe: string = \"weekly\"\r\n): Promise<string> {\r\n  try {\r\n    const prompt = `Generate an executive briefing for regulatory intelligence dashboard:\r\n\r\nREGULATORY UPDATES (${updates.length} items):\r\n${updates.slice(0, 5).map(u => `- ${u.title} (${u.source_id || u.authority})`).join('\\n')}\r\n\r\nLEGAL CASES (${legalCases.length} items):\r\n${legalCases.slice(0, 3).map(c => `- ${c.case_title || c.title} (${c.court || c.jurisdiction})`).join('\\n')}\r\n\r\nTimeframe: ${timeframe}\r\n\r\nGenerate a professional executive briefing covering:\r\n1. Key regulatory developments\r\n2. Critical legal precedents\r\n3. Compliance priorities\r\n4. Risk assessment\r\n5. Strategic recommendations\r\n\r\nKeep it executive-level (200-300 words), focusing on business impact.`;\r\n\r\n    const response = await ai.models.generateContent({\r\n      model: \"gemini-2.5-pro\",\r\n      contents: prompt\r\n    });\r\n\r\n    return response.text || \"Executive briefing not available\";\r\n  } catch (error) {\r\n    console.error(\"Gemini executive briefing error:\", error);\r\n    throw new Error(`Failed to generate executive briefing: ${error}`);\r\n  }\r\n}"]}