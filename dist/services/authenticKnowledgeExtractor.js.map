{"version":3,"file":"authenticKnowledgeExtractor.js","sourceRoot":"","sources":["../../server/services/authenticKnowledgeExtractor.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger } from './logger.service';\r\nimport { storage } from '../storage';\r\nimport { JAMANetworkScrapingService } from './jamaNetworkScrapingService';\r\n\r\ninterface AuthenticKnowledgeSource {\r\n  id: string;\r\n  name: string;\r\n  url: string;\r\n  apiKey?: string;\r\n  authenticAPI: boolean;\r\n  extractorService: string;\r\n}\r\n\r\ninterface ExtractionStats {\r\n  totalSources: number;\r\n  processedSources: number;\r\n  articlesExtracted: number;\r\n  errors: number;\r\n  duplicatesSkipped: number;\r\n}\r\n\r\nexport class AuthenticKnowledgeExtractor {\r\n  private logger = new Logger('AuthenticKnowledgeExtractor');\r\n  private jamaService = new JAMANetworkScrapingService();\r\n\r\n  // **PRODUCTION MODE**: Only sources with authentic API access\r\n  private authenticSources: AuthenticKnowledgeSource[] = [\r\n    {\r\n      id: 'jama_medical_devices',\r\n      name: 'JAMA Network - Medical Devices Collection',\r\n      url: 'https://jamanetwork.com/collections/5738/medical-devices-and-equipment',\r\n      authenticAPI: true,\r\n      extractorService: 'JAMANetworkScrapingService'\r\n    }\r\n    // Additional authentic sources can be added when API keys/credentials are available\r\n    // {\r\n    //   id: 'fda_guidance_api',\r\n    //   name: 'FDA Guidance API',\r\n    //   url: 'https://api.fda.gov/guidance.json',\r\n    //   apiKey: process.env.FDA_API_KEY,\r\n    //   authenticAPI: true,\r\n    //   extractorService: 'FDAGuidanceService'\r\n    // }\r\n  ];\r\n\r\n  /**\r\n   * Extract knowledge articles ONLY from authenticated sources\r\n   */\r\n  async extractAuthenticKnowledgeArticles(): Promise<ExtractionStats> {\r\n    this.logger.info('Starting AUTHENTIC knowledge extraction - NO DEMO DATA');\r\n    \r\n    const stats: ExtractionStats = {\r\n      totalSources: this.authenticSources.length,\r\n      processedSources: 0,\r\n      articlesExtracted: 0,\r\n      errors: 0,\r\n      duplicatesSkipped: 0\r\n    };\r\n\r\n    if (stats.totalSources === 0) {\r\n      this.logger.warn('NO AUTHENTIC KNOWLEDGE SOURCES CONFIGURED - Knowledge extraction disabled');\r\n      return stats;\r\n    }\r\n\r\n    // Process only authenticated sources\r\n    for (const source of this.authenticSources) {\r\n      try {\r\n        this.logger.info('Processing AUTHENTIC knowledge source', {\r\n          sourceId: source.id,\r\n          sourceName: source.name,\r\n          hasAPI: source.authenticAPI\r\n        });\r\n\r\n        const articles = await this.extractFromAuthenticSource(source);\r\n        \r\n        for (const article of articles) {\r\n          try {\r\n            // Store authentic articles as regulatory updates\r\n            await storage.createRegulatoryUpdate({\r\n              title: article.title,\r\n              content: article.content || article.abstract,\r\n              source: source.name,\r\n              sourceId: source.id,\r\n              url: article.url,\r\n              publishedAt: new Date(article.publishedDate),\r\n              jurisdiction: 'Global',\r\n              category: 'Medical Research',\r\n              tags: JSON.stringify(article.tags || []),\r\n              author: article.authors.join(', '),\r\n              wordCount: article.content?.length || 500,\r\n              relevanceScore: 9,\r\n              difficulty: 'advanced'\r\n            });\r\n            \r\n            stats.articlesExtracted++;\r\n          } catch (error: any) {\r\n            if (error.message?.includes('duplicate')) {\r\n              stats.duplicatesSkipped++;\r\n            } else {\r\n              this.logger.error('Failed to store authentic article', { \r\n                error: error.message, \r\n                title: article.title \r\n              });\r\n              stats.errors++;\r\n            }\r\n          }\r\n        }\r\n\r\n        stats.processedSources++;\r\n        this.logger.info('Authentic source processing completed', {\r\n          sourceId: source.id,\r\n          articlesExtracted: articles.length,\r\n          duplicatesSkipped: 0\r\n        });\r\n\r\n        // Respectful delay for real APIs\r\n        await new Promise(resolve => setTimeout(resolve, 5000));\r\n\r\n      } catch (error: any) {\r\n        this.logger.error('Failed to process authentic knowledge source', {\r\n          sourceId: source.id,\r\n          error: error.message\r\n        });\r\n        stats.errors++;\r\n      }\r\n    }\r\n\r\n    this.logger.info('AUTHENTIC knowledge extraction completed - NO DEMO DATA USED', stats);\r\n    return stats;\r\n  }\r\n\r\n  /**\r\n   * Extract from authenticated source only\r\n   */\r\n  private async extractFromAuthenticSource(source: AuthenticKnowledgeSource): Promise<any[]> {\r\n    switch (source.extractorService) {\r\n      case 'JAMANetworkScrapingService':\r\n        return await this.jamaService.scrapeJAMAArticles();\r\n      \r\n      default:\r\n        this.logger.warn(`No authentic extractor available for ${source.name}`);\r\n        return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get statistics for authenticated sources only\r\n   */\r\n  getAuthenticSourcesInfo(): { \r\n    totalConfigured: number; \r\n    authenticated: number; \r\n    pendingAPIKeys: number; \r\n  } {\r\n    const authenticated = this.authenticSources.filter(s => s.authenticAPI).length;\r\n    \r\n    return {\r\n      totalConfigured: this.authenticSources.length,\r\n      authenticated,\r\n      pendingAPIKeys: this.authenticSources.length - authenticated\r\n    };\r\n  }\r\n}\r\n\r\nexport const authenticKnowledgeExtractor = new AuthenticKnowledgeExtractor();"]}