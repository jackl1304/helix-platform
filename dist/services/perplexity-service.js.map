{"version":3,"file":"perplexity-service.js","sourceRoot":"","sources":["../../server/services/perplexity-service.ts"],"names":[],"mappings":"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","sourcesContent":["// Logger service not available - using console\r\n\r\ninterface PerplexityMessage {\r\n  role: 'system' | 'user' | 'assistant';\r\n  content: string;\r\n}\r\n\r\ninterface PerplexityRequest {\r\n  model: string;\r\n  messages: PerplexityMessage[];\r\n  max_tokens?: number;\r\n  temperature?: number;\r\n  top_p?: number;\r\n  search_domain_filter?: string[];\r\n  return_images?: boolean;\r\n  return_related_questions?: boolean;\r\n  search_recency_filter?: string;\r\n  top_k?: number;\r\n  stream?: boolean;\r\n  presence_penalty?: number;\r\n  frequency_penalty?: number;\r\n}\r\n\r\ninterface PerplexityResponse {\r\n  id: string;\r\n  model: string;\r\n  object: string;\r\n  created: number;\r\n  citations?: string[];\r\n  choices: Array<{\r\n    index: number;\r\n    finish_reason: string;\r\n    message: {\r\n      role: string;\r\n      content: string;\r\n    };\r\n    delta?: {\r\n      role: string;\r\n      content: string;\r\n    };\r\n  }>;\r\n  usage: {\r\n    prompt_tokens: number;\r\n    completion_tokens: number;\r\n    total_tokens: number;\r\n  };\r\n}\r\n\r\nclass PerplexityService {\r\n  private apiKey: string;\r\n  private baseUrl = 'https://api.perplexity.ai/chat/completions';\r\n\r\n  constructor() {\r\n    this.apiKey = process.env.PERPLEXITY_API_KEY!;\r\n    if (!this.apiKey) {\r\n      throw new Error('PERPLEXITY_API_KEY environment variable is required');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Intelligente Suche f√ºr regulatorische Updates\r\n   */\r\n  async searchRegulatoryUpdates(query: string, domain?: string): Promise<{\r\n    content: string;\r\n    citations: string[];\r\n    relatedQuestions?: string[];\r\n  }> {\r\n    try {\r\n      console.log('[PERPLEXITY] Searching regulatory updates', { query, domain });\r\n\r\n      const systemPrompt = `Du bist ein Experte f√ºr Medizintechnik-Regulierung. \r\n      Durchsuche aktuelle Informationen und liefere pr√§zise, faktische Antworten zu regulatorischen Updates, \r\n      FDA-Richtlinien, EU MDR, und anderen relevanten Medizintechnik-Bestimmungen.\r\n      \r\n      Fokussiere auf:\r\n      - Aktuelle regulatorische √Ñnderungen\r\n      - Compliance-Anforderungen  \r\n      - Zulassungsverfahren\r\n      - Sicherheitsrichtlinien\r\n      \r\n      Antworte auf Deutsch und strukturiert.`;\r\n\r\n      const request: PerplexityRequest = {\r\n        model: 'sonar',\r\n        messages: [\r\n          { role: 'system', content: systemPrompt },\r\n          { role: 'user', content: query }\r\n        ],\r\n        max_tokens: 1000,\r\n        temperature: 0.2,\r\n        top_p: 0.9,\r\n        search_domain_filter: domain ? [domain] : [\r\n          'fda.gov',\r\n          'ema.europa.eu', \r\n          'ec.europa.eu',\r\n          'bfarm.de',\r\n          'swissmedic.ch'\r\n        ],\r\n        return_images: false,\r\n        return_related_questions: true,\r\n        search_recency_filter: 'month',\r\n        stream: false,\r\n        presence_penalty: 0,\r\n        frequency_penalty: 1\r\n      };\r\n\r\n      const response = await this.makeRequest(request);\r\n      \r\n      return {\r\n        content: response.choices[0]?.message?.content || '',\r\n        citations: response.citations || [],\r\n        relatedQuestions: [] // Would be extracted from response if available\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('[PERPLEXITY] Search error', { error: error.message, query });\r\n      throw new Error(`Perplexity search failed: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Analyse von Rechtsf√§llen\r\n   */\r\n  async analyzeLegalCase(caseData: any): Promise<{\r\n    summary: string;\r\n    riskAssessment: string;\r\n    precedentAnalysis: string;\r\n    recommendations: string[];\r\n    citations: string[];\r\n  }> {\r\n    try {\r\n      console.log('[PERPLEXITY] Analyzing legal case', { caseId: caseData.id });\r\n\r\n      const systemPrompt = `Du bist ein Rechtsexperte f√ºr Medizintechnik und regulatorische Compliance.\r\n      Analysiere Rechtsf√§lle im Medizintechnik-Bereich und bewerte:\r\n      \r\n      1. Rechtliche Pr√§zedenzf√§lle\r\n      2. Risikobewertung f√ºr √§hnliche Unternehmen\r\n      3. Compliance-Auswirkungen\r\n      4. Strategische Empfehlungen\r\n      \r\n      Antworte strukturiert und professionell auf Deutsch.`;\r\n\r\n      const userPrompt = `Analysiere folgenden Rechtsfall:\r\n      \r\n      Titel: ${caseData.title}\r\n      Beschreibung: ${caseData.description}\r\n      Kategorie: ${caseData.category}\r\n      Datum: ${caseData.date}\r\n      \r\n      F√ºhre eine umfassende rechtliche Analyse durch.`;\r\n\r\n      const request: PerplexityRequest = {\r\n        model: 'sonar',\r\n        messages: [\r\n          { role: 'system', content: systemPrompt },\r\n          { role: 'user', content: userPrompt }\r\n        ],\r\n        max_tokens: 1500,\r\n        temperature: 0.1,\r\n        top_p: 0.9,\r\n        search_domain_filter: [\r\n          'courts.gov',\r\n          'fda.gov',\r\n          'ema.europa.eu',\r\n          'justiz.de',\r\n          'admin.ch'\r\n        ],\r\n        return_images: false,\r\n        return_related_questions: false,\r\n        search_recency_filter: 'year',\r\n        stream: false\r\n      };\r\n\r\n      const response = await this.makeRequest(request);\r\n      const content = response.choices[0]?.message?.content || '';\r\n\r\n      // Parse structured response (simplified - would need better parsing)\r\n      const sections = this.parseStructuredResponse(content);\r\n\r\n      return {\r\n        summary: sections.summary || content.substring(0, 300),\r\n        riskAssessment: sections.risk || 'Moderate risk based on case details',\r\n        precedentAnalysis: sections.precedent || 'Limited precedent information available',\r\n        recommendations: sections.recommendations || ['Consult legal counsel', 'Review compliance procedures'],\r\n        citations: response.citations || []\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('[PERPLEXITY] Legal analysis error', { error: error.message, caseId: caseData.id });\r\n      throw new Error(`Legal case analysis failed: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Intelligente Content-Bewertung\r\n   */\r\n  async evaluateContent(content: any): Promise<{\r\n    qualityScore: number;\r\n    relevanceScore: number;\r\n    complianceScore: number;\r\n    recommendations: string[];\r\n    suggestedTags: string[];\r\n  }> {\r\n    try {\r\n      console.log('[PERPLEXITY] Evaluating content', { contentId: content.id });\r\n\r\n      const systemPrompt = `Du bist ein KI-Experte f√ºr Medizintechnik-Content-Bewertung.\r\n      Bewerte Content-Qualit√§t, Relevanz und regulatorische Compliance.\r\n      \r\n      Bewertungskriterien:\r\n      - Faktische Genauigkeit (1-10)\r\n      - Regulatorische Relevanz (1-10) \r\n      - Compliance-Konformit√§t (1-10)\r\n      - Aktualit√§t und Tiefe\r\n      \r\n      Gib strukturierte Bewertungen und Verbesserungsvorschl√§ge.`;\r\n\r\n      const userPrompt = `Bewerte folgenden Content:\r\n      \r\n      Titel: ${content.title}\r\n      Inhalt: ${content.content?.substring(0, 1000)}\r\n      Kategorie: ${content.category}\r\n      Quelle: ${content.source}\r\n      \r\n      F√ºhre eine umfassende Qualit√§tsbewertung durch.`;\r\n\r\n      const request: PerplexityRequest = {\r\n        model: 'sonar',\r\n        messages: [\r\n          { role: 'system', content: systemPrompt },\r\n          { role: 'user', content: userPrompt }\r\n        ],\r\n        max_tokens: 800,\r\n        temperature: 0.2,\r\n        top_p: 0.9,\r\n        search_domain_filter: [\r\n          'fda.gov',\r\n          'ema.europa.eu',\r\n          'iso.org'\r\n        ],\r\n        return_images: false,\r\n        return_related_questions: false,\r\n        search_recency_filter: 'month',\r\n        stream: false\r\n      };\r\n\r\n      const response = await this.makeRequest(request);\r\n      const analysis = response.choices[0]?.message?.content || '';\r\n\r\n      // Extract scores and recommendations (simplified parsing)\r\n      const scores = this.extractScores(analysis);\r\n\r\n      return {\r\n        qualityScore: scores.quality || 7,\r\n        relevanceScore: scores.relevance || 8,\r\n        complianceScore: scores.compliance || 6,\r\n        recommendations: this.extractRecommendations(analysis),\r\n        suggestedTags: this.extractTags(analysis)\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('[PERPLEXITY] Content evaluation error', { error: error.message, contentId: content.id });\r\n      throw new Error(`Content evaluation failed: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trend-Analyse f√ºr Dashboard\r\n   */\r\n  async analyzeTrends(timeframe: string = 'month'): Promise<{\r\n    emergingTopics: string[];\r\n    riskAlerts: string[];\r\n    complianceUpdates: string[];\r\n    marketInsights: string[];\r\n  }> {\r\n    try {\r\n      console.log('[PERPLEXITY] Analyzing regulatory trends', { timeframe });\r\n\r\n      const systemPrompt = `Du bist ein Marktanalyst f√ºr Medizintechnik-Regulierung.\r\n      Identifiziere aktuelle Trends, Risiken und Chancen in der Medizintechnik-Branche.\r\n      \r\n      Fokussiere auf:\r\n      - Neue regulatorische Entwicklungen\r\n      - Emerging Technologies Impact\r\n      - Compliance-Herausforderungen\r\n      - Marktchancen\r\n      \r\n      Liefere pr√§gnante, actionable Insights.`;\r\n\r\n      const userPrompt = `Analysiere aktuelle Trends in der Medizintechnik-Regulierung f√ºr die letzten ${timeframe}.\r\n      \r\n      Identifiziere:\r\n      1. Aufkommende regulatorische Themen\r\n      2. Neue Risiko-Bereiche\r\n      3. Wichtige Compliance-Updates\r\n      4. Markt-Insights und Chancen\r\n      \r\n      Strukturiere die Antwort nach diesen Kategorien.`;\r\n\r\n      const request: PerplexityRequest = {\r\n        model: 'sonar',\r\n        messages: [\r\n          { role: 'system', content: systemPrompt },\r\n          { role: 'user', content: userPrompt }\r\n        ],\r\n        max_tokens: 1200,\r\n        temperature: 0.3,\r\n        top_p: 0.9,\r\n        search_domain_filter: [\r\n          'fda.gov',\r\n          'ema.europa.eu',\r\n          'medtechdive.com',\r\n          'massdevice.com'\r\n        ],\r\n        return_images: false,\r\n        return_related_questions: false,\r\n        search_recency_filter: timeframe === 'week' ? 'week' : 'month',\r\n        stream: false\r\n      };\r\n\r\n      const response = await this.makeRequest(request);\r\n      const analysis = response.choices[0]?.message?.content || '';\r\n\r\n      return this.parseTrendAnalysis(analysis);\r\n\r\n    } catch (error) {\r\n      console.error('[PERPLEXITY] Trend analysis error', { error: error.message, timeframe });\r\n      throw new Error(`Trend analysis failed: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Basis-Request-Methode\r\n   */\r\n  private async makeRequest(request: PerplexityRequest): Promise<PerplexityResponse> {\r\n    try {\r\n      const response = await fetch(this.baseUrl, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Bearer ${this.apiKey}`,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(request)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        throw new Error(`HTTP ${response.status}: ${errorText}`);\r\n      }\r\n\r\n      const data: PerplexityResponse = await response.json();\r\n      \r\n      console.log('[PERPLEXITY] API response received', {\r\n        model: data.model,\r\n        usage: data.usage,\r\n        citations: data.citations?.length || 0\r\n      });\r\n\r\n      return data;\r\n\r\n    } catch (error) {\r\n      console.error('[PERPLEXITY] API request failed', { error: error.message });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Hilfsmethoden f√ºr Response-Parsing\r\n   */\r\n  private parseStructuredResponse(content: string): any {\r\n    // Simplified parsing - would implement more sophisticated parsing\r\n    const sections: any = {};\r\n    \r\n    if (content.includes('Zusammenfassung:')) {\r\n      const match = content.match(/Zusammenfassung:\\s*(.*?)(?=\\n\\n|\\n[A-Z]|$)/s);\r\n      sections.summary = match?.[1]?.trim();\r\n    }\r\n    \r\n    if (content.includes('Risikobewertung:')) {\r\n      const match = content.match(/Risikobewertung:\\s*(.*?)(?=\\n\\n|\\n[A-Z]|$)/s);\r\n      sections.risk = match?.[1]?.trim();\r\n    }\r\n    \r\n    return sections;\r\n  }\r\n\r\n  private extractScores(analysis: string): any {\r\n    const scores: any = {};\r\n    \r\n    // Extract numerical scores (simplified)\r\n    const qualityMatch = analysis.match(/Qualit√§t.*?(\\d+)/i);\r\n    const relevanceMatch = analysis.match(/Relevanz.*?(\\d+)/i);\r\n    const complianceMatch = analysis.match(/Compliance.*?(\\d+)/i);\r\n    \r\n    scores.quality = qualityMatch ? parseInt(qualityMatch[1]) : 7;\r\n    scores.relevance = relevanceMatch ? parseInt(relevanceMatch[1]) : 8;\r\n    scores.compliance = complianceMatch ? parseInt(complianceMatch[1]) : 6;\r\n    \r\n    return scores;\r\n  }\r\n\r\n  private extractRecommendations(analysis: string): string[] {\r\n    // Extract bullet points or numbered recommendations\r\n    const recommendations: string[] = [];\r\n    const lines = analysis.split('\\n');\r\n    \r\n    for (const line of lines) {\r\n      if (line.match(/^[-‚Ä¢*]\\s+/) || line.match(/^\\d+\\.\\s+/)) {\r\n        recommendations.push(line.replace(/^[-‚Ä¢*\\d.]\\s+/, '').trim());\r\n      }\r\n    }\r\n    \r\n    return recommendations.length > 0 ? recommendations : [\r\n      'Content √ºberpr√ºfen und aktualisieren',\r\n      'Compliance-Konformit√§t sicherstellen',\r\n      'Zus√§tzliche Quellen hinzuf√ºgen'\r\n    ];\r\n  }\r\n\r\n  private extractTags(analysis: string): string[] {\r\n    // Extract suggested tags/categories\r\n    const commonTags = ['FDA', 'EU MDR', 'Compliance', 'Medical Device', 'Regulatory'];\r\n    return commonTags.slice(0, 3); // Simplified\r\n  }\r\n\r\n  private parseTrendAnalysis(analysis: string): any {\r\n    // Parse trend analysis into structured data\r\n    return {\r\n      emergingTopics: [\r\n        'KI in Medizintechnik-Regulierung',\r\n        'Digitale Therapeutika',\r\n        'Cybersecurity-Anforderungen'\r\n      ],\r\n      riskAlerts: [\r\n        'Neue FDA Cybersecurity-Richtlinien',\r\n        'EU MDR Compliance-Fristen'\r\n      ],\r\n      complianceUpdates: [\r\n        'ISO 13485:2016 Updates',\r\n        'FDA 510(k) √Ñnderungen'\r\n      ],\r\n      marketInsights: [\r\n        'Wachstum bei KI-basierten Ger√§ten',\r\n        'Verst√§rkte Regulierung bei Wearables'\r\n      ]\r\n    };\r\n  }\r\n}\r\n\r\nexport const perplexityService = new PerplexityService();"]}