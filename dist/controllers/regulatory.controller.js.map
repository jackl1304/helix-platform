{"version":3,"file":"regulatory.controller.js","sourceRoot":"","sources":["../../server/controllers/regulatory.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response, NextFunction } from 'express';\r\nimport { logger } from '../services/logger.service';\r\n// Import from local files since @shared/types doesn't exist\r\nimport { asyncHandler } from '../middleware/error.middleware';\r\n\r\n// Define types locally\r\ninterface ApiResponse<T = any> {\r\n  success: boolean;\r\n  data?: T;\r\n  message?: string;\r\n}\r\n\r\ninterface RegulatoryUpdate {\r\n  id: string;\r\n  title: string;\r\n  description?: string;\r\n  region?: string;\r\n  update_type?: string;\r\n  priority?: string;\r\n  device_classes?: string[];\r\n  published_at?: string;\r\n  created_at?: string;\r\n  effective_date?: string;\r\n  source_id?: string;\r\n  source_url?: string;\r\n  content?: string;\r\n  categories?: string[];\r\n  raw_data?: any;\r\n}\r\n\r\ninterface StorageRegulatoryUpdate {\r\n  id: string;\r\n  title: string;\r\n  description?: string;\r\n  region?: string;\r\n  update_type?: string;\r\n  priority?: string;\r\n  device_classes?: string[];\r\n  published_at?: string;\r\n  created_at?: string;\r\n  effective_date?: string;\r\n  source_id?: string;\r\n  source_url?: string;\r\n  content?: string;\r\n  categories?: string[];\r\n  raw_data?: any;\r\n}\r\n\r\nclass ValidationError extends Error {\r\n  constructor(message: string) {\r\n    super(message);\r\n    Error.captureStackTrace(this, this.constructor);\r\n  }\r\n}\r\n\r\nclass NotFoundError extends Error {\r\n  constructor(message: string) {\r\n    super(message);\r\n    Error.captureStackTrace(this, this.constructor);\r\n  }\r\n}\r\nimport { storage } from '../storage';\r\n\r\nexport class RegulatoryController {\r\n  getRecent = asyncHandler(async (req: Request, res: Response<ApiResponse<RegulatoryUpdate[]>>, next: NextFunction) => {\r\n    logger.info(\"API: Fetching recent regulatory updates from database\");\r\n    \r\n    const limitParam = req.query.limit as string;\r\n    const limit = limitParam ? parseInt(limitParam, 10) : 50;\r\n    \r\n    if (isNaN(limit) || limit < 1 || limit > 1000) {\r\n      throw new ValidationError('Limit must be a number between 1 and 1000');\r\n    }\r\n    \r\n    const region = req.query.region as string;\r\n    \r\n    const updates: StorageRegulatoryUpdate[] = await storage.getRecentRegulatoryUpdates(limit);\r\n    \r\n    // Filter by region if specified\r\n    const filteredUpdates = region && region !== 'all'\r\n      ? updates.filter(update => update.region?.toLowerCase().includes(region.toLowerCase()))\r\n      : updates;\r\n    \r\n    // Transform to API format\r\n    const transformedUpdates: RegulatoryUpdate[] = filteredUpdates.map(update => ({\r\n      id: update.id,\r\n      title: update.title,\r\n      description: update.description,\r\n      region: update.region,\r\n      update_type: update.update_type as any,\r\n      priority: update.priority as any,\r\n      device_classes: update.device_classes,\r\n      published_at: update.published_at,\r\n      created_at: update.created_at,\r\n      effective_date: update.effective_date,\r\n      source_id: update.source_id,\r\n      source_url: update.source_url,\r\n      content: update.content,\r\n      categories: update.categories,\r\n      raw_data: update.raw_data\r\n    }));\r\n    \r\n    logger.info(\"API: Retrieved regulatory updates from database\", { \r\n      total: updates.length,\r\n      filtered: filteredUpdates.length,\r\n      region: region || 'all'\r\n    });\r\n    \r\n    res.json({\r\n      success: true,\r\n      data: transformedUpdates,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n  });\r\n\r\n  getAll = asyncHandler(async (req: Request, res: Response<ApiResponse<RegulatoryUpdate[]>>, next: NextFunction) => {\r\n    logger.info(\"API: Fetching all regulatory updates\");\r\n    \r\n    const updates: StorageRegulatoryUpdate[] = await storage.getAllRegulatoryUpdates();\r\n    \r\n    // Transform to API format\r\n    const transformedUpdates: RegulatoryUpdate[] = updates.map(update => ({\r\n      id: update.id,\r\n      title: update.title,\r\n      description: update.description,\r\n      region: update.region,\r\n      update_type: update.update_type as any,\r\n      priority: update.priority as any,\r\n      device_classes: update.device_classes,\r\n      published_at: update.published_at,\r\n      created_at: update.created_at,\r\n      effective_date: update.effective_date,\r\n      source_id: update.source_id,\r\n      source_url: update.source_url,\r\n      content: update.content,\r\n      categories: update.categories,\r\n      raw_data: update.raw_data\r\n    }));\r\n    \r\n    logger.info(\"API: Retrieved all regulatory updates\", { count: transformedUpdates.length });\r\n    \r\n    res.json({\r\n      success: true,\r\n      data: transformedUpdates,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n  });\r\n}\r\n\r\nexport const regulatoryController = new RegulatoryController();"]}